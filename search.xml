<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="highlight bash"><span class="line">$ hexo new <span class="string">"My New Post"</span></span></code><br><code class="highlight bash"><span class="line">$ hexo new <span class="string">"My New Post"</span></span></code><br><code class="highlight bash"><span class="line">$ hexo new <span class="string">"My New Post"</span></span></code><br><code class="highlight bash"><span class="line">$ hexo new <span class="string">"My New Post"</span></span></code><br><code class="highlight bash"><span class="line">$ hexo new <span class="string">"My New Post"</span></span></code><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="highlight bash"><span class="line">$ hexo server</span></code><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="highlight bash"><span class="line">$ hexo generate</span></code><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="highlight bash"><span class="line">$ hexo deploy</span></code><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vue2.0学习(二)---计算属性和监听属性</title>
    <url>/2019/12/03/vue2.0/Vue-Study2/</url>
    <content><![CDATA[<blockquote>
<p>两者都用来相应数据变化</p>
<p>计算属性适合于一些简单的运算</p>
<p>监听属性适用于异步加载数据或开销较大的操作</p>
</blockquote>
<a id="more"></a>

<h1 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性(computed)"></a>计算属性(computed)</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="highlight html"><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span></code><br><code class="highlight html"><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Orginal message:"&#123;&#123;message&#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></code><br><code class="highlight html"><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message:"&#123;&#123;reversedMessage&#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></code><br><code class="highlight html"><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></code><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight vue"><span class="line">var vm &#x3D; new Vue(&#123;</span></code><br><code class="highlight vue"><span class="line">	el:&quot;#example&quot;,</span></code><br><code class="highlight vue"><span class="line">	data:&#123;</span></code><br><code class="highlight vue"><span class="line">		message:&quot;hello&quot;</span></code><br><code class="highlight vue"><span class="line">	&#125;,</span></code><br><code class="highlight vue"><span class="line">	computed:&#123;</span></code><br><code class="highlight vue"><span class="line">		reversedMessage:function()&#123;</span></code><br><code class="highlight vue"><span class="line">			&#x2F;&#x2F;&#39;this&#39;指向vm实例</span></code><br><code class="highlight vue"><span class="line">			return this.message.split(&#39;&#39;),reverse().join();</span></code><br><code class="highlight vue"><span class="line">			</span></code><br><code class="highlight vue"><span class="line">			&#x2F;&#x2F;该方法的执行依赖于this.message的值是否发生改版,这里不能设置message的值,</span></code><br><code class="highlight vue"><span class="line">			&#x2F;&#x2F;例如:this.message&#x3D;&quot;改变了&quot;</span></code><br><code class="highlight vue"><span class="line">			&#x2F;&#x2F;但是获得message的值并进行一些操作</span></code><br><code class="highlight vue"><span class="line">		&#125;</span></code><br><code class="highlight vue"><span class="line">	&#125;</span></code><br><code class="highlight vue"><span class="line">&#125;);</span></code><br><code class="highlight vue"><span class="line"></span></code><br><code class="highlight vue"><span class="line">&#x2F;&#x2F;data中的message的值一旦发生改变,计算属性(computed)中的reversedMessage方法就会执行</span></code><br></pre></td></tr></table></figure>



<h2 id="计算属性与方法"><a href="#计算属性与方法" class="headerlink" title="计算属性与方法"></a>计算属性与方法</h2><ol>
<li><p>计算属性是基于他们的依赖关系进行缓存的,只有在依赖关系发生改变时他们才能更新变化。这意味着只要message没有发生变化,多次访问reverseMessage计算属性会立即返回之前的缓存结果，而不必再次执行函数,但是计算属性在页面渲染后就会执行一次</p>
</li>
<li><p>方法总会在每次触发重新渲染时调用函数</p>
</li>
</ol>
<h2 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h2><p>computed 属性默认只有get,不过在需要是也可以提供一个set<br>博主个人理解:计算属性可以有多个依赖属性</p>
<ul>
<li>get: 获取依赖的属性值</li>
<li>set:设置依赖的属性值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight plain"><span class="line">&#x2F;&#x2F;部分代码</span></code><br><code class="highlight plain"><span class="line">computed:&#123;</span></code><br><code class="highlight plain"><span class="line">	num2:&#123;</span></code><br><code class="highlight plain"><span class="line">		get:function()&#123;</span></code><br><code class="highlight plain"><span class="line">			return this.num-1;</span></code><br><code class="highlight plain"><span class="line">		&#125;,</span></code><br><code class="highlight plain"><span class="line">		set:function(val)&#123;		&#x2F;&#x2F;接收设置的值,这里的val是一个形参,可以自己设置成别的</span></code><br><code class="highlight plain"><span class="line">			this.num &#x3D; val;</span></code><br><code class="highlight plain"><span class="line">		&#125;</span></code><br><code class="highlight plain"><span class="line">	&#125;</span></code><br><code class="highlight plain"><span class="line">&#125;</span></code><br><code class="highlight plain"><span class="line"></span></code><br><code class="highlight plain"><span class="line">vm.num &#x3D; 111;          &#x2F;&#x2F;这里会先执行set函数进行赋值,然后再执行get函数,结果为110</span></code><br><code class="highlight plain"><span class="line">注意:set函数肯定是给其依赖的属性赋值</span></code><br></pre></td></tr></table></figure>


<h1 id="侦听属性-watch"><a href="#侦听属性-watch" class="headerlink" title="侦听属性(watch)"></a>侦听属性(watch)</h1><p>通过watch来响应数据的变化,适用于异步加载数据或开销较大的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight vue"><span class="line">var vm &#x3D; new Vue(&#123;</span></code><br><code class="highlight vue"><span class="line">  el:&quot;#test&quot;,</span></code><br><code class="highlight vue"><span class="line">  data:&#123;</span></code><br><code class="highlight vue"><span class="line">   name:&quot;lk&quot;,</span></code><br><code class="highlight vue"><span class="line">   user:&#123;</span></code><br><code class="highlight vue"><span class="line">      id:1001,</span></code><br><code class="highlight vue"><span class="line">      name:&quot;刘凯&quot;,</span></code><br><code class="highlight vue"><span class="line">      age:23,</span></code><br><code class="highlight vue"><span class="line">   &#125;</span></code><br><code class="highlight vue"><span class="line">  &#125;,</span></code><br><code class="highlight vue"><span class="line">  watch:&#123;</span></code><br><code class="highlight vue"><span class="line">     name:function(newValue,oldValue)&#123;              &#x2F;&#x2F;监视name属性</span></code><br><code class="highlight vue"><span class="line">        console.log(&quot;修改之前的值:&quot; + newValue,&quot;修改之后的值:&quot; + oldValue);</span></code><br><code class="highlight vue"><span class="line">     &#125;,</span></code><br><code class="highlight vue"><span class="line">     user:&#123;                     &#x2F;&#x2F;监视user对象</span></code><br><code class="highlight vue"><span class="line">      handler:function(newValue,oldValue)&#123;     &#x2F;&#x2F;注意这里的两个参数是对象</span></code><br><code class="highlight vue"><span class="line">		&#x2F;&#x2F;由于user是一个对象,是按引用访问的,所以这里的newValue和oldValue是两个对象</span></code><br><code class="highlight vue"><span class="line">        console.log(&quot;修改之前的值:&quot; + newValue.name,&quot;修改之后的值:&quot; + oldValue.name);</span></code><br><code class="highlight vue"><span class="line">      &#125;,</span></code><br><code class="highlight vue"><span class="line">      deep:true        &#x2F;&#x2F;用来检测对象内部的属性变化,如果不加就是监测对象引用地址的改变</span></code><br><code class="highlight vue"><span class="line">  &#125;</span></code><br><code class="highlight vue"><span class="line"> &#125;</span></code><br><code class="highlight vue"><span class="line">&#125;);</span></code><br><code class="highlight vue"><span class="line">&#x2F;&#x2F;注意:此用法不能监视对象里具体的一个属性</span></code><br><code class="highlight vue"><span class="line">	&#x2F;&#x2F;如果监视的是一个对象的话,那么回调函数里的参数就是监视的对象了</span></code><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js2.0学习(一)——基础</title>
    <url>/2019/12/02/vue2.0/Vue-Study1/</url>
    <content><![CDATA[<p>vue.js是一套构建用户界面的渐进式框架。<br><code>Vue</code>只关注视图层，采用自底向上增量开发的设计。<br><code>Vue</code> 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<a id="more"></a>

<h1 id="Vue语法格式"><a href="#Vue语法格式" class="headerlink" title="Vue语法格式"></a><code>Vue</code>语法格式</h1><h2 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight vue"><span class="line">var vm &#x3D; new Vue(&#123;</span></code><br><code class="highlight vue"><span class="line">&#x2F;&#x2F;选项</span></code><br><code class="highlight vue"><span class="line">&#125;)</span></code><br></pre></td></tr></table></figure>

<p>实例:</p>
<pre><code>&lt;div id=&quot;vue_det&quot;&gt;
       &lt;h1&gt;site : {{site}}&lt;/h1&gt;
       &lt;h1&gt;url : {{url}}&lt;/h1&gt;
       &lt;h1&gt;{{details()}}&lt;/h1&gt;
   &lt;/div&gt;
   &lt;script type=&quot;text/javascript&quot;&gt;
       var vm = new Vue({
           el: &apos;#vue_det&apos;,
           data: {
               site: &quot;菜鸟教程&quot;,
               url: &quot;www.runoob.com&quot;,
               alexa: &quot;10000&quot;,
           },
           methods: {
               details: function() {
                   return  this.site + &quot; - 学的不仅是技术，更是梦想！&quot;;
               }
           }
       })
   &lt;/script&gt;</code></pre><ol>
<li><code>el(element)</code>参数是<code>DOM</code>元素中的<code>id</code>。</li>
<li><code>data</code>用于定义属性(也可以是实例外部方法(函数)的返回值),<code>v-model</code>双向绑定时,<code>data</code>中的属性若为空的话可以用双引号[“”],会根据绑定的数据类型自动转换类型。</li>
<li><code>methods</code>用于定义函数,通过<code>return</code>来返回函数值。</li>
</ol>
<h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><pre><code>var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000}
var vm = new Vue({
    el: &apos;#vue_det&apos;,
    data: data
})</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 它们引用相同的对象！</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">document</span>.write(vm.site === data.site) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span></code><br><code class="highlight javascript"><span class="line">vm.site = <span class="string">"Runoob"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">document</span>.write(data.site + <span class="string">"&lt;br&gt;"</span>) <span class="comment">// Runoob</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ……反之亦然</span></span></code><br><code class="highlight javascript"><span class="line">data.alexa = <span class="number">1234</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">document</span>.write(vm.alexa) <span class="comment">// 1234</span></span></code><br></pre></td></tr></table></figure>



<p><code>vue</code>实例还提供了一些有用的实例属性与方法.它们都有前缀$.以便与用户定义的属性区分开来</p>
<p>例如:</p>
<pre><code>//我们的数据对象
var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000}
var vm = new Vue({
    el: &apos;#vue_det&apos;,
    data: data
})

document.write(vm.$data === data) // true
document.write(&quot;&lt;br&gt;&quot;) // true
document.write(vm.$el === document.getElementById(&apos;vue_det&apos;)) // true</code></pre><h1 id="Vue-js模板语法"><a href="#Vue-js模板语法" class="headerlink" title="Vue.js模板语法"></a>Vue.js模板语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><ul>
<li>文本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight vue"><span class="line">&lt;p id&#x3D;&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span></code><br><code class="highlight vue"><span class="line">var vm &#x3D; new Vue(&#123;</span></code><br><code class="highlight vue"><span class="line">	el:#app,</span></code><br><code class="highlight vue"><span class="line">	data:&#123;</span></code><br><code class="highlight vue"><span class="line">		message:&quot;hello world!&quot;</span></code><br><code class="highlight vue"><span class="line">	&#125;</span></code><br><code class="highlight vue"><span class="line">&#125;)</span></code><br></pre></td></tr></table></figure>






<pre><code>     使用这种方法可能会出现闪烁问题,即页面中的DOM和数据还没有加载完成,页面上会显示出大括号
解决:</code></pre><figure class="highlight css"><table><tr><td class="code"><pre><code class="highlight css"><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span></code><br><code class="highlight css"><span class="line">  <span class="attribute">display</span>:none;</span></code><br><code class="highlight css"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<p>在使用了双大括号语法的标签里使用v-cloak</p>
<p>扩展: v-text<br>文本插值,其等同于Mustache语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight plain"><span class="line">&lt;p v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span></code><br><code class="highlight plain"><span class="line">&lt;!--和下面的一样--&gt;</span></code><br><code class="highlight plain"><span class="line">&lt;p&gt;&lt;&#123;&#123;msg&#125;&#125;&#x2F;p&gt;</span></code><br></pre></td></tr></table></figure>


<p>​<br> 2.  使用<code>v-once</code>指令,可以一次性的插值,当数据改变时,插值处的内容不会更新</p>
<ul>
<li>Html</li>
</ul>
<p>使用v-html指令用于输出html代码</p>
<pre><code> &lt;div id=&quot;app&quot;&gt;
    &lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    new Vue({
        el: &apos;#app&apos;,
        data: {
            message: &apos;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&apos;
        }
    })
&lt;/script&gt;</code></pre><ul>
<li><p>属性</p>
<p>HTML属性中的值应使用v-bind指令(双大括号不能作用在HTML特性上)</p>
<p><code>&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</code>    </p>
<p>在布尔特性的情况下,它们的存在即暗示为true,  如果 <code>isButtonDisabled</code> 的值为 null ,<br><code>underfined</code>或 false,则disable的特性不会被包含在渲染出来的<code>&lt;button&gt;</code>元素中<br>(即不加载这个特性)</p>
</li>
<li><p>使用JavaScript表达式</p>
<p>vue.js支持JavaScript表达式(每个绑定都只能包含单个表达式)</p>
<p>JS表达式: 是由运算元和运算符(可选)构成，并产生运算结果的语法结构。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="highlight html"><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数学运算:&#123;&#123;x+y&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></code><br><code class="highlight html"><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>三目运算符:&#123;&#123;ok?"yes":"no"&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></code><br><code class="highlight html"><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>方法的调用&#123;&#123;msg.split(""),reverse().join()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>指令</li>
</ul>
<p>指令是带有 v-前缀的特殊属性<br>    指令用于在表达式的值改变时,将某些行为应用到DOM上</p>
<p>例如 v-if v-bind  v-text……</p>
<ul>
<li>参数</li>
</ul>
<p>参数在指令后以冒号指明.<br>    例如 <code>v-bind:href = &quot;url&quot;</code></p>
<p>这里的<code>href</code>是参数,告知 <code>v-bind</code>指令该元素的<code>href</code>属性与表达式url的值绑定</p>
<p>参数除了是HTML元素的属性,也可以是监听的事件名,如<code>:click</code>事件</p>
<ul>
<li><p>修饰符</p>
<p>修饰符是以半角句号 <code>.</code> 指明的特殊后缀,用于指出一个指令应该以特殊方式绑定</p>
<p>例如: <code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></p>
<pre><code>`.prevent` 修饰符告诉 v-on 指令对于触发的事件调用`event.preventDefault()`</code></pre></li>
<li><p>用户输入</p>
<pre><code>使用 v-model 指令来实现双向数据绑定</code></pre></li>
</ul>
<p>实例:      </p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
       &lt;p&gt;{{ message }}&lt;/p&gt;
       &lt;input v-model=&quot;message&quot;&gt;
   &lt;/div&gt;
   &lt;script&gt;
    new Vue({
        el: &apos;#app&apos;,
       data: {
         message: &apos;Runoob!&apos;
       }
     })
   &lt;/script&gt;</code></pre><p>按钮的事件可以使用 <code>v-on</code> 监听事件     例如:<code>v-on:click = &quot;click&quot;</code></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--对象的扩展</title>
    <url>/2019/10/20/ECMAScript6/9%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h1><p>ES6允许直接写入变量和函数,作为对象的属性和方法.(这在之前是不允许的)<br>直接写入变量:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;</span></code><br><code class="highlight javascript"><span class="line">baz <span class="comment">// &#123;foo: "bar"&#125;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//当属性名与变量名相等时可以只写一个属性名</span></span></code><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>方法的简写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> o = &#123;</span></code><br><code class="highlight javascript"><span class="line">  method() &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> o = &#123;</span></code><br><code class="highlight javascript"><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>如果某个方法的值是一个Generator函数,前面需要加上星号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  * m() &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">yield</span> <span class="string">'hello world'</span>;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h1 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h1><p>JavaScript定义对象的属性:</p>
<ul>
<li>方法一: <code>obj.foo = true</code>;</li>
<li>方法二(属性名表达式): <code>obj[&#39;a&#39; + &#39;bc&#39;] = 123</code>;</li>
</ul>
<p>中括号中还可以放入变量名<br>ES6之前,使用字面量方式定义对象(使用大括号),只能使用方法一的形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  foo: <span class="literal">true</span>,</span></code><br><code class="highlight javascript"><span class="line">  abc: <span class="number">123</span></span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>ES6允许字面量定义对象时,用方法二作为对象的属性名,即把表达式放在方括号内:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> propKey = <span class="string">'foo'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  [propKey]: <span class="literal">true</span>,</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'a'</span> + <span class="string">'bc'</span>]: <span class="number">123</span></span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>使用方法二定义方法名:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">obj.hello() <span class="comment">// hi</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>属性名表达式不能与简洁表达式同时使用</li>
<li>属性名表达式如果是一个对象,默认情况下会自动转为字符串[object,object],(会覆盖掉别的属性名表达式为对象的值)</li>
</ul>
</blockquote>
<h1 id="方法的name属性"><a href="#方法的name属性" class="headerlink" title="方法的name属性"></a>方法的name属性</h1><p>函数的name属性,返回函数名. 对象方法也是函数,因此也有name属性</p>
<p>如果对象的方法使用了取值函数(getter)和存值函数(setter),则name属性不是在该方法上面,而是该方法的属性的描述对象get和set属性上面,返回值是方法名前加上get和set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">get</span> foo() &#123;&#125;,</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">set</span> foo(x) &#123;&#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">obj.foo.name</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// TypeError: Cannot read property 'name' of undefined</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span></code><br><code class="highlight javascript"><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span></code><br></pre></td></tr></table></figure>

<p>特殊情况:</p>
<ul>
<li>bind方法创造的函数,name属性返回bound加上原函数的名字</li>
<li>Function构造函数创造的函数,name属性返回anonymous</li>
<li>如果对象的方法是一个Symbol,那么name属性返回的是这个Symbol值的描述</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">'description'</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  [key1]() &#123;&#125;,</span></code><br><code class="highlight javascript"><span class="line">  [key2]() &#123;&#125;,</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line">obj[key1].name <span class="comment">// "[description]"</span></span></code><br><code class="highlight javascript"><span class="line">obj[key2].name <span class="comment">// ""</span></span></code><br></pre></td></tr></table></figure>

<h1 id="属性的可枚举性和遍历"><a href="#属性的可枚举性和遍历" class="headerlink" title="属性的可枚举性和遍历"></a>属性的可枚举性和遍历</h1><h2 id="可枚举性"><a href="#可枚举性" class="headerlink" title="可枚举性"></a>可枚举性</h2><p>对象的每个属性都有一个描述对象(Descriptor),用来控制该属性的行为.</p>
<p>ES5的<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象.</p>
<p>描述对象的enumerable属性,称为”可枚举性”,如果该属性为false,就表示某些操作会忽略当前属性</p>
<p>目前,有四个操作会忽略enumerable为false的属性:</p>
<ul>
<li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li>
<li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li>
<li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li>
<li><code>Object.assign()</code>： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li>
</ul>
<p>上面四个方法中,只有for…in会返回继承的属性,其他三个方法都会忽略继承的属性,只处理对象自身的属性<br><strong>注意:</strong><br>所有 Class 的原型的方法都是不可枚举的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="class"><span class="keyword">class</span></span>&#123;foo()&#123;&#125;&#125;.prototype, <span class="string">'foo'</span>)</span></code><br><code class="highlight javascript"><span class="line">.enumerable</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// false</span></span></code><br></pre></td></tr></table></figure>

<h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><p>ES6一共有5中方法可以遍历对象的属性</p>
<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）</p>
<h3 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h3><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p>
<h3 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h3><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p>
<h3 id="Object-getOwnPropertySymbols-obj"><a href="#Object-getOwnPropertySymbols-obj" class="headerlink" title="Object.getOwnPropertySymbols(obj)"></a>Object.getOwnPropertySymbols(obj)</h3><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p>
<h3 id="Reflect-ownKeys-obj"><a href="#Reflect-ownKeys-obj" class="headerlink" title="Reflect.ownKeys(obj)"></a>Reflect.ownKeys(obj)</h3><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。<br>以上的5种方法遍历对象的键名,都遵守同样的属性遍历的次序规则:</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列。</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></span></code><br></pre></td></tr></table></figure>

<h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><p>super关键字指向当前对象的原型对象</p>
<p><strong>注意:</strong><br>该关键字只有用在对象方法的简写法里面才有效,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//方法简写法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> proto = &#123;</span></code><br><code class="highlight javascript"><span class="line">  foo: <span class="string">'hello'</span></span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  foo: <span class="string">'world'</span>,</span></code><br><code class="highlight javascript"><span class="line">  find() &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span></code><br><code class="highlight javascript"><span class="line">obj.find() <span class="comment">// "hello"</span></span></code><br></pre></td></tr></table></figure>

<h1 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h1><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>扩展运算符用于解构赋值,必须位于最后一个参数,会将所有为被读取的属性和值一起拷贝到新对象上面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line">x <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">y <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null,就会报错,因为它们无法转为对象</li>
<li>扩展运算符的解构赋值不能复制继承自原型的属性</li>
<li>解构赋值的拷贝是浅拷贝</li>
</ul>
<p>解构赋值还可以用于扩展某个函数的参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFunction</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// ...</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapperFunction</span>(<span class="params">&#123; x, y, ...restConfig &#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// 使用 x 和 y 参数进行操作</span></span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// 其余参数传给原始函数</span></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> baseFunction(restConfig);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>对象的扩展运算符 ( … ) 用于取出参数对象的所有可遍历属性,拷贝到当前对象之中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span></code><br><code class="highlight javascript"><span class="line">n <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span></code><br></pre></td></tr></table></figure>

<p>由于数组是特殊的对象,所以对象的扩展运算符也可以用于数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &#125;;</span></code><br><code class="highlight javascript"><span class="line">foo</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123;0: "a", 1: "b", 2: "c"&#125;</span></span></code><br></pre></td></tr></table></figure>

<p><strong>规则:</strong></p>
<ul>
<li>如果扩展运算符后面是一个空对象,则没有任何效果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果扩展运算符后面不是对象,则会自动将其转为对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 &#123;...Object(1)&#125;</span></span></code><br><code class="highlight javascript"><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果扩展运算符后面是字符串,它会自动转成一个类似数组的对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">&#123;...<span class="string">'hello'</span>&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123;0: "h", 1: "e", 2: "l", 3: "l", 4: "o"&#125;</span></span></code><br></pre></td></tr></table></figure>

<p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 写法一</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> clone1 = &#123;</span></code><br><code class="highlight javascript"><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span></code><br><code class="highlight javascript"><span class="line">  ...obj</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 写法二</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span></code><br><code class="highlight javascript"><span class="line">  obj</span></code><br><code class="highlight javascript"><span class="line">);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 写法三</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span></code><br><code class="highlight javascript"><span class="line">)</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//推荐使用写法一和写法二</span></span></code><br></pre></td></tr></table></figure>

<p>扩展运算符等同于使用<code>Object.assign()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> aClone = &#123; ...a &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> aClone = <span class="built_in">Object</span>.assign(&#123;&#125;, a);</span></code><br></pre></td></tr></table></figure>

<p>扩展运算符可以用于合并两个对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span></code><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>如果用户自定义的属性,放在扩展运算符后面,则扩展运算符内部的同名属性会被覆盖掉</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">4</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line">x    <span class="comment">//1</span></span></code><br><code class="highlight javascript"><span class="line">y    <span class="comment">//2</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。</li>
<li>与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span></code><br><code class="highlight javascript"><span class="line">  b: <span class="number">2</span>,</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>



<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/dc0f131b73a08bbf08b5e96faaf768e6/0" alt="img">             </p>
<h1 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h1><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p>ES5 比较两个值是否相等，只有两个运算符：相等运算符 ( == ) 和严格相等运算符 ( === ) ,它们都有缺点，前者会自动转换数据类型,后者的<code>NaN</code>不等于自身,以及+0 等于 -0</p>
<p>JavaScript缺乏一种算法在所有环境中，只要两个值是一样的，它们就应该相等。<br>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<br><code>Object.is()</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// false</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>该方法中 +0不等于-0</li>
<li><code>NaN</code>等于自身</li>
</ul>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h3><p><code>Object.assign</code>方法用于对象的合并,将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br><code>Object.assign</code>方法的第一个参数是目标对象,后面的所有参数都是源对象</p>
<ul>
<li>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>如果只有一个参数,Object.assign方法会直接返回该参数</li>
<li>如果该参数不是对象，则会先转成对象，然后返回。</li>
<li>由于undefined和null无法转为对象,所以如果他们作为参数(首参数)会报错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//首参数</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">undefined</span>) <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">null</span>) <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//非首参数</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">undefined</span>) === obj <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">null</span>) === obj <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//非对象作为非首参数传入时,这些参数都会转为对象,如果无法转为对象,就会跳过</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错,除了字符串会以数组的形式拷贝入对象,其他值都不会产生效果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> v1 = <span class="string">'abc'</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> v2 = <span class="literal">true</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> v3 = <span class="number">10</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; "0": "a", "1": "b", "2": "c" &#125;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//Object(true) // &#123;[[PrimitiveValue]]: true&#125;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//Object(10)  //  &#123;[[PrimitiveValue]]: 10&#125;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//Object('abc')//&#123;0:"a",1:"b",2:"c",length:3,[[PrimitiveValue]]:"abc"&#125;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//PrimitiveValue不可以被枚举</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//上面三种类型的值转换为包装对象后,只有字符串有可枚举的实义属性</span></span></code><br></pre></td></tr></table></figure>



<p><strong>注意:</strong></p>
<ul>
<li>浅拷贝: 如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">obj1.a.b = <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line">obj2.a.b <span class="comment">// 2</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>同名属性的替换: 目标对象与一个或多个源对象有同名属性时,后面的属性会覆盖前面的</li>
<li>数组的处理: <code>Object.assign</code>方法会把数组当作对象处理(数组的索引即为对象的属性名)</li>
<li>取值函数的处理:<code>Object.assign</code>方法只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> source = &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">get</span> foo() &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(target, source)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo: 1 &#125;</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li><code>Object.assign</code>方法拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性(<code>enumerable:false</code>)</li>
<li>属性名为 Symbol 值的属性，也会被<code>Object.assign()</code>拷贝</li>
</ul>
<h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><p>1.为对象添加属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<p>2.为对象添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span></code><br><code class="highlight javascript"><span class="line">  someMethod(arg1, arg2) &#123;</span></code><br><code class="highlight javascript"><span class="line">    ···</span></code><br><code class="highlight javascript"><span class="line">  &#125;,</span></code><br><code class="highlight javascript"><span class="line">  anotherMethod() &#123;</span></code><br><code class="highlight javascript"><span class="line">    ···</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于下面的写法</span></span></code><br><code class="highlight javascript"><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  ···</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  ···</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>3.克隆对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<p>4.合并多个对象</p>
<p>将多个对象合并到某个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> merge =</span></code><br><code class="highlight javascript"><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span></code><br></pre></td></tr></table></figure>

<p>5.为属性指定默认值</p>
<p>利用同名属性替换的特点,可以将默认值对象写在前面,后面跟源对象</p>
<h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h2><p>ES5的<code>Object.getOwnPropertyDescriptor()</code>方法会返回某个对象属性的描述对象(descriptor)<br>ES2017引入了<code>Object.getOwnPropertyDescriptors()</code>方法,返回指定对象所有自身属性(非继承属性)的描述对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123;</span></code><br><code class="highlight javascript"><span class="line">  foo: <span class="number">123</span>,</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">get</span> bar() &#123; <span class="keyword">return</span> <span class="string">'abc'</span> &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo:</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//    &#123; value: 123,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      writable: true,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      enumerable: true,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      configurable: true &#125;,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//   bar:</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      set: undefined,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      enumerable: true,</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span></code><br></pre></td></tr></table></figure>

<p><strong>用处一:</strong></p>
<p>该方法的引入目的,主要是为了解决<code>Object.assign()</code>无法正确拷贝get属性和set属性的问题</p>
<p>使用<code>Object.getOwnPropertyDescriptor()</code>方法配合<code>Object.defineProperties()</code>方法,就可以实现正确拷贝:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="highlight plain"><span class="line">const source &#x3D; &#123;</span></code><br><code class="highlight plain"><span class="line">  set foo(value) &#123;</span></code><br><code class="highlight plain"><span class="line">    console.log(value);</span></code><br><code class="highlight plain"><span class="line">  &#125;</span></code><br><code class="highlight plain"><span class="line">&#125;;</span></code><br><code class="highlight plain"><span class="line">const target2 &#x3D; &#123;&#125;;</span></code><br><code class="highlight plain"><span class="line">Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));</span></code><br><code class="highlight plain"><span class="line">Object.getOwnPropertyDescriptor(target2, &#39;foo&#39;)</span></code><br><code class="highlight plain"><span class="line">&#x2F;&#x2F; &#123; get: undefined,</span></code><br><code class="highlight plain"><span class="line">&#x2F;&#x2F;   set: [Function: set foo],</span></code><br><code class="highlight plain"><span class="line">&#x2F;&#x2F;   enumerable: true,</span></code><br><code class="highlight plain"><span class="line">&#x2F;&#x2F;   configurable: true &#125;</span></code><br></pre></td></tr></table></figure>

<p>上面代码中,两个对象合并的逻辑可以写成一个函数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span></code><br><code class="highlight javascript"><span class="line">  target,</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span></code><br><code class="highlight javascript"><span class="line">);</span></code><br></pre></td></tr></table></figure>

<p><strong>用处二:</strong></p>
<p>配合<code>Object.create()</code>方法,将对象属性克隆到一个新对象(这属于浅拷贝).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> clone = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj),</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj));</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 或者</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span></code><br><code class="highlight javascript"><span class="line">);</span></code><br></pre></td></tr></table></figure>

<p><strong>用处三:</strong></p>
<p>实现一个对象继承另一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(</span></code><br><code class="highlight javascript"><span class="line">  prot,</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span></code><br><code class="highlight javascript"><span class="line">    foo: <span class="number">123</span>,</span></code><br><code class="highlight javascript"><span class="line">  &#125;)</span></code><br><code class="highlight javascript"><span class="line">);</span></code><br></pre></td></tr></table></figure>

<p><strong>用处四:</strong></p>
<p><code>Object.getOwnPropertyDescriptors()</code>可以实现<code>Mixin</code>(混入)模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">object</span>) =&gt;</span> (&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">with</span>: <span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span></code><br><code class="highlight javascript"><span class="line">    (c, mixin) =&gt; <span class="built_in">Object</span>.create(</span></code><br><code class="highlight javascript"><span class="line">      c, <span class="built_in">Object</span>.getOwnPropertyDescriptors(mixin)</span></code><br><code class="highlight javascript"><span class="line">    ), object)</span></code><br><code class="highlight javascript"><span class="line">&#125;);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// multiple mixins example</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">'c'</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">d.c <span class="comment">// "c"</span></span></code><br><code class="highlight javascript"><span class="line">d.b <span class="comment">// "b"</span></span></code><br><code class="highlight javascript"><span class="line">d.a <span class="comment">// "a"</span></span></code><br></pre></td></tr></table></figure>

<h2 id="proto-属性-Object-setPrototypeOf-Object-getPrototypeOf"><a href="#proto-属性-Object-setPrototypeOf-Object-getPrototypeOf" class="headerlink" title="_proto_属性,Object.setPrototypeOf(),Object.getPrototypeOf()"></a>_proto_属性,Object.setPrototypeOf(),Object.getPrototypeOf()</h2><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><em>proto</em></h3><p>_proto_属性(前后各两个下划线),用来读取或设置当前对象的prototype对象,所有浏览器都部署了这个属性<br>ES6规定,只有浏览器必须部署这个属性,其他运行环境不一定需要部署,而且新的代码最好认为这个属性是不存在的.   因此最好不要使用这个属性.</p>
<p>用下面的方法代替:</p>
<ul>
<li><code>Object.setPrototypeOf()</code>   (写操作)</li>
<li><code>Object.getPrototypeOf()</code>   (读操作)</li>
<li><code>Object.create()</code>     (生成操作)</li>
</ul>
<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf</code>方法的作用于_proto_相同,用来设置一个对象的prototype对象,返回参数对象本身.   它是ES6正式推荐的设置原型对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 格式</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(object, prototype)</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 用法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//将proto对象设为obj对象的原型</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>如果第一个参数不是对象,会自动转为对象.  但是由于返回的还是第一个参数,所以这个操作不会产生任何效果:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="number">1</span>, &#123;&#125;) === <span class="number">1</span> <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="string">'foo'</span>, &#123;&#125;) === <span class="string">'foo'</span> <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="literal">true</span>, &#123;&#125;) === <span class="literal">true</span> <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>由于undefined和null无法转为对象,所以如果第一个参数是undefined或null,就会报错</li>
</ul>
<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>该方法与<code>Object.setPrototypeOf()</code>方法配套,用于读取一个对象的原型对象</p>
<p>用法: <code>Object.getPrototypeOf(obj)</code></p>
<p><strong>注意:</strong></p>
<ul>
<li>如果参数不是对象,会自动转为对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(Number(1))</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">1</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Number &#123;[[PrimitiveValue]]: 0&#125;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(String('foo'))</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// String &#123;length: 0, [[PrimitiveValue]]: ""&#125;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(Boolean(true))</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="literal">true</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Boolean &#123;[[PrimitiveValue]]: false&#125;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">1</span>) === <span class="built_in">Number</span>.prototype <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>) === <span class="built_in">String</span>.prototype <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="literal">true</span>) === <span class="built_in">Boolean</span>.prototype <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果参数是undefined或null,他们无法转为对象,所以报错.</li>
</ul>
<h2 id="Object-keys-Object-values-Object-entries"><a href="#Object-keys-Object-values-Object-entries" class="headerlink" title="Object.keys() , Object.values() , Object.entries()"></a>Object.keys() , Object.values() , Object.entries()</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>该方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.keys(obj)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ["foo", "baz"]</span></span></code><br></pre></td></tr></table></figure>

<h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>该方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.values(obj)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ["bar", 42]</span></span></code><br></pre></td></tr></table></figure>

<p>返回数组的成员顺序为:</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列。</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li><code>Object.values</code>只返回对象自身的可遍历属性[不是显示声明的属性默认是不可遍历的]</li>
<li><code>Object.values</code>会过滤属性名为Symbol值的属性</li>
<li>如果<code>Object.values</code>方法的参数是一个字符串,会返回各个字符组成的一个数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.values(<span class="string">'foo'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ['f', 'o', 'o']</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果参数不是对象,<code>Object.values</code>会先将其转为对象,由于数值和布尔值的包装对象,都不会为实例添加非继承的属性,所以会返回空数组</li>
</ul>
<h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>该方法返回一个数组,成员是参数对象自身(不含继承的)所有可遍历属性的键值对数组<br>除了返回值不一样,该方法的行为与<code>Object.values</code>基本一致.</p>
<p><strong>用处一:</strong></p>
<p>将对象转为真正的Map结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span></code><br><code class="highlight javascript"><span class="line">map <span class="comment">// Map &#123; foo: "bar", baz: 42 &#125;</span></span></code><br></pre></td></tr></table></figure>

<h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h2><p>该方法是<code>Object.entries()</code>的逆操作.用于将一个键值对数组转为对象.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.fromEntries([</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span></code><br><code class="highlight javascript"><span class="line">])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span></code><br></pre></td></tr></table></figure>

<p>该方法的目的是将键值对的数据结构还原为对象,因此特别适合将Map结构转为对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 例一</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span></code><br><code class="highlight javascript"><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span></code><br><code class="highlight javascript"><span class="line">]);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.fromEntries(entries)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo: "bar", baz: 42 &#125;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 例二</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'foo'</span>, <span class="literal">true</span>).set(<span class="string">'bar'</span>, <span class="literal">false</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.fromEntries(map)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo: true, bar: false &#125;</span></span></code><br></pre></td></tr></table></figure>

<p><strong>用处二:</strong></p>
<p>配合<code>URLSearchParams</code>对象,将查询字符串转为对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.fromEntries(<span class="keyword">new</span> URLSearchParams(<span class="string">'foo=bar&amp;baz=qux'</span>))</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// &#123; foo: "bar", baz: "qux" &#125;</span></span></code><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--函数的扩展</title>
    <url>/2019/10/18/ECMAScript6/6%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许为函数的参数设置默认值,即直接写在参数定义的后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></span></code><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>注意:</p>
<ul>
<li>参数变量是默认声明的,不能用<code>let</code>或<code>const</code>再次声明,否则会报错</li>
<li>使用参数默认值时,函数不能有同名参数</li>
</ul>
<h2 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span></code><br><code class="highlight javascript"><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码只使用了解构赋值默认值,并没有使用函数参数的默认值,所以函数不传参的情况下会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo() <span class="comment">// undefined 5</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>函数的参数默认为一个空对象</p>
</blockquote>
<h2 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h2><p>制定了默认值以后,函数的length属性,将返回没有指定默认值的参数的个数,  即指定了默认值后,length属性将失真</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li><p>rest参数也不会计入length属性<br><code>(function(...args) {}).length // 0</code></p>
</li>
<li><p>如果设置了默认值的参数不是尾参数,那么length属性也不再计入后面的参数了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span></code><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//调用函数f时,默认值指向的是第一个参数x,而不是全局变量x</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//即圆括号内形成一个单独的作用域</span></span></code><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<p>即执行一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwIfMissing</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter'</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">mustBeProvided = throwIfMissing(</span>)) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> mustBeProvided;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo()</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Error: Missing parameter</span></span></code><br></pre></td></tr></table></figure>

<p>另外,可以将参数默认值设为undefined,表明这个参数是可以省略的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">optional = undefined</span>) </span>&#123; ··· &#125;</span></code><br></pre></td></tr></table></figure>

<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>ES6引入rest参数(形式为 …变量名),用来获取函数的多余参数,这样就不需要使用arguments对象了</p>
<p>rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span></code><br><code class="highlight javascript"><span class="line">    sum += val;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> sum;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>rest参数之后不能再有其他参数(即只能是最后一个参数),否则会报错</li>
<li>函数的length属性,不包括rest参数</li>
</ul>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES2016中规定,只要函数参数使用了默认值,解构赋值或者扩展运算符,那么函数内部就不能显示设定为严格模式,否则会报错</p>
<h1 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h1><p>函数的name属性,返回该函数的函数名.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span></code><br><code class="highlight javascript"><span class="line">foo.name <span class="comment">// "foo"</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>如果将一个匿名函数赋值给一个变量,会返回实际的函数名(变量名)</li>
<li>如果将一个具名函数赋值给一个变量,会返回这个具名函数原本的名字</li>
<li>Function构造函数返回的函数实例,name属性的值为anonymous</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>).name <span class="comment">// "anonymous"</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>bind返回的函数,name属性值上会加上bound前缀</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line">foo.bind(&#123;&#125;).name <span class="comment">// "bound foo"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class="comment">// "bound "</span></span></code><br></pre></td></tr></table></figure>

<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许使用”箭头”(<code>=&gt;</code>)自定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> v;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数不需要参数或需要多个参数,就是用一个圆括号代表参数部分</p>
<p>如果箭头函数的代码块部分只有一条语句且有返回值,则可以直接省略大括号,直接写返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> num1 + num2;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数直接返回一个对象,必须在对象外面加上括号,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 不报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;);</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数只有一行语句,且不需要返回值,可以采用下面的写法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span> doesNotReturn();</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数的代码块部分多于一条语句,就要使用大括号括起来,并且使用return语句返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>箭头函数有几个使用注意点:</p>
<ul>
<li>函数体内的this对象,就是定义时所在的对象,而不是使用时所在的对象</li>
<li>不可以当作构造函数</li>
<li>不可以使用arguments对象,该对象在函数体内不存在,  可以使用rest参数代替</li>
<li>不可以使用yield命令,因此箭头函数不能用作Generator</li>
</ul>
<p>因为箭头函数内部没有自己的this,导致内部的this就是外层代码块的this</p>
<p>下面三个变量在箭头函数之中也是不存在的,指向外层函数的对应变量:</p>
<ul>
<li><code>arguments</code></li>
<li><code>super</code></li>
<li><code>new.target</code></li>
</ul>
<h2 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h2><p>一.定义对象的方法,且该方法内部包括this<br>    因为对象不构成单独的作用域,所以对象内部的箭头函数的this会指向全局作用域</p>
<p>二.需要动态this的时候,也不应使用箭头函数</p>
<p>三.如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，    而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h2><p>箭头函数的内部,还可以再使用箭头函数</p>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>尾调用就是值某个函数的最后一步是调用另一个函数</p>
<p>以下三种情况,都不属于尾调用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 情况一</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">let</span> y = g(x);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> y;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 情况二</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 情况三</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  g(x);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//情况三等同于下面的代码:</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  g(x);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>[严格模式下生效]<br>函数调用会在内存形成一个”调用记录”,又称为”调用帧”,保存调用位置和内部变量等信息.</p>
<p>如果在函数A的内部调用函数B,那么在A的调用帧上方,还会形成一个B的调用帧.等到B运行结束,将结果返回到A,B的调用帧才会消失,如果函数B内部还调用函数C,那就还有一个C的调用帧,以此类推.所有的调用帧就形成一个”调用栈”</p>
<p>尾调用由于是函数的最后一步操作,所以不需要保留外层函数的调用帧,因为调用位置,内部变量等信息都不会在用到了,只要直接用内层函数的调用帧,取代外层函数的调用帧就可以了.  </p>
<p>“尾调用优化”,即只保留内层函数的调用帧,如果所有函数都是尾调用,那么完全可以做到每次执行时,调用帧只有一项,这将大大节省内存.</p>
<blockquote>
<p>注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
</blockquote>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>[严格模式下生效]</p>
<p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<p>递归非常消耗内存,因为需要同时保存成千上百个调用帧,很容易发生”栈溢出”错误(stack overflow)</p>
<p>但对于尾递归来说,由于只存在一个调用帧,所以永远不会发生”栈溢出”错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<h2 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h2><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。但是这样做的缺点就是不太直观,第一眼很难看出来</p>
<p><strong>解决方法一:</strong></p>
<p>在尾递归函数之外，再提供一个正常形式的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> tailFactorial(n, <span class="number">1</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<p>函数式编程中 柯里化(currying) 的概念:</p>
<p>意思是将多参数的函数转换成单参数的形式</p>
<p><strong>解决方法二:</strong></p>
<p>采用ES6的函数默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>总结: 递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现</p>
</blockquote>
<h2 id="严格模式-1"><a href="#严格模式-1" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。<br>正常模式下,函数内部有两个变量,可以跟踪函数的调用栈</p>
<ul>
<li><code>func.arguments</code>:返回调用时函数的参数</li>
<li><code>func.caller</code>: 返回调用时当前函数的那个函数</li>
</ul>
<p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restricted</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line"><span class="meta">  'use strict'</span>;</span></code><br><code class="highlight javascript"><span class="line">  restricted.caller;    <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line">  restricted.arguments; <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line">restricted();</span></code><br></pre></td></tr></table></figure>

<h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>在正常模式下实现尾递归优化</p>
<p>原理: 用“循环”换掉“递归”,减少调用栈</p>
<p><strong>方法一:</strong></p>
<p>蹦床函数(将递归执行转为循环执行) </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    f = f();</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> f;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//接受一个函数f作为参数,只要f执行后返回一个函数,就继续执行,否则返回值</span></span></code><br></pre></td></tr></table></figure>

<p><strong>方法二:</strong></p>
<p>方法一的蹦床函数并非真正的尾递归优化</p>
<p>下面的才是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tco</span>(<span class="params">f</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> value;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span>;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> accumulated = [];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">accumulator</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">    accumulated.push(<span class="built_in">arguments</span>);</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">if</span> (!active) &#123;</span></code><br><code class="highlight javascript"><span class="line">      active = <span class="literal">true</span>;</span></code><br><code class="highlight javascript"><span class="line">      <span class="keyword">while</span> (accumulated.length) &#123;</span></code><br><code class="highlight javascript"><span class="line">        value = f.apply(<span class="keyword">this</span>, accumulated.shift());</span></code><br><code class="highlight javascript"><span class="line">      &#125;</span></code><br><code class="highlight javascript"><span class="line">      active = <span class="literal">false</span>;</span></code><br><code class="highlight javascript"><span class="line">      <span class="keyword">return</span> value;</span></code><br><code class="highlight javascript"><span class="line">    &#125;</span></code><br><code class="highlight javascript"><span class="line">  &#125;;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = tco(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>)</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">else</span> &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> x</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">sum(<span class="number">1</span>, <span class="number">100000</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 100001</span></span></code><br></pre></td></tr></table></figure>

<p>上面的代码中,<code>tco</code>函数时尾递归优化的实现,它的奥妙就在于状态变量<code>active</code></p>
<h1 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h1><p>以前不允许最后一个参数后面出现逗号,这样对以后的修改很造成麻烦<br>ES2017 允许函数的最后一个参数有尾逗号</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--数组的扩展</title>
    <url>/2019/10/18/ECMAScript6/7%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>扩展运算符(spread)是三个点( … )<br>用来将一个数组转为用逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 1 2 3</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 1 2 3 4 5</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span></code><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>扩展运算符后面还可以放置表达式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> arr = [</span></code><br><code class="highlight javascript"><span class="line">  ...(x &gt; <span class="number">0</span> ? [<span class="string">'a'</span>] : []),</span></code><br><code class="highlight javascript"><span class="line">  <span class="string">'b'</span>,</span></code><br><code class="highlight javascript"><span class="line">];</span></code><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>只有函数调用时,扩展运算符才可以放在圆括号中,否则会报错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(...[<span class="number">1</span>, <span class="number">2</span>])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log((...[<span class="number">1</span>, <span class="number">2</span>]))</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 1 2</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>如果扩展运算符后面是一个空数组,则不产生任何效果</li>
</ul>
<h2 id="替代函数的apply方法"><a href="#替代函数的apply方法" class="headerlink" title="替代函数的apply方法"></a>替代函数的apply方法</h2><p>apply方法的作用是改变this的指向,然后再调用该函数:</p>
<p>第一个参数是this所要指向的那个对象,</p>
<p>第二个参数是一个数组,该数组的所有成员会依次作为参数,传入原函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// ES5 的写法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// ...</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span></code><br><code class="highlight javascript"><span class="line">f.apply(<span class="literal">null</span>, args);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ES6的写法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// ...</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span></code><br><code class="highlight javascript"><span class="line">f(...args);</span></code><br></pre></td></tr></table></figure>

<h2 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h2><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>数组是复合的数据类型,直接复制的话,只是复制了指向底层数据结构的指针,而不是克隆一个全新的数组</p>
<p>使用扩展运算符赋值数组:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 写法一</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> a2 = [...a1];</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 写法二</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> [...a2] = a1;</span></code><br></pre></td></tr></table></figure>

<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">'c'</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ES5 的合并数组</span></span></code><br><code class="highlight javascript"><span class="line">arr1.concat(arr2, arr3);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ES6 的合并数组</span></span></code><br><code class="highlight javascript"><span class="line">[...arr1, ...arr2, ...arr3]</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span></code><br></pre></td></tr></table></figure>

<p>上面的两种方法都是浅拷贝,如果修改了原数组的成员,会同步反映到新数组.</p>
<p>“浅拷贝”，指的是如果数组成员包括复合类型的值（比如对象），则新数组拷贝的是该值的引用。</p>
<h3 id="与解构赋值结合"><a href="#与解构赋值结合" class="headerlink" title="与解构赋值结合"></a>与解构赋值结合</h3><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span></code><br><code class="highlight javascript"><span class="line">first <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span></code><br><code class="highlight javascript"><span class="line">first <span class="comment">// undefined</span></span></code><br><code class="highlight javascript"><span class="line">rest  <span class="comment">// []</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span></code><br><code class="highlight javascript"><span class="line">first  <span class="comment">// "foo"</span></span></code><br><code class="highlight javascript"><span class="line">rest   <span class="comment">// []</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:如果将扩展运算符用于数组赋值,只能放在参数的最后一位,否则会报错</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>扩展运算符还可以将字符串转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[...<span class="string">'hello'</span>]</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span></code><br></pre></td></tr></table></figure>

<p>使用扩展运算符能够正确识别四个字节的Unicode字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'x\uD83D\uDE80y'</span>.length <span class="comment">// 4</span></span></code><br><code class="highlight javascript"><span class="line">[...<span class="string">'x\uD83D\uDE80y'</span>].length <span class="comment">// 3</span></span></code><br></pre></td></tr></table></figure>

<h3 id="实现了Iterator接口的对象"><a href="#实现了Iterator接口的对象" class="headerlink" title="实现了Iterator接口的对象"></a>实现了Iterator接口的对象</h3><p>任何定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//querySelectorAll方法返回的是一个NodeList对象(类似数组的对象),但是</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//NodeList对象实现了Iterator</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> array = [...nodeList];</span></code><br></pre></td></tr></table></figure>

<h3 id="Map-和-Set-结构-Generator函数"><a href="#Map-和-Set-结构-Generator函数" class="headerlink" title="Map 和 Set 结构,Generator函数"></a>Map 和 Set 结构,Generator函数</h3><p>扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span></code><br><code class="highlight javascript"><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span></code><br><code class="highlight javascript"><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span></code><br><code class="highlight javascript"><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span></code><br><code class="highlight javascript"><span class="line">]);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span></code><br></pre></td></tr></table></figure>

<p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:如果对没有Iterator接口的对象使用扩展运算符,将会报错</p>
</blockquote>
<h1 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h1><p>该方法用于将两类对象转为真正的数组:</p>
<ul>
<li>类似数组的对象（array-like object）</li>
</ul>
<p>所谓类似数组的对象,本质特征只有一点,即必须有length属性</p>
<ul>
<li>可遍历（<code>iterable</code>）的对象（包括 ES6 新增的数据结构 <code>Set</code> 和 <code>Map</code>）</li>
</ul>
<p>实际应用中,常见的类似数组的对象:</p>
<ul>
<li>DOM操作返回的<code>NodeList</code>集合</li>
<li>函数内部arguments对象</li>
</ul>
<p>注意:</p>
<ul>
<li>只要是部署了Iterator接口的数据机构,<code>Array.from</code>都能将其转为数组</li>
<li>如果参数是一个真正的数组,<code>Array.from</code>会返回一个一模一样的新数组</li>
<li>没有部署该方法的浏览器,可以用<code>Array.prototype.slice</code>方法替代</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> toArray = <span class="function">(<span class="params">(</span>) =&gt;</span></span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].slice.call(obj)</span></code><br><code class="highlight javascript"><span class="line">)();</span></code><br></pre></td></tr></table></figure>

<p><code>Array.from</code>还可以接受第二个参数,作用类似于数组的map方法,用来对每个元素进行处理,将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [1, 4, 9]</span></span></code><br></pre></td></tr></table></figure>

<p>如果map函数里面用到了this关键字,还可以传入<code>Array.from</code>的第三个参数,用来绑定this</p>
<p><code>Array.from()</code>可以将各种值转为真正的数组,并且还可以提供map功能.这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, () =&gt; <span class="string">'jack'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// ['jack', 'jack']</span></span></code><br></pre></td></tr></table></figure>

<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/1161aee7a561498dd7738319df182162/0" alt="img">             </p>
<h1 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h1><p>该方法用于将一组值转换为数组<br><code>Array.of()</code>总是返回参数值组成的数组,如果没有参数,就返回一个空数组</p>
<h1 id="数组实例的-copyWithin"><a href="#数组实例的-copyWithin" class="headerlink" title="数组实例的 copyWithin()"></a>数组实例的 copyWithin()</h1><p>该方法在当前数组内部,将指定位置的成员复制到其他位置(会覆盖原有成员),然后返回当前数组(使用这个方法,会修改当前数组)</p>
<p>接受的三个参数:</p>
<ul>
<li>target(必需):从该位置开始替换数据.  如果为负值,表示倒数</li>
<li>start(可选): 从该位置开始读取数据,默认为0.  如果为负值,表示倒数</li>
<li>end(可选):  到该位置前停止读取数据.    默认等于数组长度,  如果为负值,表示倒数</li>
</ul>
<blockquote>
<p>注意: 三个参数都应该是数值, 如果不是,会自动转为数值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</p>
<h1 id="数组实例的find-和-findIndex"><a href="#数组实例的find-和-findIndex" class="headerlink" title="数组实例的find() 和 findIndex()"></a>数组实例的find() 和 findIndex()</h1><p>数组实例的find方法用于找出一个符合条件的数组成员<br>数组实例的<code>findIndex</code>方法与<code>find</code>方法非常类似,返回第一个符合条件的数组成员的位置,如果所有成员都不符合条件,则返回 -1 </p>
<p>参数:  </p>
<ul>
<li>第一个参数:一个回调函数,所有数组成员一次执行该回调函数,直到找出第一个返回值位true的成员,然后返回该成员.  如果没有符合条件的成员,则返回undefined.</li>
</ul>
<p>回调函数可以接受三个参数:</p>
<ul>
<li><p><code>value</code>: 当前的值</p>
</li>
<li><p><code>index</code>: 当前的位置</p>
</li>
<li><p><code>arr</code>: 原数组</p>
</li>
<li><p>第二个参数: 用来绑定回调函数的<code>this</code>对象</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> v &gt; <span class="keyword">this</span>.age;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span></code><br></pre></td></tr></table></figure>

<p>注意: 这两个方法都可以发现<code>NaN</code>,弥补了数组的<code>indexOf</code>方法的不足</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// -1</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 0</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码中,<code>indexOf</code>无法识别数组的<code>NaN</code>成员,但是<code>findIndex</code>方法可以借助<code>O</code>bject.is`方法做到</p>
<h1 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h1><p>fill方法使用给定值,填充一个数组.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [7, 7, 7]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [7, 7, 7]</span></span></code><br></pre></td></tr></table></figure>

<p>参数:</p>
<ul>
<li>第一个参数:  需要填充的值(如果只有改参数,数组中所有的元素都会被该值覆盖)</li>
<li>第二个参数: 填充的起始位置</li>
<li>第三个参数: 填充的结束位置</li>
</ul>
<blockquote>
<p>注意:如果填充的类型为对象,那么被赋值的是同一个内存地址的对象,而不是深拷贝对象</p>
</blockquote>
<h1 id="数组实例的entries-keys-和-values"><a href="#数组实例的entries-keys-和-values" class="headerlink" title="数组实例的entries() , keys() 和 values()"></a>数组实例的entries() , keys() 和 values()</h1><p>这三个方法都是用来遍历数组的:</p>
<ul>
<li>keys(): 是对键名的遍历</li>
<li>values(): 是对键值的遍历</li>
<li>entries() : 是对键值对的遍历</li>
</ul>
<p>它们都返回一个遍历器对象,可以用for…of循环进行遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(index);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(elem);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 'a'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 'b'</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(index, elem);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 0 "a"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 1 "b"</span></span></code><br></pre></td></tr></table></figure>

<p>如果不适用for…of循环,可以手动调用遍历器对象的next方法,进行遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> entries = letter.entries();</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span></code><br></pre></td></tr></table></figure>

<h1 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h1><p>该方法检查某个数组是否包含给定的值,返回一个布尔值</p>
<p>参数:</p>
<ul>
<li>第一个参数: 要搜索的值</li>
<li>第二个参数: 搜索的起始位置X,  默认为0, 如果为负数,则表示从右往左数 |X| 个位置(从零开始),搜索顺序还是从左到右,如果这时它大于数组长度,则会重置为从0开始</li>
</ul>
<p>没有该方法之前,我们通常使用数组的<code>indexOf</code>方法,检查是否包含某个值,但是该方法有两个缺点:</p>
<ul>
<li>不够语义化(返回的是参数值第一个出现位置,还要去比较是否不等于-1)</li>
<li>由于内部使用严格相等运算符进行判断,这会导致对<code>NaN</code>的误判</li>
</ul>
<p>但是<code>includes</code>不会对<code>NaN</code>有误判<br>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">Array</span>.prototype.includes</span></code><br><code class="highlight javascript"><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span></code><br><code class="highlight javascript"><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span></code><br><code class="highlight javascript"><span class="line">)();</span></code><br><code class="highlight javascript"><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span></code><br></pre></td></tr></table></figure>

<h1 id="数组实例的-flat-flatMap"><a href="#数组实例的-flat-flatMap" class="headerlink" title="数组实例的 flat(), flatMap()"></a>数组实例的 flat(), flatMap()</h1><h2 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h2><p>该方法用于将嵌套的数组”拉平”,变成一维数组,返回一个新数组,对原数据没有影响</p>
<p><strong>参数:</strong></p>
<ul>
<li>一个整数:  表示想要拉平的层数(多层的嵌套数组)</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数</li>
<li>如果原数组有空位,flat()方法会跳过空位</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//跳过空位</span></span></code><br><code class="highlight javascript"><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span></code><br></pre></td></tr></table></figure>

<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h2><p>该方法对原数组的每个成员执行一个函数(相当于执行<code>Array.prototype.map()</code>),然后对返回值组成的数组执行<code>flat()</code>方法,返回一个新数组,不改变原数组</p>
<p><strong>该方法的参数:</strong></p>
<ul>
<li>第一个参数: 遍历函数</li>
<li>第二个参数: 用来绑定遍历函数里面的this对象</li>
</ul>
<p><strong>遍历函数可以接受的三个参数:</strong></p>
<ul>
<li>第一个参数: 当前数组成员</li>
<li>第二个参数: 当前数组成员的位置</li>
<li>第三个参数: 原数组</li>
</ul>
<blockquote>
<p>注意:<code>flatMap()</code>只能展开一层数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span></code><br><code class="highlight javascript"><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span></span></code><br><code class="highlight javascript"><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [[x * <span class="number">2</span>]])</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span></code><br></pre></td></tr></table></figure>

<h1 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h1><p>数组的空位指: 数组的某一个位置没有任何值  (比如Array构造函数返回的数组都是空位)</p>
<blockquote>
<p>注意:  空位不是undefined , 一个位置的值等于undefined,依然是有值的 . 空位没有任何值,in运算符可以说明这一点.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">// false</span></span></code><br></pre></td></tr></table></figure>

<p>ES5对空位的处理很不一致,大多数情况下会忽略空位:</p>
<ul>
<li><code>forEach()</code>,<code>filter()</code>, <code>reduce()</code>, <code>every()</code> 和<code>some()</code>都会跳过空位。</li>
<li><code>map()</code>会跳过空位，但会保留这个值</li>
<li><code>join()</code>和<code>toString()</code>会将空位视为<code>undefined</code>，而<code>undefined</code>和<code>null</code>会被处理成空字符串。</li>
</ul>
<p>ES6则是明确规定将空位转为<code>undefined</code></p>
<ul>
<li><code>Array.from</code>方法会将数组的空位转为<code>undefined</code></li>
<li>扩展运算符( … )会将空位转为<code>undefined</code></li>
<li><code>copyWithin()</code>会连空位一起拷贝</li>
<li><code>fill()</code>会将空位视为正常的数组位置</li>
<li><code>for...of</code> 循环也会遍历空位</li>
<li><code>entries()  keys() values()  find()和findIndex会将空位处理成undefined</code></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--函数的扩展</title>
    <url>/2019/10/18/ECMAScript6/8%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许为函数的参数设置默认值,即直接写在参数定义的后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></span></code><br><code class="highlight javascript"><span class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></span></code><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>注意:</p>
<ul>
<li>参数变量是默认声明的,不能用<code>let</code>或<code>const</code>再次声明,否则会报错</li>
<li>使用参数默认值时,函数不能有同名参数</li>
</ul>
<h2 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span></code><br><code class="highlight javascript"><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span></code><br><code class="highlight javascript"><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码只使用了解构赋值默认值,并没有使用函数参数的默认值,所以函数不传参的情况下会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(x, y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo() <span class="comment">// undefined 5</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>函数的参数默认为一个空对象</p>
</blockquote>
<h2 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h2><p>制定了默认值以后,函数的length属性,将返回没有指定默认值的参数的个数,  即指定了默认值后,length属性将失真</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li><p>rest参数也不会计入length属性<br><code>(function(...args) {}).length // 0</code></p>
</li>
<li><p>如果设置了默认值的参数不是尾参数,那么length属性也不再计入后面的参数了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span></code><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(y);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//调用函数f时,默认值指向的是第一个参数x,而不是全局变量x</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//即圆括号内形成一个单独的作用域</span></span></code><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<p>即执行一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwIfMissing</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter'</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">mustBeProvided = throwIfMissing(</span>)) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> mustBeProvided;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">foo()</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Error: Missing parameter</span></span></code><br></pre></td></tr></table></figure>

<p>另外,可以将参数默认值设为undefined,表明这个参数是可以省略的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">optional = undefined</span>) </span>&#123; ··· &#125;</span></code><br></pre></td></tr></table></figure>

<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>ES6引入rest参数(形式为 …变量名),用来获取函数的多余参数,这样就不需要使用arguments对象了</p>
<p>rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span></code><br><code class="highlight javascript"><span class="line">    sum += val;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> sum;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>rest参数之后不能再有其他参数(即只能是最后一个参数),否则会报错</li>
<li>函数的length属性,不包括rest参数</li>
</ul>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES2016中规定,只要函数参数使用了默认值,解构赋值或者扩展运算符,那么函数内部就不能显示设定为严格模式,否则会报错</p>
<h1 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h1><p>函数的name属性,返回该函数的函数名.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span></code><br><code class="highlight javascript"><span class="line">foo.name <span class="comment">// "foo"</span></span></code><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>如果将一个匿名函数赋值给一个变量,会返回实际的函数名(变量名)</li>
<li>如果将一个具名函数赋值给一个变量,会返回这个具名函数原本的名字</li>
<li>Function构造函数返回的函数实例,name属性的值为anonymous</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>).name <span class="comment">// "anonymous"</span></span></code><br></pre></td></tr></table></figure>

<ul>
<li>bind返回的函数,name属性值上会加上bound前缀</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line">foo.bind(&#123;&#125;).name <span class="comment">// "bound foo"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class="comment">// "bound "</span></span></code><br></pre></td></tr></table></figure>

<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许使用”箭头”(<code>=&gt;</code>)自定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> v;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数不需要参数或需要多个参数,就是用一个圆括号代表参数部分</p>
<p>如果箭头函数的代码块部分只有一条语句且有返回值,则可以直接省略大括号,直接写返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> num1 + num2;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数直接返回一个对象,必须在对象外面加上括号,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 不报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;);</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数只有一行语句,且不需要返回值,可以采用下面的写法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span> doesNotReturn();</span></code><br></pre></td></tr></table></figure>

<p>如果箭头函数的代码块部分多于一条语句,就要使用大括号括起来,并且使用return语句返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>箭头函数有几个使用注意点:</p>
<ul>
<li>函数体内的this对象,就是定义时所在的对象,而不是使用时所在的对象</li>
<li>不可以当作构造函数</li>
<li>不可以使用arguments对象,该对象在函数体内不存在,  可以使用rest参数代替</li>
<li>不可以使用yield命令,因此箭头函数不能用作Generator</li>
</ul>
<p>因为箭头函数内部没有自己的this,导致内部的this就是外层代码块的this</p>
<p>下面三个变量在箭头函数之中也是不存在的,指向外层函数的对应变量:</p>
<ul>
<li><code>arguments</code></li>
<li><code>super</code></li>
<li><code>new.target</code></li>
</ul>
<h2 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h2><p>一.定义对象的方法,且该方法内部包括this<br>    因为对象不构成单独的作用域,所以对象内部的箭头函数的this会指向全局作用域</p>
<p>二.需要动态this的时候,也不应使用箭头函数</p>
<p>三.如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，    而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h2><p>箭头函数的内部,还可以再使用箭头函数</p>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>尾调用就是值某个函数的最后一步是调用另一个函数</p>
<p>以下三种情况,都不属于尾调用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 情况一</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">let</span> y = g(x);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> y;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 情况二</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 情况三</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  g(x);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//情况三等同于下面的代码:</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  g(x);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>[严格模式下生效]<br>函数调用会在内存形成一个”调用记录”,又称为”调用帧”,保存调用位置和内部变量等信息.</p>
<p>如果在函数A的内部调用函数B,那么在A的调用帧上方,还会形成一个B的调用帧.等到B运行结束,将结果返回到A,B的调用帧才会消失,如果函数B内部还调用函数C,那就还有一个C的调用帧,以此类推.所有的调用帧就形成一个”调用栈”</p>
<p>尾调用由于是函数的最后一步操作,所以不需要保留外层函数的调用帧,因为调用位置,内部变量等信息都不会在用到了,只要直接用内层函数的调用帧,取代外层函数的调用帧就可以了.  </p>
<p>“尾调用优化”,即只保留内层函数的调用帧,如果所有函数都是尾调用,那么完全可以做到每次执行时,调用帧只有一项,这将大大节省内存.</p>
<blockquote>
<p>注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
</blockquote>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>[严格模式下生效]</p>
<p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<p>递归非常消耗内存,因为需要同时保存成千上百个调用帧,很容易发生”栈溢出”错误(stack overflow)</p>
<p>但对于尾递归来说,由于只存在一个调用帧,所以永远不会发生”栈溢出”错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<h2 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h2><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。但是这样做的缺点就是不太直观,第一眼很难看出来</p>
<p><strong>解决方法一:</strong></p>
<p>在尾递归函数之外，再提供一个正常形式的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> tailFactorial(n, <span class="number">1</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<p>函数式编程中 柯里化(currying) 的概念:</p>
<p>意思是将多参数的函数转换成单参数的形式</p>
<p><strong>解决方法二:</strong></p>
<p>采用ES6的函数默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>总结: 递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现</p>
</blockquote>
<h2 id="严格模式-1"><a href="#严格模式-1" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。<br>正常模式下,函数内部有两个变量,可以跟踪函数的调用栈</p>
<ul>
<li><code>func.arguments</code>:返回调用时函数的参数</li>
<li><code>func.caller</code>: 返回调用时当前函数的那个函数</li>
</ul>
<p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restricted</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line"><span class="meta">  'use strict'</span>;</span></code><br><code class="highlight javascript"><span class="line">  restricted.caller;    <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line">  restricted.arguments; <span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line">restricted();</span></code><br></pre></td></tr></table></figure>

<h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>在正常模式下实现尾递归优化</p>
<p>原理: 用“循环”换掉“递归”,减少调用栈</p>
<p><strong>方法一:</strong></p>
<p>蹦床函数(将递归执行转为循环执行) </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    f = f();</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> f;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//接受一个函数f作为参数,只要f执行后返回一个函数,就继续执行,否则返回值</span></span></code><br></pre></td></tr></table></figure>

<p><strong>方法二:</strong></p>
<p>方法一的蹦床函数并非真正的尾递归优化</p>
<p>下面的才是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tco</span>(<span class="params">f</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> value;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span>;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> accumulated = [];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">accumulator</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">    accumulated.push(<span class="built_in">arguments</span>);</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">if</span> (!active) &#123;</span></code><br><code class="highlight javascript"><span class="line">      active = <span class="literal">true</span>;</span></code><br><code class="highlight javascript"><span class="line">      <span class="keyword">while</span> (accumulated.length) &#123;</span></code><br><code class="highlight javascript"><span class="line">        value = f.apply(<span class="keyword">this</span>, accumulated.shift());</span></code><br><code class="highlight javascript"><span class="line">      &#125;</span></code><br><code class="highlight javascript"><span class="line">      active = <span class="literal">false</span>;</span></code><br><code class="highlight javascript"><span class="line">      <span class="keyword">return</span> value;</span></code><br><code class="highlight javascript"><span class="line">    &#125;</span></code><br><code class="highlight javascript"><span class="line">  &#125;;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> sum = tco(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>)</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">else</span> &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> x</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">sum(<span class="number">1</span>, <span class="number">100000</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 100001</span></span></code><br></pre></td></tr></table></figure>

<p>上面的代码中,<code>tco</code>函数时尾递归优化的实现,它的奥妙就在于状态变量<code>active</code></p>
<h1 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h1><p>以前不允许最后一个参数后面出现逗号,这样对以后的修改很造成麻烦<br>ES2017 允许函数的最后一个参数有尾逗号</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--数值的扩展</title>
    <url>/2019/10/17/ECMAScript6/5%E3%80%81%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h1><p>ES6提供了新的写法<br>二进制:  前缀使用0b(或0B)表示<br>八进制: 前缀使用0o(或0O)表示</p>
<a id="more"></a>

<h1 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite() , Number.isNaN()"></a>Number.isFinite() , Number.isNaN()</h1><h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h2><p>检查一个数值是否有限的(即不是Infinity),如果参数类型不是数值,返回false</p>
<h2 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h2><p>检查一个值是否为<code>NaN</code>,如果参数类型不是<code>NaN</code>,<code>Number.isNaN</code>返回<code>false</code><br>与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别:<br>传统方法先调用Number()将非数值的值转为数值,再进行判断<br><em>而这两个新方法只对数值有效</em></p>
<h1 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt() , Number.parseFloat()"></a>Number.parseInt() , Number.parseFloat()</h1><p>ES6将全局方法<code>parseInt()</code>和<code>parseFloat()</code>,移植到Number对象上,行为完全保持不变</p>
<h1 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h1><p>判断一个数值是否为整数,如果参数不是数值,该方法返回false</p>
<p>注意:<br>由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃,这种情况下,<code>Number.isInteger</code>可能会误判</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">3.0000000000000002</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//导致最后的那个2被丢弃了。所以误判为整数</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>如果对数据精度的要求比较高,不建议使用该方法判断一个数值是否为整数</p>
</blockquote>
<h1 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h1><p>ES6新增的一个极小的常量,实际上是JavaScript能够表示的最小精度<br>根据规格,它表示1 与大于 1 的最小浮点数之间的差。<br>对于64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001,小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Number</span>.EPSILON === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Number</span>.EPSILON</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 2.220446049250313e-16</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "0.00000000000000022204"</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p> 能够用来设置”能够接受的误差范围”(暂时还没有搞懂)</p>
</blockquote>
<h1 id="安全整数和Number-isSafeInteger"><a href="#安全整数和Number-isSafeInteger" class="headerlink" title="安全整数和Number.isSafeInteger()"></a>安全整数和Number.isSafeInteger()</h1><p>JavaScript能够准确表示的整数范围在-2^53到2^53之间(不含两个端点),超过这个范围,无法精确表示这个值<br>ES6引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量,用来表示这个范围的上下限.<br><code>Number.isSafeInteger()</code>用来判断一个整数是否在这个范围内</p>
<h1 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h1><p>ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。</p>
<h2 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h2><p>该方法用于去除一个数的小数部分,返回整数部分.<br>规则:<br>对于非数值,<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值<br>对于空值和无法截取整数的值,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-4.1</span>) <span class="comment">// -4</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-0.1234</span>) <span class="comment">// -0</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'123.456'</span>) <span class="comment">// 123</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">true</span>) <span class="comment">//1</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">false</span>) <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">null</span>) <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">NaN</span>);      <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'foo'</span>);    <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc();         <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span></code><br></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.trunc = <span class="built_in">Math</span>.trunc  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(x) : <span class="built_in">Math</span>.floor(x);</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h2 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h2><p>该方法用来判断一个数到底是正数,负数,还是零.  对于非数值,会先将其转换为数值<br>返回值:</p>
<ul>
<li>参数为正数,返回+1</li>
<li>参数为负数,返回-1</li>
<li>参数为0,返回0</li>
<li>参数为-0,返回-0</li>
<li>其他值,返回<code>NaN</code></li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.sign = <span class="built_in">Math</span>.sign  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  x = +x; <span class="comment">// convert to a number</span></span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (x === <span class="number">0</span>  <span class="built_in">isNaN</span>(x)) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">return</span> x;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h2 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h2><p>该方法用于计算一个数的立方根,  对于非数值,会先使用Number方法将其转换为数值<br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.cbrt = <span class="built_in">Math</span>.cbrt  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> y = <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.abs(x), <span class="number">1</span>/<span class="number">3</span>);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -y : y;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h2 id="Math-clz32"><a href="#Math-clz32" class="headerlink" title="Math.clz32()"></a>Math.clz32()</h2><p>该方法将参数转为32位无符号整数的形式,然后返回这个32位值里面有多少个前导0</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0</span>) <span class="comment">// 32</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1</span>) <span class="comment">// 31</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1000</span>) <span class="comment">// 22</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b01000000000000000000000000000000</span>) <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b00100000000000000000000000000000</span>) <span class="comment">// 2</span></span></code><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>对于小数,Math.clz32方法只考虑整数部分</li>
<li>对于空值或其他类型的值,<code>Math.clz32</code>方法会将它们先转为数值,然后再计算</li>
</ul>
<h2 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a>Math.imul()</h2><p>该方法返回两个数以32位带符号整数形式相乘的结果,返回的也是一个32位的带符号整数</p>
<h2 id="Math-fround"><a href="#Math-fround" class="headerlink" title="Math.fround()"></a>Math.fround()</h2><p>该方法返回一个数的32位单精度浮点数形式<br>对于32位单精度格式来说,数值精度是24个二进制位(1 位隐藏位与 23 位有效位),所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。超出这个范围的结果便开始丢失精度</p>
<p>注意:</p>
<ul>
<li>对于<code>NaN</code>和<code>Infinity</code>,该方法返回原值</li>
<li>对于其它类型的非数值,该方法会先将其转为数值,再返回单精度浮点数</li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.fround = <span class="built_in">Math</span>.fround  <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([x])[<span class="number">0</span>];</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h2 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a>Math.hypot()</h2><p>该方法返回所有参数的平方和的平方根</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>);        <span class="comment">// 5</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);     <span class="comment">// 7.0710678118654755</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot();            <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="literal">NaN</span>);         <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">'foo'</span>); <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">'5'</span>);   <span class="comment">// 7.0710678118654755</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">-3</span>);          <span class="comment">// 3</span></span></code><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>如果参数不是数值,<code>Math.hypot</code>方法会将其转为数值</li>
<li>只要有一个参数无法转为数值,就会返回<code>NaN</code></li>
</ul>
<h2 id="对数的方法"><a href="#对数的方法" class="headerlink" title="对数的方法"></a><strong>对数的方法</strong></h2><h3 id="Math-expm1"><a href="#Math-expm1" class="headerlink" title="Math.expm1()"></a>Math.expm1()</h3><p>该方法返回 ex - 1,即<code>Math.exp(x) - 1</code><br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.expm1 = <span class="built_in">Math</span>.expm1  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x) - <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h3 id="Math-log1p"><a href="#Math-log1p" class="headerlink" title="Math.log1p()"></a>Math.log1p()</h3><p>该方法返回 1 + x 的自然对数,即Math.log(1+x).  如果x小于 -1 ,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">1</span>)  <span class="comment">// 0.6931471805599453</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">0</span>)  <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">-1</span>) <span class="comment">// -Infinity</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">-2</span>) <span class="comment">// NaN</span></span></code><br></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log1p = <span class="built_in">Math</span>.log1p  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(<span class="number">1</span> + x);</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h3 id="Math-log10"><a href="#Math-log10" class="headerlink" title="Math.log10()"></a>Math.log10()</h3><p>该方法返回10为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10(<span class="number">2</span>)      <span class="comment">// 0.3010299956639812</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10(<span class="number">1</span>)      <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10(<span class="number">0</span>)      <span class="comment">// -Infinity</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10(<span class="number">-2</span>)     <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10(<span class="number">100000</span>) <span class="comment">// 5</span></span></code><br></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log10 = <span class="built_in">Math</span>.log10  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN10;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h3 id="Math-log2"><a href="#Math-log2" class="headerlink" title="Math.log2()"></a>Math.log2()</h3><p>该方法返回以2为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">3</span>)       <span class="comment">// 1.584962500721156</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">2</span>)       <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span>)       <span class="comment">// 0</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">0</span>)       <span class="comment">// -Infinity</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">-2</span>)      <span class="comment">// NaN</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1024</span>)    <span class="comment">// 10</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span> &lt;&lt; <span class="number">29</span>) <span class="comment">// 29</span></span></code><br></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.log2 = <span class="built_in">Math</span>.log2  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN2;</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br></pre></td></tr></table></figure>

<h2 id="双曲函数方法"><a href="#双曲函数方法" class="headerlink" title="双曲函数方法"></a>双曲函数方法</h2><ul>
<li><code>Math.sinh(x)</code> 返回x的双曲正弦（hyperbolic sine）</li>
<li><code>Math.cosh(x)</code> 返回x的双曲余弦（hyperbolic cosine）</li>
<li><code>Math.tanh(x)</code> 返回x的双曲正切（hyperbolic tangent）</li>
<li><code>Math.asinh(x)</code> 返回x的反双曲正弦（inverse hyperbolic sine）</li>
<li><code>Math.acosh(x)</code> 返回x的反双曲余弦（inverse hyperbolic cosine）</li>
<li><code>Math.atanh(x)</code> 返回x的反双曲正切（inverse hyperbolic tangent）</li>
</ul>
<h1 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h1><p>指数运算符( ** )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span></code><br><code class="highlight javascript"><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span></code><br></pre></td></tr></table></figure>

<p>该运算符的特点是左结合,即多个指数运算符连用是,是从最左边开始计算的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 相当于 2 ** (3 ** 2)</span></span></code><br><code class="highlight javascript"><span class="line"><span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 512</span></span></code><br></pre></td></tr></table></figure>

<p>与等号连用( **= )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> a = <span class="number">1.5</span>;</span></code><br><code class="highlight javascript"><span class="line">a **= <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 a = a * a;</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> b = <span class="number">4</span>;</span></code><br><code class="highlight javascript"><span class="line">b **= <span class="number">3</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于 b = b * b * b;</span></span></code><br></pre></td></tr></table></figure>

<p>注意:</p>
<p>V8 引擎的指数运算符与<code>Math.pow</code>的实现不相同,对于特别大的运算结果,两者会有细微的差异</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">Math</span>.pow(<span class="number">99</span>, <span class="number">99</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 3.697296376497263e+197</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="number">99</span> ** <span class="number">99</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 3.697296376497268e+197</span></span></code><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--正则的扩展</title>
    <url>/2019/10/16/ECMAScript6/4%E3%80%81%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="RegExp构造函数"><a href="#RegExp构造函数" class="headerlink" title="RegExp构造函数"></a>RegExp构造函数</h1><p>在ES5中,RegExp构造函数的参数有两种情况</p>
<p>第一种: 参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等价于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span></code><br></pre></td></tr></table></figure>

<p>第二种: 参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>
<a id="more"></a>

<p>但是不允许使用第二个参数添加修饰符,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等价于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span></code><br></pre></td></tr></table></figure>

<p>ES6中改变了这种行为,如果RegExp构造函数第一个参数是一个正则对象,那么可以使用第二个参数指定修饰符,而且返回的正则表达式会忽略原有的正则表达式的修饰符,只使用新指定的修饰符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "i"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//String.prototype.match 调用 RegExp.prototype[Symbol.match]</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">///String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//String.prototype.search 调用 RegExp.prototype[Symbol.search]</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//String.prototype.split 调用 RegExp.prototype[Symbol.split]</span></span></code><br></pre></td></tr></table></figure>

<h1 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h1><p>字符串对象共有4个方法,可以使用正则表达式:</p>
<ul>
<li>match()</li>
<li>replace()</li>
<li>search()</li>
<li>split()</li>
</ul>
<p>ES6将这4个方法,在语言内部全部调用RegExp的实例方法,从而做到所有与正则相关的方法,全都定义在RegExp对象上.</p>
<ul>
<li>String.prototype.match 调用 RegExp.prototype[Symbol.match]</li>
<li>String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</li>
<li>String.prototype.search 调用 RegExp.prototype[Symbol.search]</li>
<li>String.prototype.split 调用 RegExp.prototype[Symbol.split]</li>
</ul>
<h1 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h1><p>ES6对正则表达式添加了u修饰符,含义为”Unicode 模式”,用来正确处理大于\uFFFF的Unicode 字符(即会正确处理四个字节的 UTF-16 编码)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line">/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>加了u修饰符后,ES6会将 \uD83D\uDC2A 识别为一个字符,所以第一行代码为false</p>
<blockquote>
<p>总结:要想识别码点大于oxFFFF的Unicode字符,就需要加上u修饰符</p>
</blockquote>
<p><strong>一旦加上u修饰符号,就会修改下面这些正则表达式的行为:</strong></p>
<ol>
<li>点字符</li>
</ol>
<p>点( . )字符在正则表达式中,含义是除了换行符以外的任意单个字符,对于码点大于oxFFFF的Unicode字符,点字符不能识别,必须加上u修饰符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> s = <span class="string">'𠮷'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">/^.$/.test(s) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line">/^.$/u.test(s) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>



<p>2.Unicode字符表示法</p>
<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 u 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//不加u修饰符,正则表达式会认为匹配61个连续的u</span></span></code><br><code class="highlight javascript"><span class="line">/\u&#123;<span class="number">61</span>&#125;/.test(<span class="string">'a'</span>) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">/\u&#123;<span class="number">61</span>&#125;/u.test(<span class="string">'a'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">/\u&#123;<span class="number">20</span>BB7&#125;/u.test(<span class="string">'𠮷'</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>3.量词</p>
<p>使用u修饰符后,所有量词都会正确识别码点大于0xFFFF的Unicode字符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">/a&#123;<span class="number">2</span>&#125;/.test(<span class="string">'aa'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">/a&#123;<span class="number">2</span>&#125;/u.test(<span class="string">'aa'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/.test(<span class="string">'𠮷𠮷'</span>) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/u.test(<span class="string">'𠮷𠮷'</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>4.预定义模式</p>
<p>u修饰符也影响到预定义模式(空白字符类), 加了u修饰符,才能正确识别码点大于oxFFFF的Unicode字符</p>
<p>5.i修饰符</p>
<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/704242ba738622b265a23b39a6724a07/0" alt="img">             </p>
<h1 id="RegExp-prototype-unicode-属性"><a href="#RegExp-prototype-unicode-属性" class="headerlink" title="RegExp.prototype.unicode 属性"></a>RegExp.prototype.unicode 属性</h1><p>检查一个正则表达式是否设置了u修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h1><p>ES6添加了y修饰符,叫做”粘连(sticky)”修饰符</p>
<p>y修饰符的作用与g修饰符类似,也是全局匹配,后一次匹配都从上一次匹配成功的下一个位置开始。但是y修饰符确保匹配必须从剩余的第一个位置开始(这也就是”粘连”的涵义)</p>
<h1 id="RegExp-prototype-sticky属性"><a href="#RegExp-prototype-sticky属性" class="headerlink" title="RegExp.prototype.sticky属性"></a>RegExp.prototype.sticky属性</h1><p>检测正则表达式是否设置了y修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="RegExp-prototype-flags属性"><a href="#RegExp-prototype-flags属性" class="headerlink" title="RegExp.prototype.flags属性"></a>RegExp.prototype.flags属性</h1><p>返回正则表达式的修饰符</p>
<h1 id="s修饰符-dotAll模式"><a href="#s修饰符-dotAll模式" class="headerlink" title="s修饰符:dotAll模式"></a>s修饰符:dotAll模式</h1><p>点<code>( . )</code>字符不能匹配的两种情况:</p>
<ol>
<li>四个字节的UTF-16字符</li>
<li>行终止符(表示一行的终结)</li>
</ol>
<ul>
<li><p>U+000A 换行符(\n)</p>
</li>
<li><p>U+000D 回车符(\r)</p>
</li>
<li><p>U+2028 行分隔符（line separator）</p>
</li>
<li><p>U+2029 段分隔符（paragraph separator）</p>
</li>
</ul>
<p>加了s修饰符后,点( . )可以代表任意单个字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">/foo.bar/s.test(<span class="string">'foo\nbar'</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>使用<code>dotAll</code>属性检查一个正则表达式是否设置了s修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="Unicode属性类"><a href="#Unicode属性类" class="headerlink" title="Unicode属性类"></a>Unicode属性类</h1><p>新的类的写法:</p>
<ul>
<li>大写的P : <code>\P{...}</code></li>
<li>小写的p : <code>\p{...}</code></li>
</ul>
<p>以上两种写法允许正则表达式匹配符合<code>Unicode</code>某种属性的所有字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//Unicode 属性类要指定属性名和属性值。</span></span></code><br><code class="highlight javascript"><span class="line">\p&#123;UnicodePropertyName=UnicodePropertyValue&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//对于某些属性，可以只写属性名，或者只写属性值。</span></span></code><br><code class="highlight javascript"><span class="line">\p&#123;UnicodePropertyName&#125;</span></code><br><code class="highlight javascript"><span class="line">\p&#123;UnicodePropertyValue&#125;</span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>大写P的写法是小写p的反向匹配,即匹配不满足条件的字符</li>
<li>这两种类(写法)只对Unicode有效,所以使用的时候一定要加上u修饰符,不然会报错</li>
</ul>
</blockquote>
<h1 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h1><p>原先获取分组内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">'1999-12-31'</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> year = matchObj[<span class="number">1</span>]; <span class="comment">// 1999</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> month = matchObj[<span class="number">2</span>]; <span class="comment">// 12</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> day = matchObj[<span class="number">3</span>]; <span class="comment">// 31</span></span></code><br></pre></td></tr></table></figure>

<p>分组只能通过数字序号引用来获取,一旦组的顺序变了,引用的时候就必须修改序号<br>具名组匹配: 为每个分组指定一个名字<br>用法: 模式的头部添加<code>“问号 + 尖括号 + 组名” (?&lt;year&gt;)</code>;<br>获取: 匹配结果的groups属性上引用组名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">'1999-12-31'</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> year = matchObj.groups.year; <span class="comment">// 1999</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> month = matchObj.groups.month; <span class="comment">// 12</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> day = matchObj.groups.day; <span class="comment">// 31</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//以前的写法在这里也依然有效</span></span></code><br></pre></td></tr></table></figure>

<p>如果具名组没有匹配,那么对应的groups对象的属性会是<code>undefined</code></p>
<h2 id="使用解构赋值和替换"><a href="#使用解构赋值和替换" class="headerlink" title="使用解构赋值和替换"></a>使用解构赋值和替换</h2><p>使用解构赋值直接从匹配结果上为变量赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;<span class="attr">groups</span>: &#123;one, two&#125;&#125; = <span class="regexp">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class="string">'foo:bar'</span>);</span></code><br><code class="highlight javascript"><span class="line">one  <span class="comment">// foo</span></span></code><br><code class="highlight javascript"><span class="line">two  <span class="comment">// bar</span></span></code><br></pre></td></tr></table></figure>

<p>字符串替换时，使用%&lt;组名&gt;引用具名组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'2015-01-02'</span>.replace(re, <span class="string">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// '02/01/2015'</span></span></code><br></pre></td></tr></table></figure>

<p>replace的第二个参数也可以是个函数,该函数的参数序列如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'2015-01-02'</span>.replace(re, (</span></code><br><code class="highlight javascript"><span class="line">   matched, <span class="comment">// 整个匹配结果 2015-01-02</span></span></code><br><code class="highlight javascript"><span class="line">   capture1, <span class="comment">// 第一个组匹配 2015</span></span></code><br><code class="highlight javascript"><span class="line">   capture2, <span class="comment">// 第二个组匹配 01</span></span></code><br><code class="highlight javascript"><span class="line">   capture3, <span class="comment">// 第三个组匹配 02</span></span></code><br><code class="highlight javascript"><span class="line">   position, <span class="comment">// 匹配开始的位置 0</span></span></code><br><code class="highlight javascript"><span class="line">   S, <span class="comment">// 原字符串 2015-01-02</span></span></code><br><code class="highlight javascript"><span class="line">   groups <span class="comment">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span></code><br><code class="highlight javascript"><span class="line"> ) =&gt; &#123;</span></code><br><code class="highlight javascript"><span class="line"> <span class="keyword">let</span> &#123;day, month, year&#125; = groups;</span></code><br><code class="highlight javascript"><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;year&#125;</span>`</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;);</span></code><br></pre></td></tr></table></figure>

<p>具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\k&lt;组名&gt;的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span>;</span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span></code><br></pre></td></tr></table></figure>

<p>数字引用依然有效(可以同时使用)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//数字引用</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span>;</span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//混合使用</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$/</span>;</span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!abc!abc'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">RE_TWICE.test(<span class="string">'abc!abc!ab'</span>) <span class="comment">// false</span></span></code><br></pre></td></tr></table></figure>

<h1 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h1><p>用法: 字符串.matchAll(正则表达式)<br>用于一次性取出所有匹配,返回一个遍历器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> string = <span class="string">'test1test2test3'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// g 修饰符加不加都可以</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/t(e)(st(\d?))/g</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> string.matchAll(regex)) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(match);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]</span></span></code><br></pre></td></tr></table></figure>

<p>遍历器转换为数组:<br>使用…运算符和Array.from()</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--字符串的扩展</title>
    <url>/2019/10/15/ECMAScript6/3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="字符的Unicode表示法"><a href="#字符的Unicode表示法" class="headerlink" title="字符的Unicode表示法"></a>字符的Unicode表示法</h1><p>ES6 加强了对 Unicode 的支持，允许采用\uxxxx形式表示一个字符,其中xxxx表示字符的Unicode码点<br>表示范围:   \u0000 ~ \uFFFF<br>超出范围的字符,必须用两个双字节的形式表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">"\uD842\uDFB7"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "𠮷"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">"\u20BB7"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// " 7"</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码中,如果直接在\u后面跟上超过0xFFFF的数值,JavaScript会理解成 \u20BB+7. 由于\u20BB是一个不可打印字符,所以只会显示一个空格,后面跟着一个7</p>
<a id="more"></a>

<p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">"\u&#123;20BB7&#125;"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "𠮷"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">"\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "ABC"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> hello = <span class="number">123</span>;</span></code><br><code class="highlight javascript"><span class="line">hell\u&#123;<span class="number">6</span>F&#125; <span class="comment">// 123</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\u&#123;1F680&#125;'</span> === <span class="string">'\uD83D\uDE80'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p>
<p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'\z'</span> === <span class="string">'z'</span>  <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\172'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\x7A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\u007A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\u&#123;7A&#125;'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<h1 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h1><p>ES6位字符串添加了遍历器接口,使得字符串可以被for…of循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(codePoint)</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "f"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "o"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "o"</span></span></code><br></pre></td></tr></table></figure>

<p>除了遍历字符串,这个遍历器最大的有点是可以识别大于0xFFFF的码点.传统的for循环无法识别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> text = <span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(text[i]);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// " "</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// " "</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> text) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(i);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "𠮷"</span></span></code><br></pre></td></tr></table></figure>

<h1 id="直接输入U-2028-和-U-2029"><a href="#直接输入U-2028-和-U-2029" class="headerlink" title="直接输入U+2028 和 U+2029"></a>直接输入U+2028 和 U+2029</h1><p>JavaScript字符串允许直接输入字符,以及输入字符的转义形式<br>例如: <code>&#39;中&#39; === &#39;\u4e2d&#39;         //true</code><br>但是,JavaScript规定有五个字符,不能直接在字符串里面直接使用,只能使用转义形式.</p>
<ul>
<li>U+005C：反斜杠（reverse solidus)</li>
<li>U+000D：回车（carriage return）</li>
<li>U+2028：行分隔符（line separator）</li>
<li>U+2029：段分隔符（paragraph separator）</li>
<li>U+000A：换行符（line feed）</li>
</ul>
<p>对于json格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）</p>
<h1 id="JSON-stringify-的改造"><a href="#JSON-stringify-的改造" class="headerlink" title="JSON.stringify()的改造"></a>JSON.stringify()的改造</h1><p>UTF-8标准规定,0xD800到0xDFFF之间的码点,不能单独使用,必须配对使用<br>现在JSON.stringify方法可能返回不符合UTF-8标准的字符串(可能返回0xD800到0xDFFF之间的单个码点)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\u&#123;D834&#125;'</span>) <span class="comment">// ""\\uD834""</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uDF06\uD834'</span>) <span class="comment">// ""\\udf06\\ud834""</span></span></code><br></pre></td></tr></table></figure>

<p>如果遇到0xD800到0xDFFF之间的单个码点,或者不存在的匹配形式,它会返回转义字符串,留给应用自己决定下一步的处</p>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>ES6中使用反引号(`)标识模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 普通字符串</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 多行字符串(所有的空格和缩进都会被保留在输出之中)</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//可以使用trim方法消除行首行尾的缩进....</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">`In JavaScript this is</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">     not legal.`</span></span></code><br></pre></td></tr></table></figure>

<p>如果在模板中需要使用反引号表示,则需要使用反斜杠进行转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> greeting = <span class="string">`\`Yo\` World!`</span>;</span></code><br></pre></td></tr></table></figure>

<p>模板字符串中嵌入<code>变量(js表达式)</code>,需要将<code>变量名(js表达式)</code>写在<code>${}</code>之中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//嵌入变量</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">	<span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;name&#125;</span>,年龄:<span class="subst">$&#123;age&#125;</span>`</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//js表达式</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "1 + 4 = 5"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "3"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//调用函数</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span>    <span class="comment">// foo Hello World bar</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:<br>如果大括号中的值不是字符串,将按照一般的规则转为字符串<br>如果字符串中的变量没有声明,将报错<br>大括号内部是一个字符串,将会原样输出</p>
</blockquote>
<p>模板字符串可以嵌套:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">  &lt;table&gt;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span></code><br><code class="highlight javascript"><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span></code><br><code class="highlight javascript"><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span></code><br><code class="highlight javascript"><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">''</span>)&#125;</span></span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">  &lt;/table&gt;</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">`</span>;</span></code><br></pre></td></tr></table></figure>

<h1 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h1><p>模板字符串跟在一个函数名后面,该函数将被调用来处理这个模板字符串,这些被称为”标签模板”功能<br>标签: 指的就是函数<br>模板字符串:函数的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">alert<span class="string">`123`</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//等同于</span></span></code><br><code class="highlight javascript"><span class="line">alert(<span class="number">123</span>);</span></code><br></pre></td></tr></table></figure>

<p> 如果标签模板里面有变量,就不是简单的调用了,而是将模板字符串先处理成多个参数,再调用函数,</p>
<p> 函数会接受一个数组和模板里面的变量值 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b &#125;</span>`</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line">tag([<span class="string">'Hello '</span>, <span class="string">' world '</span>, <span class="string">''</span>], <span class="number">15</span>, <span class="number">50</span>);</span></code><br></pre></td></tr></table></figure>

<p>第一个参数为数组(该数组有一个raw属性,保存的是转义后的原字符串),该数组的成员是模板字符串中那些没有变量替换的部分, 也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推.</p>
<p>其他参数为模板字符串中各个变量被替换后的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//使用函数的rest参数(形式为...变量名)</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">strArray,...values</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">	......</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<h2 id="模板字符串的限制"><a href="#模板字符串的限制" class="headerlink" title="模板字符串的限制"></a>模板字符串的限制</h2><p>模板字符串默认会将字符串转义,导致无法嵌入其他语言</p>
<h1 id="字符串新增的方法"><a href="#字符串新增的方法" class="headerlink" title="字符串新增的方法"></a>字符串新增的方法</h1><h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String,fromCodePoint()"></a>String,fromCodePoint()</h2><p>用于从Unicode码点返回对应字符,可以识别码点大于0xFFFF的字符(弥补了ES5中该方法的不足)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">0x20BB7</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// "𠮷"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">'x\uD83D\uDE80y'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>如果String.fromCodePoint方法有多个参数,则他们会被合并成一个字符串返回</p>
<h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h2><p>该方法返回一个斜杠都被转义(即斜杠前面再加一个斜杠)的字符串,往往用于模板字符串的处理方法<br>如果原字符串的斜杠已经被转义,那么该方法会进行再次转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 返回 "Hi\\\\n"</span></span></code><br></pre></td></tr></table></figure>

<p>该方法也可以作为正常的函数使用,这时,他的第一个参数应该是一个具有raw属性的对象,且raw属性的值应该是一个数组.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: <span class="string">'test'</span> &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 't0e1s2t'</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: [<span class="string">'t'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>] &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span></code><br></pre></td></tr></table></figure>

<h2 id="实例方法-codePointAt"><a href="#实例方法-codePointAt" class="headerlink" title="实例方法: codePointAt()"></a>实例方法: codePointAt()</h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节.对于那些需要4个字节储存的字符(Unicode码点大于0xFFFF的字符),JavaScript 会认为它们是两个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> s = <span class="string">"𠮷"</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">s.length <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line">s.charAt(<span class="number">0</span>) <span class="comment">// ''</span></span></code><br><code class="highlight javascript"><span class="line">s.charAt(<span class="number">1</span>) <span class="comment">// ''</span></span></code><br><code class="highlight javascript"><span class="line">s.charCodeAt(<span class="number">0</span>) <span class="comment">// 55362</span></span></code><br><code class="highlight javascript"><span class="line">s.charCodeAt(<span class="number">1</span>) <span class="comment">// 57271</span></span></code><br></pre></td></tr></table></figure>

<p>对于这种4个字节的字符,JavaScript不能正确处理,字符串长度会误判为2,而且charAt()方法无法读取整个字符,charCodeAt()方法只能分别返回前两个字节和后两个字节的值.<br>ES6提供的codePointAt()方法,能够正确的处理4个字节储存的字符,返回个一个字符的码点.</p>
<p>参数:字符在字符串中的位置(从0开始,整个字符码点的位置)</p>
<p>返回值: 码点的十进制值(可以通过toString方法进行进制的转换)</p>
<p>codePointAt()方法的参数,仍然是不正确的,比如，上面代码中，字符a在字符串的正确位置序号应该是 1，但是必须向codePointAt()方法传入 2.</p>
<p>解决办法:</p>
<p>1).使用for…of循环(它会正确识别 32 位的 UTF-16 字符。)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 20bb7</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 61</span></span></code><br></pre></td></tr></table></figure>

<p>2).使用扩展运算符(…)进行展开运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> arr = [...<span class="string">'𠮷a'</span>]; <span class="comment">// arr.length === 2</span></span></code><br><code class="highlight javascript"><span class="line">arr.forEach(</span></code><br><code class="highlight javascript"><span class="line">  ch =&gt; <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>))</span></code><br><code class="highlight javascript"><span class="line">);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 20bb7</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 61</span></span></code><br></pre></td></tr></table></figure>

<h2 id="实例方法-normalize"><a href="#实例方法-normalize" class="headerlink" title="实例方法:normalize()"></a>实例方法:normalize()</h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。</p>
<p>一:直接提供带重音符号的字符，比如Ǒ（\u01D1）</p>
<p>二:提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如o（\u004F）和ˇ \u030C）合成Ǒ（\u004F\u030C）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'\u01D1'</span>===<span class="string">'\u004F\u030C'</span> <span class="comment">//false</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\u01D1'</span>.length <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'\u004F\u030C'</span>.length <span class="comment">// 2</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>
<p>normalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。</p>
<ul>
<li>NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li>
<li>NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>
<li>NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）</li>
<li>NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>
</ul>
<blockquote>
<p>注意: normalize方法目前不能识别三个或三个以上字符的合成.  这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>
</blockquote>
<h2 id="实例方法-includes-startsWith-endsWith"><a href="#实例方法-includes-startsWith-endsWith" class="headerlink" title="实例方法:includes() , startsWith() , endsWith()"></a>实例方法:includes() , startsWith() , endsWith()</h2><ul>
<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>
<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//第二个参数表示从第n个位置知道字符串结束</span></span></code><br><code class="highlight javascript"><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//第二个参数表示针对前n个字符</span></span></code><br><code class="highlight javascript"><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<h2 id="实例方法-repeat"><a href="#实例方法-repeat" class="headerlink" title="实例方法: repeat()"></a>实例方法: repeat()</h2><p>repeat()方法返回一个新字符串,表示将原字符串重复n次.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>参数如果是小数,会被取整(小数的整数部分)</li>
<li>参数如果是负数或infinity,会报错</li>
<li>参数是0到-1之间的小数,则等同于0(这是因为会先进行取整运算)</li>
<li>参数NaN等同于0</li>
<li>参数是字符串,则会先转换成数字</li>
</ul>
</blockquote>
<h2 id="实例方法-padStart-padEnd"><a href="#实例方法-padStart-padEnd" class="headerlink" title="实例方法: padStart() , padEnd()"></a>实例方法: padStart() , padEnd()</h2><p>用途:字符串长度补全, padStart()用于头部补全, padEnd()用于尾部补全</p>
<p>参数:</p>
<p>第一个参数:字符串补全生效的最大长度</p>
<p>第二个参数:用来补全的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>如果原字符串的长度等于或大于最大长度,则字符串补全不生效,返回原字符串</li>
</ul>
<ul>
<li><p>如果用来补全的字符串与原字符串两者的长度之和超过了最大长度,则会截去超出位数的补全字符串 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">'0123456789'</span>)</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// '0123456abc'</span></span></code><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>如果省略第二个参数,默认使用空格补全长度</li>
</ul>
</blockquote>
<h2 id="实例方法-trimStart-trimEnd"><a href="#实例方法-trimStart-trimEnd" class="headerlink" title="实例方法: trimStart() , trimEnd()"></a>实例方法: trimStart() , trimEnd()</h2><p>这两个方法的行为与trim一致,trimStart()消除字符串头部的空格,trimEnd()消除尾部的空格,并返回新字符串,不会修改原始字符串.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> s = <span class="string">'  abc  '</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">s.trim() <span class="comment">// "abc"</span></span></code><br><code class="highlight javascript"><span class="line">s.trimStart() <span class="comment">// "abc  "</span></span></code><br><code class="highlight javascript"><span class="line">s.trimEnd() <span class="comment">// "  abc"</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:除了空格键,这两个方法对字符串头部(或尾部)的tab键 , 换行等不可见的空白符号也有效</p>
</blockquote>
<h2 id="实例方法-matchAll"><a href="#实例方法-matchAll" class="headerlink" title="实例方法: matchAll()"></a>实例方法: matchAll()</h2><p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--变量的解构和赋值</title>
    <url>/2019/10/14/ECMAScript6/2%E3%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E5%92%8C%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<p>ES6允许按照一定模式,从数组和对象中提取值,对变量进行赋值 ,着称为结构赋值</p>
<h1 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//数组的结构赋值</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//上面的写法等同于</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span></code><br></pre></td></tr></table></figure>

<p>本质上,这种写法属于”模式匹配”,只要等号两边的模式相同,左边的变量就会被赋予对应的值<br>如果结构不成功变量的值等于undefined.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span></code><br><code class="highlight javascript"><span class="line">foo <span class="comment">// 1      </span></span></code><br><code class="highlight javascript"><span class="line">bar <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line">baz <span class="comment">// 3</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span></code><br><code class="highlight javascript"><span class="line">third <span class="comment">// "baz"</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></code><br><code class="highlight javascript"><span class="line">x <span class="comment">// 1      </span></span></code><br><code class="highlight javascript"><span class="line">y <span class="comment">// 3</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></code><br><code class="highlight javascript"><span class="line">head <span class="comment">// 1     </span></span></code><br><code class="highlight javascript"><span class="line">tail <span class="comment">// [2, 3, 4]</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span></code><br><code class="highlight javascript"><span class="line">x <span class="comment">// "a"      </span></span></code><br><code class="highlight javascript"><span class="line">y <span class="comment">// undefined     </span></span></code><br><code class="highlight javascript"><span class="line">z <span class="comment">// []</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>…运算符为Iterator 提供的</p>
</blockquote>
<p>结构不完全,即等号左边的模式,只匹配一部分的等号右边的数组,这种情况下,结构依然可以成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></code><br><code class="highlight javascript"><span class="line">x <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">y <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span></code><br><code class="highlight javascript"><span class="line">a <span class="comment">// 1</span></span></code><br><code class="highlight javascript"><span class="line">b <span class="comment">// 2</span></span></code><br><code class="highlight javascript"><span class="line">d <span class="comment">// 4</span></span></code><br></pre></td></tr></table></figure>

<p>如果等号的右边不是数组(严格的来说,不是可遍历的结构),将会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span></code><br></pre></td></tr></table></figure>

<p>上面前五个表达式的值转为对象以后不具备Iterator接口,最后一个本身就不具备Iterator接口<br>对于set结构,也可以使用数组的结构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span></code><br><code class="highlight javascript"><span class="line">x <span class="comment">// "a"</span></span></code><br></pre></td></tr></table></figure>

<p>事实上,只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>结构赋值允许指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span></code><br><code class="highlight javascript"><span class="line">foo <span class="comment">// true</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span></code><br></pre></td></tr></table></figure>

<p>ES6内部使用严格相等运算符(===)判断一个位置是否有值,所以,只有当一个数组成员严格等于undefined,默认值才会生效如果默认值是一个表达式,那么这个表达式是惰性求值的,即只有在用到的时候,才会求值(例如函数表达式)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">	<span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [x=f()] = [<span class="number">1</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//由于数组成员不为undefined,所以函数f不会执行</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:默认值可以引用结构赋值的其他变量,但该变量必须已经声明</p>
</blockquote>
<h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>结构不仅可以用于数组,还可以用于对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:foo,<span class="attr">bar</span>:bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'aaa'</span>,<span class="attr">bar</span>:<span class="string">'bbb'</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//简写:let &#123;foo,bar&#125; = &#123;foo:'aaa',bar:'bbb'&#125;;</span></span></code><br><code class="highlight javascript"><span class="line">foo     <span class="comment">//'aaa'</span></span></code><br><code class="highlight javascript"><span class="line">bar     <span class="comment">//'bbb'</span></span></code><br></pre></td></tr></table></figure>

<p>上面代码中,键值对的意思是    <strong>属性名: 变量名</strong><br>对象的解构赋值的内部机制,是先找到同名属性,然后再赋值给对应的变量.真正的被赋值的是后者,而不是前者</p>
<p><strong>与数组解构的不同之处:</strong></p>
<ol>
<li>数组解构中数组的元素必须按次序排列,变量的取值由它的位置决定;</li>
<li>但是对象解构赋值没有次序要求,只要变量与属性同名,才能取到正确的值</li>
<li>同数组解构一样,如果解构失败,变量的值等于undefined</li>
</ol>
<blockquote>
<p>注意:  对象的解构赋值可以取到继承的属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1, obj2);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">const</span> &#123; foo &#125; = obj1;</span></code><br><code class="highlight javascript"><span class="line">foo <span class="comment">// "bar"</span></span></code><br></pre></td></tr></table></figure>



<h2 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a><strong>默认值</strong></h2><p>对象的解构也可以指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> &#123;x=<span class="number">3</span>&#125; = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line">x   <span class="comment">//3</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>:y=<span class="number">3</span>&#125; = &#123;<span class="attr">x</span>:<span class="number">5</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line">y  <span class="comment">//5</span></span></code><br></pre></td></tr></table></figure>

<p>默认值生效的条件是,对象的属性值严格等于undefined</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h2><p>(1)如果要讲一个已经声明的变量用于解构赋值,必须非常小心</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//错误的写法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> x;</span></code><br><code class="highlight javascript"><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//上面代码的写法会报错，因为 JavaScript 引擎会将&#123;x&#125;理解成一个代码块，</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//从而发生语法错误。只有不将大括号写在行首，</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//避免 JavaScript 将其解释为代码块，才能解决这个问题。</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//正确的写法</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> x;</span></code><br><code class="highlight javascript"><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;);</span></code><br></pre></td></tr></table></figure>

<p>(2)由于数组本质上是特殊的对象,因此可以对数组进行对象属性的解构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>:first,[arr.length <span class="number">-1</span>]:last&#125; = arr;</span></code><br><code class="highlight javascript"><span class="line">first    <span class="comment">//1</span></span></code><br><code class="highlight javascript"><span class="line">last     <span class="comment">//3</span></span></code><br></pre></td></tr></table></figure>

<h1 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h1><p>字符串在解构赋值时会被转成一个类似数组的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> [a,b,c,d,e] = <span class="string">'hello'</span>;</span></code><br><code class="highlight javascript"><span class="line">a   <span class="comment">//"h"</span></span></code><br><code class="highlight javascript"><span class="line">b   <span class="comment">//"e"</span></span></code><br><code class="highlight javascript"><span class="line">c   <span class="comment">//"l"</span></span></code><br><code class="highlight javascript"><span class="line">d   <span class="comment">//"l"</span></span></code><br><code class="highlight javascript"><span class="line">e   <span class="comment">//"o"</span></span></code><br></pre></td></tr></table></figure>

<h1 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h1><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>:s&#125; = <span class="number">123</span>;</span></code><br><code class="highlight javascript"><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span></code><br></pre></td></tr></table></figure>

<p>解构赋值的规则: 只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<h1 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h1><p>函数的参数也可以使用解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> x + y;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span></code><br></pre></td></tr></table></figure>

<p>函数参数的解构使用默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> [x, y];</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span></code><br><code class="highlight javascript"><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span></code><br><code class="highlight javascript"><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span></code><br><code class="highlight javascript"><span class="line">move(); <span class="comment">// [0, 0]</span></span></code><br></pre></td></tr></table></figure>

<h1 id="圆括号的问题"><a href="#圆括号的问题" class="headerlink" title="圆括号的问题"></a>圆括号的问题</h1><p>建议只要有可能，就不要在模式中放置圆括号。</p>
<h2 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h2><ol>
<li>变量声明语句</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">//全部报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123;(x): c&#125; = &#123;&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</span></code><br></pre></td></tr></table></figure>

<p>2.函数参数</p>
<p>函数参数也属于变量声明,因此不能带有圆括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[z,(x</span>)]) </span>&#123; <span class="keyword">return</span> x; &#125;</span></code><br></pre></td></tr></table></figure>

<p>3.赋值语句的模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 全部报错</span></span></code><br><code class="highlight javascript"><span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span></code><br><code class="highlight javascript"><span class="line">([a]) = [<span class="number">5</span>];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//将整个模式放在圆括号之中，导致报错。</span></span></code><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 报错</span></span></code><br><code class="highlight javascript"><span class="line">[(&#123; <span class="attr">p</span>: a &#125;), &#123; <span class="attr">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//将一部分模式放在圆括号之中，导致报错。</span></span></code><br></pre></td></tr></table></figure>

<h2 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h2><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span></code><br><code class="highlight javascript"><span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span></code><br><code class="highlight javascript"><span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span></code><br></pre></td></tr></table></figure>

<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>1.交换变量的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">[x, y] = [y, x];</span></code><br></pre></td></tr></table></figure>

<p>2.从函数返回多个值<br>将函数返回值放在一个数组或对象里返回,用解构赋值进行取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 返回一个数组</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 返回一个对象</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">return</span> &#123;</span></code><br><code class="highlight javascript"><span class="line">    foo: <span class="number">1</span>,</span></code><br><code class="highlight javascript"><span class="line">    bar: <span class="number">2</span></span></code><br><code class="highlight javascript"><span class="line">  &#125;;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span></code><br></pre></td></tr></table></figure>

<p>3.函数参数的定义<br>解构赋值可以方便地将一组参数与变量名对应起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 参数是一组有次序的值</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span></code><br><code class="highlight javascript"><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 参数是一组无次序的值</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span></code><br><code class="highlight javascript"><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span></code><br></pre></td></tr></table></figure>

<p>4.提取JSON数据<br>解构赋值对提取 JSON 对象中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">let</span> jsonData = &#123;</span></code><br><code class="highlight javascript"><span class="line">  id: <span class="number">42</span>,</span></code><br><code class="highlight javascript"><span class="line">  status: <span class="string">"OK"</span>,</span></code><br><code class="highlight javascript"><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span></code><br><code class="highlight javascript"><span class="line">&#125;;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(id, status, number);</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span></code><br></pre></td></tr></table></figure>

<p>5.函数参数的默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 参数是一组无次序的值</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x:x=<span class="number">1</span>, y:y=<span class="number">2</span>, z:z=<span class="number">3</span>&#125;</span>) </span>&#123; ... &#125;</span></code><br><code class="highlight javascript"><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;);    <span class="comment">//x=1 y=2 z=3</span></span></code><br></pre></td></tr></table></figure>

<p>6.遍历Map结构</p>
<p>任何部署了 Iterator 接口的对象，都可以用for…of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></code><br><code class="highlight javascript"><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span></code><br><code class="highlight javascript"><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// first is hello</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// second is world</span></span></code><br></pre></td></tr></table></figure>

<p>只想获取键名,或者获取键值,可以写成下面的形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 获取键名</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// ...</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// 获取键值</span></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="comment">// ...</span></span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br></pre></td></tr></table></figure>

<p>7.输入模块的指定方法</p>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</span></code><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>let和const命令</title>
    <url>/2019/10/12/ECMAScript6/1%E3%80%81let&amp;&amp;const/</url>
    <content><![CDATA[<h1 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h1><ul>
<li>let命令只在所在的代码块内有效</li>
<li>let命令很适合for循环的计数器</li>
<li>let命令不存在变量提升,在变量声明前使用会报ReferenceError错误</li>
<li>let不允许在相同的作用域内,重复声明同一个变量</li>
</ul>
<a id="more"></a>

<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES5只有全局作用域和函数作用域,没有块级作用域,这带来很多不合理场景。<br>第一种场景:内层变量可能会覆盖外层变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(tmp);</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">f(); <span class="comment">// undefined</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">//解释</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">/*函数内部if代码块外部使用外层的tmp变量,内部使用内层的tmp变量,但是由于存在</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">*变量提升,内层的tmp覆盖了外层的tmp变量</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">*/</span></span></code><br></pre></td></tr></table></figure>



<p>第二种场景:用来计数的循环变量泄露为全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="built_in">console</span>.log(s[i]);</span></code><br><code class="highlight javascript"><span class="line">&#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">/*</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">*循环变量i只用来控制循环,但是循环结束后,他并没有小时,泄露成了全局变量</span></span></code><br><code class="highlight javascript"><span class="line"><span class="comment">*/</span></span></code><br></pre></td></tr></table></figure>



<h2 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h2><p>let和const为JavaScript提供了块级作用域<br>ES6允许块级作用域的多级嵌套</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line">&#123;&#123;&#123;</span></code><br><code class="highlight javascript"><span class="line">	<span class="keyword">let</span> test = <span class="number">12</span>;</span></code><br><code class="highlight javascript"><span class="line">    &#123;<span class="keyword">let</span> text = <span class="number">12</span>;&#125;</span></code><br><code class="highlight javascript"><span class="line">&#125;&#125;&#125;</span></code><br></pre></td></tr></table></figure>

<p>块级作用域的出现,使用立即执行函数来防止污染全局变量已经不再必要了</p>
<h2 id="块级作用域域函数声明"><a href="#块级作用域域函数声明" class="headerlink" title="块级作用域域函数声明"></a>块级作用域域函数声明</h2><p>ES5规定,函数只能在顶层作用域和函数作用域之中声明,不能在块级作用中声明函数,但是浏览器没有遵守这个规定,为了兼容以前的旧代码,还是支持在块级作用域之中声明函数</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="comment">// 重复声明一次函数f</span></span></code><br><code class="highlight javascript"><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  f();</span></code><br><code class="highlight javascript"><span class="line">&#125;());</span></code><br></pre></td></tr></table></figure>

<p>在ES5环境中运行,if内声明的函数会被提升到函数头部:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// ES5 环境</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line">  f();</span></code><br><code class="highlight javascript"><span class="line">&#125;());</span></code><br></pre></td></tr></table></figure>

<p>ES6引入块级作用域后,明确允许在块级作用域之中声明函数.函树声明语句的行为类似于let,在块级作用域之外不可引用.<br>但是ES6规定,浏览器的实现可以不遵守上面的规定,有自己的行为方式(为了兼容以前的老代码).</p>
<ul>
<li>允许在块级作用域内声明函数</li>
<li>函数声明类似于var,即会提升到全局作用域或函数作用域的头部。</li>
<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>
</ul>
<blockquote>
<p>注意:上面的三条规则只对ES6的浏览器实现有效,其他浏览器环境的实现不用遵守</p>
</blockquote>
<p>上面的例子在ES6环境中运行如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="comment">// 浏览器的 ES6 环境</span></span></code><br><code class="highlight javascript"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span></code><br><code class="highlight javascript"><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></code><br><code class="highlight javascript"><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></code><br><code class="highlight javascript"><span class="line">  &#125;</span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line">  f();</span></code><br><code class="highlight javascript"><span class="line">&#125;());</span></code><br><code class="highlight javascript"><span class="line"><span class="comment">// Uncaught TypeError: f is not a function</span></span></code><br></pre></td></tr></table></figure>

<blockquote>
<p>综上所述,应该避免在块级作用域内声明函数,如果确实需要,也应该写成函数表达式,而不是函数声明语句。<br>注意:ES6块级作用域必须有大括号,如果没有大括号,JavaScript引擎就认为不存在块级作用域</p>
</blockquote>
<h1 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h1><p>const声明一个只读的常量,一旦声明,常量的值就不能改变。<br>const一旦声明了变量,就必须立即初始化,不能留到以后赋值,不然会报错。<br>const声明的变量也是不存在变量提升的,不能重复声明。</p>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>const定义的常量不是变量的值不得改动,而是变量指向的的那个内存地址保存的数据不得改动</p>
<ul>
<li>对于简单类型的数据(数值,字符串,布尔值),值就保存在变量指向的那个内存地址,因此等同于常量</li>
<li>对于复合类型的数据(主要是对象和数组),变量指向的内存地址,保存的只是一个指向实际数据的指针,const只能保证这个指针是固定的,但是它指向的数据结构是不是可变的就不能控制了</li>
</ul>
<h1 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h1><p>在ES5中,全局变量就等同于顶层对象(window)的属性,这非常不利于模块化编程,因为顶层对象的属性到处都可以修改。<br>ES6中的let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p>
<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><ol>
<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块</li>
<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象，否则会指向当前对象（运行环境）</li>
</ol>
<h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>概念:使用let或const命令声明变量之前,该变量都是不可用的,这在语法上,称为”暂时性死区”.<br>暂时性死区意味着typeof不再是一个百分之百安全的操作.</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="highlight javascript"><span class="line"><span class="keyword">typeof</span> x;       <span class="comment">//ReferenceError</span></span></code><br><code class="highlight javascript"><span class="line"></span></code><br><code class="highlight javascript"><span class="line"><span class="keyword">let</span> x;</span></code><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端开发</category>
        <category>ECMAScript6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
