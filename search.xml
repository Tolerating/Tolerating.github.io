<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git快速使用</title>
    <url>/Git/git%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<a id="more"></a>

<p><img src="http://friendk.cn/git/git_process.png" alt=""></p>
<h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看git环境的详细配置</span><br><span class="line">git config -l </span><br><span class="line"></span><br><span class="line">#查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --list</span><br><span class="line"> </span><br><span class="line">#查看当前仓库配置信息</span><br><span class="line">git config --local  --list</span><br><span class="line"></span><br><span class="line">#不加 --global 默认配置成当前仓库</span><br><span class="line"># --global配置全局,每次的git提交都会用此信息</span><br><span class="line">git config.user &#x3D; &quot;用户名&quot;</span><br><span class="line">git config.email &#x3D; &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>
<h2 id="远程仓库-主机-git-remote"><a href="#远程仓库-主机-git-remote" class="headerlink" title="远程仓库(主机) [git remote]"></a>远程仓库(主机) [git remote]</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出所有远程主机</span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line">#参看远程主机的网址</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">#查看该主机的详细信息</span><br><span class="line">git remote show &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class="line"></span><br><span class="line">#删除远程主机</span><br><span class="line">git remote rm &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line">#远程主机的改名</span><br><span class="line">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>拉取远程主机的版本库的更新到本地仓库,==该命令不会对本地的开发代码产生影响==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将远程主机的更新,全部取回本地</span><br><span class="line">git fetch &lt;远程主机名&gt;</span><br><span class="line"></span><br><span class="line">#取回特定分支的更新</span><br><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p>
</blockquote>
<blockquote>
<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
</blockquote>
<h3 id="合并取回的更新"><a href="#合并取回的更新" class="headerlink" title="合并取回的更新"></a>合并取回的更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在本地分支上合并远程分支。</span><br><span class="line">git merge origin&#x2F;master</span><br><span class="line">#或者</span><br><span class="line">git rebase origin&#x2F;master</span><br></pre></td></tr></table></figure>


<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>取回远程主机某个分支的更新，再与本地的指定分支合并。==会影响开发的代码==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line">#取回origin主机的next分支，与本地的master分支合并</span><br><span class="line">git pull origin next:master</span><br><span class="line"></span><br><span class="line">#如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><br><span class="line">git pull origin next</span><br><span class="line"></span><br><span class="line">#如果合并需要采用rebase模式，可以使用--rebase选项。</span><br><span class="line">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git撤销更新</title>
    <url>/Git/git%E6%92%A4%E9%94%80%E6%9B%B4%E6%96%B0.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="git撤销更新"><a href="#git撤销更新" class="headerlink" title="git撤销更新"></a>git撤销更新</h2><h3 id="撤销暂缓区更新"><a href="#撤销暂缓区更新" class="headerlink" title="撤销暂缓区更新"></a>撤销暂缓区更新</h3><p>使用”git add”把更新提交到了暂存区。这时”git status”的输出中提示我们可以通过<code>git reset HEAD &lt;file&gt;...</code>把暂存区的更新移出到WorkSpace中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status &#x2F;&#x2F;查看暂缓区文件</span><br><span class="line">git reset HEAD &lt;file&gt; &#x2F;&#x2F;撤销&lt;file&gt;,可以使用点号</span><br></pre></td></tr></table></figure>
<h3 id="撤销本地仓库更新"><a href="#撤销本地仓库更新" class="headerlink" title="撤销本地仓库更新"></a>撤销本地仓库更新</h3><p>撤销提交有两种方式：使用<code>HEAD指针</code>和使用<code>commit id</code></p>
<ol>
<li>HEAD指针<br>在<code>git</code>中,<code>HEAD</code>指针指向当前分支中最新的提交。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEAD^ : 表示上一次提交</span><br><span class="line">HEAD^^ : 表示上上次的提交</span><br><span class="line">&#x2F;&#x2F;若要回退到更早的提交,可以使用HEAD~n</span><br><span class="line">&#x2F;&#x2F;HEAD^ &#x3D; HEAD~1 , HEAD^^ &#x3D; HEAD~2</span><br></pre></td></tr></table></figure></li>
<li>使用commit id<br><code>commit id</code>可以使用<code>git log</code>命令查看<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --hard commit</span><br></pre></td></tr></table></figure>
<blockquote>
<p>–hard : 撤销并删除相应的更新(删除本地仓库,工作空间的更新)<br><br>–soft : 撤销相应的更新,把这些更新的内容放到暂缓区(stage/index)中</p>
</blockquote>
</li>
</ol>
<p>恢复被撤销的提交可用<code>git reflog</code>查看仓库中所有分支的更新记录,包括已经撤销的更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">1c7d836 HEAD@&#123;0&#125;: checkout: moving from dev-users to master</span><br><span class="line">6ca878d HEAD@&#123;1&#125;: reset: moving to 6ca878d1e692b5155ecfbc043a63c95b767a1a27</span><br><span class="line">e2d9ce7 HEAD@&#123;2&#125;: checkout: moving from dev-login to dev-users</span><br><span class="line">e2d9ce7 HEAD@&#123;3&#125;: reset: moving to e2d9ce75222579ce85b966e732016b473b2d8422</span><br><span class="line">6ca878d HEAD@&#123;4&#125;: checkout: moving from dev-users to dev-login</span><br><span class="line">e2d9ce7 HEAD@&#123;5&#125;: checkout: moving from dev-login to dev-users</span><br><span class="line">6ca878d HEAD@&#123;6&#125;: commit: 用户列表界面表格完成</span><br><span class="line"></span><br><span class="line">git commit --hard HEAD@&#123;1&#125;</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">git commit --hard 6ca878d</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="撤销-git-add操作"><a href="#撤销-git-add操作" class="headerlink" title="撤销(git add操作)"></a>撤销(git add操作)</h2><p>执行<code>git rm --cached &lt;file&gt;</code>命令</p>
<blockquote>
<p>直接从暂存区删除文件，工作区则不做出改变</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git日志与历史</title>
    <url>/Git/git%E6%97%A5%E5%BF%97%E4%B8%8E%E5%8E%86%E5%8F%B2.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="日志与历史"><a href="#日志与历史" class="headerlink" title="日志与历史"></a>日志与历史</h2><p>使用<code>git log</code>指令查看当前分支的提交日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log -n 3 &#x2F;&#x2F;显示最近的3个提交</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多用法使用<code>git log --help</code>查看</p>
</blockquote>
<p>使用<code>git reflog</code>查看仓库中所有分支的更新记录(包括已经撤销的更新)</p>
<p>使用<code>history</code>命令查看历史记录</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>windows中安装Jenkins</title>
    <url>/Jenkins/windows%E5%AE%89%E8%A3%85Jenkins.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="windows安装Jenkins"><a href="#windows安装Jenkins" class="headerlink" title="windows安装Jenkins"></a>windows安装Jenkins</h2><h3 id="下载安装Jenkins"><a href="#下载安装Jenkins" class="headerlink" title="下载安装Jenkins"></a>下载安装Jenkins</h3><p><a href="https://jenkins.io/zh/download/">Jenkins官网</a></p>
<p><img src="http://friendk.cn/jenkins/jenkins-1.png" alt="1575638819127"></p>
<p>我下载的是war包版(需要配置<strong>java环境</strong>),如果没有配置java环境可以下载windows版。</p>
<blockquote>
<p>下面主要讲war包版的</p>
</blockquote>
<p>war包版的运行起来十分简单:</p>
<p>在war包所在的目录运行命令窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort&#x3D;8080</span><br></pre></td></tr></table></figure>
<p>命令行行会有密码,复制改密码然后安装推荐插件</p>
<p><img src="http://friendk.cn/jenkins/jenkins-2.png" alt="1575639468883"></p>
<p>可能会有几个安装失败,提醒是否重试,可以点击一下重试,如果还是安装失败就直接忽略继续下一步</p>
<p>创建完用户后登陆Jenkins</p>
<h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><p>进入下列目录中配置Jenkins Location选项</p>
<p><img src="http://friendk.cn/jenkins/jenkins-3.png" alt="1575639934705"></p>
<p><strong>注意:</strong> jenkins URL地址为服务器的内网地址，端口号和启动时的端口号保持一致</p>
<p><em>修改端口号</em>：<code>java -jar jenkins.war --ajp13Port=-1 --httpPort=6900</code></p>
<p><img src="http://friendk.cn/jenkins/jenkins-4.png" alt="1575640001501"></p>
<p>配置好后点击保存。</p>
<p>点击Manage Jenkins —-&gt; Global Tool Configuration</p>
<p>查看Git选项是否配置了 <em>安装推荐配置的时候默认是安装Git的,如果安装成功这里是会有配置的</em></p>
<p>这里我是用了自己安装的Git</p>
<p><img src="http://friendk.cn/jenkins/jenkins-5.png" alt="1575640310599"></p>
<p>点击Manage Jenkins —-&gt; Configure Global Security</p>
<p><img src="http://friendk.cn/jenkins/jenkins-16.png" alt="1575644269904"></p>
<p><img src="http://friendk.cn/jenkins/jenkins-15.png" alt="1575647778831"></p>
<p>授权策略中把<strong>匿名用户具有可读权限</strong>勾上，把跨站请求伪造保护的勾去掉</p>
<blockquote>
<p>不然github的webhook会报403</p>
</blockquote>
<h2 id="安装完成后再次启动Jenkins"><a href="#安装完成后再次启动Jenkins" class="headerlink" title="安装完成后再次启动Jenkins"></a>安装完成后再次启动Jenkins</h2><p>找到<code>jenkins.war</code>所在目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort&#x3D;(jenkins中设置的)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动部署Vue项目</title>
    <url>/Jenkins/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE.html</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>这是在windows环境下的Jenkins配置</p>
</blockquote>
<h2 id="使用Jenkins自动部署Vue项目"><a href="#使用Jenkins自动部署Vue项目" class="headerlink" title="使用Jenkins自动部署Vue项目"></a>使用Jenkins自动部署Vue项目</h2><h3 id="新建一个任务-类型为Freestyle-project"><a href="#新建一个任务-类型为Freestyle-project" class="headerlink" title="新建一个任务,类型为Freestyle project"></a>新建一个任务,类型为<code>Freestyle project</code></h3><h3 id="1-General"><a href="#1-General" class="headerlink" title="1.General"></a>1.General</h3><ul>
<li><p>勾选github项目，输入项目仓库的url地址</p>
</li>
<li><p>点击高级勾选<em>使用自定义的工作空间</em>，目录为<code>盘符:\...\nginx\html\myVue</code>(注意设置<code>nginx</code>的配置文件)</p>
</li>
</ul>
<h3 id="2-源码管理"><a href="#2-源码管理" class="headerlink" title="2.源码管理"></a>2.源码管理</h3><p>勾选 <code>Git</code>,然后输入你的仓库地址,选择连接的账户密码。若没有点击添加按钮自行添加。<br><img src="http://friendk.cn/jenkins/jenkins-7.png" alt="源码管理"></p>
<h3 id="3-构建触发器"><a href="#3-构建触发器" class="headerlink" title="3.构建触发器"></a>3.构建触发器</h3><p>勾选<strong>触发远程构建</strong>输入你自定义的身份验证令牌<br><img src="http://friendk.cn/jenkins/jenkins-9.png" alt="构建触发器"></p>
<blockquote>
<p>（身份令牌在<code>webhooks</code>中要用到,格式在输入框下方，TOKEN_NAME就是你输入的）</p>
</blockquote>
<p><img src="http://friendk.cn/jenkins/jenkins-12.png" alt="WebHooks"></p>
<blockquote>
<p>只需在Payload URL中输入，其他默认即可</p>
</blockquote>
<h3 id="4-构建环境"><a href="#4-构建环境" class="headerlink" title="4.构建环境"></a>4.构建环境</h3><p>勾选<code>Provide Node &amp; npm bin/ folder to PATH</code>,即构建环境为<code>NodeJS</code></p>
<blockquote>
<p>我本来是在Jenkins中配置自动安装<code>NodeJS</code>的,但是发现每次构建的时候都会卡在下载<code>NodeJS</code>这里，后来实在没有办法只能选择Jenkins插件中提供的NodeJS</p>
</blockquote>
<h3 id="5-构建"><a href="#5-构建" class="headerlink" title="5.构建"></a>5.构建</h3><p>增加构建步骤选择<em>Execute Windows batch command</em><br><img src="http://friendk.cn/jenkins/jenkins-10.png" alt="构建"></p>
<p>输入下列命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd C:\nginx\html\LeaveAPP_S</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>再增加一个构建步骤,输入下列命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<blockquote>
<p>两个命令之所以分开是因为发现都放在一个构建步骤里的时候,在安装完包后就结束构建了,并没有执行<code>npm run build</code>命令</p>
</blockquote>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>自动部署</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客百度收录</title>
    <url>/hexo/hexo%E5%8D%9A%E5%AE%A2%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="百度搜索资源管理平台添加网站"><a href="#百度搜索资源管理平台添加网站" class="headerlink" title="百度搜索资源管理平台添加网站"></a>百度搜索资源管理平台添加网站</h2><p><img src="http://friendk.cn/hexo/baidu_websiteAdd_1.png" alt="站点管理"></p>
<ol>
<li>进入站点管理页面后点击<strong>添加网站</strong></li>
<li>输入网站<br><img src="http://friendk.cn/hexo/baidu_websiteAdd_2.png" alt="输入网站"></li>
<li>设置站点属性<br><img src="http://friendk.cn/hexo/baidu_websiteAdd_3.png" alt="设置站点属性"></li>
<li>验证网站</li>
</ol>
<ul>
<li>文件验证：下载文件后放到网站的根目录下即可</li>
<li>HTML验证：将指定的<code>&lt;meta&gt;</code>标签放到网站首页(即<code>index.html</code>文件)的<code>&lt;head&gt;</code>标签中</li>
</ul>
<blockquote>
<p>注意：网站验证时不可出现跳转，否则会报302错误。可以把网站部署到80端口上。</p>
</blockquote>
<h2 id="hexo设置主动推送"><a href="#hexo设置主动推送" class="headerlink" title="hexo设置主动推送"></a>hexo设置主动推送</h2><p>添加网站之后需要向百度推送资源(收录)，一共有三种方式：</p>
<ol>
<li>API提交(本文用到的方式)</li>
<li>自动推送(需要关联主体)</li>
<li>sitemap</li>
<li>手动提交</li>
</ol>
<h3 id="API提交"><a href="#API提交" class="headerlink" title="API提交"></a>API提交</h3><ol>
<li><p>安装插件：<code>npm install hexo-baidu-url-submit --save</code></p>
</li>
<li><p>配置_config.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:********.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="comment">#提交最新的链接数</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">200</span> </span><br><span class="line">  <span class="comment">#在百度搜索资源管理平台中注册的域名</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">www.friendk.cn</span></span><br><span class="line">  <span class="comment">#API提交的TOKEN,可在API提交中找到  </span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">TOKEN</span></span><br><span class="line">  <span class="comment">#文本文档的地址,新链接会保存在此文本文档里，这个默认</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span></span><br></pre></td></tr></table></figure>
<p>配置成功的信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Deploying: baidu_url_submitter</span><br><span class="line">INFO  Submitting urls</span><br><span class="line">.......</span><br><span class="line">&#123;&quot;remain&quot;:2939,&quot;success&quot;:61&#125;</span><br><span class="line">INFO  Deploy done: baidu_url_submitter</span><br></pre></td></tr></table></figure>
<h4 id="卸载插件"><a href="#卸载插件" class="headerlink" title="卸载插件"></a>卸载插件</h4><p><code>npm uninstall hexo-baidu-url-submit</code></p>
</li>
</ol>
<p>然后在配置文件中删除对应的配置即可</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题代码块行间距过大问题解决</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E8%A1%8C%E9%97%B4%E8%B7%9D%E8%BF%87%E5%A4%A7.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="解决代码块行间距过大的问题"><a href="#解决代码块行间距过大的问题" class="headerlink" title="解决代码块行间距过大的问题"></a>解决代码块行间距过大的问题</h1><p>通过修改hexo源代码来解决</p>
<p>打开博客根目录 <code>node_modules\hexo-util\lib</code> 下的 <code>highlight.js</code> ,找到下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> before = useHljs ? <span class="string">`&lt;pre&gt;&lt;code class=&quot;<span class="subst">$&#123;classNames&#125;</span>&quot;&gt;`</span> : <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> after = useHljs ? <span class="string">&#x27;&lt;/code&gt;&lt;/pre&gt;&#x27;</span> : <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!wrap) <span class="keyword">return</span> <span class="string">`&lt;pre&gt;&lt;code class=&quot;<span class="subst">$&#123;classNames&#125;</span>&quot;&gt;<span class="subst">$&#123;data.value&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`&lt;figure class=&quot;highlight<span class="subst">$&#123;data.language ? <span class="string">` <span class="subst">$&#123;data.language&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (caption) &#123;</span><br><span class="line">  result += <span class="string">`&lt;figcaption&gt;<span class="subst">$&#123;caption&#125;</span>&lt;/figcaption&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result += <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lines = data.value.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = lines.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> line = lines[i];</span><br><span class="line">  <span class="keyword">if</span> (tab) line = replaceTabs(line, tab);</span><br><span class="line">  <span class="keyword">let</span> content = formatLine(line, <span class="built_in">Number</span>(firstLine) + i, mark, options);</span><br><span class="line"></span><br><span class="line">  result += <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (gutter) &#123;</span><br><span class="line">    result += <span class="string">`&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;<span class="subst">$&#123;<span class="built_in">Number</span>(firstLine) + i&#125;</span>&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result += <span class="string">`&lt;td class=&quot;code&quot;&gt;<span class="subst">$&#123;before&#125;</span><span class="subst">$&#123;content&#125;</span><span class="subst">$&#123;after&#125;</span>&lt;/td&gt;&lt;/tr&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result += <span class="string">&#x27;&lt;/table&gt;&lt;/figure&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p><strong>修改为:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> before = useHljs ? <span class="string">`&lt;code class=&quot;<span class="subst">$&#123;classNames&#125;</span>&quot;&gt;`</span> : <span class="string">`&lt;code class=&quot;<span class="subst">$&#123;classNames&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">  <span class="keyword">const</span> after = useHljs ? <span class="string">&#x27;&lt;/code&gt;&#x27;</span> : <span class="string">&#x27;&lt;/code&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> myCode = <span class="string">&#x27;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> number = <span class="string">&#x27;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!wrap) <span class="keyword">return</span> <span class="string">`&lt;pre&gt;&lt;code class=&quot;<span class="subst">$&#123;classNames&#125;</span>&quot;&gt;<span class="subst">$&#123;data.value&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">`&lt;figure class=&quot;highlight<span class="subst">$&#123;data.language ? <span class="string">` <span class="subst">$&#123;data.language&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">  <span class="keyword">if</span> (caption) &#123;</span><br><span class="line">    result += <span class="string">`&lt;figcaption&gt;<span class="subst">$&#123;caption&#125;</span>&lt;/figcaption&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result += <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> lines = data.value.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  result += <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = lines.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> line = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (tab) line = replaceTabs(line, tab);</span><br><span class="line">    <span class="keyword">let</span> content = formatLine(line, <span class="built_in">Number</span>(firstLine) + i, mark, options); </span><br><span class="line">    <span class="keyword">if</span> (gutter) &#123;</span><br><span class="line">      number += <span class="string">`&lt;span class=&quot;line&quot;&gt;<span class="subst">$&#123;<span class="built_in">Number</span>(firstLine) + i&#125;</span>&lt;/span&gt;&lt;br&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    myCode += <span class="string">`<span class="subst">$&#123;before&#125;</span><span class="subst">$&#123;content&#125;</span><span class="subst">$&#123;after&#125;</span>&lt;br&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  number += <span class="string">&#x27;&lt;/pre&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">  myCode += <span class="string">&#x27;&lt;/pre&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">  result += number + myCode + <span class="string">&#x27;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>


<p>修改前的代码块间距:</p>
<p><img src="http://friendk.cn/hexo/hexo-lineheight-1.png" alt="1576209805349"></p>
<p>修改后的:</p>
<p><img src="http://friendk.cn/hexo/hexo-lineheight-2.png" alt="1576161658151"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题分页图标不显示</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E5%88%86%E9%A1%B5%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="解决next主题文章分页图标不显示问题："><a href="#解决next主题文章分页图标不显示问题：" class="headerlink" title="解决next主题文章分页图标不显示问题："></a>解决next主题文章分页图标不显示问题：</h1><p>文章分页的安装见next官网</p>
<p>问题截图:<br><img src="http://friendk.cn/hexo/hexo-footer.png" alt="1576209782269"></p>
<p>解决:</p>
<p>打开博客根目录下 <code>themes\next\layout\_partials</code> 的<code>pagination.swig</code>,做一下修改:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;&#39;,</span><br><span class="line">        next_text: &#39;&gt;&#39;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实在解决不了才想出来的蠢办法o(╥﹏╥)o</p>
</blockquote>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题新标签页打开页面</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%89%93%E5%BC%80%E9%A1%B5%E9%9D%A2.html</url>
    <content><![CDATA[<p>在分类与标签中打开博文总是在当前页面打开，不方便查看其他博文，所以将分类与标签里的链接设置成在新的标签页打开。</p>
<a id="more"></a>

<p>打开<code>.....\themes\next\layout\_macro</code>目录下的<code>post-collapse.swig</code>文件。<br>第13行<code>&lt;a&gt;</code>标签加上<code>target=&quot;_blank&quot;</code>属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; target&#x3D;&quot;_blank&quot; itemprop&#x3D;&quot;url&quot;&gt;</span><br><span class="line">	&#123;% if post.type &#x3D;&#x3D;&#x3D; &#39;picture&#39; %&#125;</span><br><span class="line">		&#123;&#123; post.content &#125;&#125;</span><br><span class="line">	&#123;% else %&#125;</span><br><span class="line">		&lt;span itemprop&#x3D;&quot;name&quot;&gt;&#123;&#123; post.title | default(__(&#39;post.untitled&#39;)) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">	&#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题网页底部添加备案信息</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%A4%87%E6%A1%88%E4%BF%A1%E6%81%AF.html</url>
    <content><![CDATA[<a id="more"></a>

<p><code>theme -&gt; next -&gt; layout -&gt; _partials</code>，打开<code>footer.swig</code>，在文件底部<code>endif</code>的上面加入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nofollow&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=&#123;&#123;theme.footer.beian_mod.gongan_id&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;text-decoration:none;height:20px;line-height:20px;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;theme.footer.beian_mod.gongan_icon_url&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span>/&gt;</span>&#123;&#123;theme.footer.beian_mod.gongan_num&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.miitbeian.gov.cn/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nofollow&quot;</span>&gt;</span>&#123;&#123;theme.footer.beian_mod.icp&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打开<code>next</code>主题的配置文件<code>_config.yml</code>，定位到<code>footer</code>，添加以下属性：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">beian_mod:</span></span><br><span class="line">    <span class="attr">icp:</span> <span class="string">浙ICP备2020034976号-1</span></span><br><span class="line">    <span class="attr">gongan_id:</span> <span class="number">33040202000618</span></span><br><span class="line">    <span class="attr">gongan_num:</span> <span class="string">浙公网安备</span> <span class="number">33040202000618</span><span class="string">号</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span> <span class="string">/images/gongan.png</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>将<a href="http://friendk.cn/gongan.png">公安</a>的图标放在<code>source/images</code>下</p>
</blockquote>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题配置DaoVoice</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AEDaoVoice.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="配置DaoVoice"><a href="#配置DaoVoice" class="headerlink" title="配置DaoVoice"></a>配置DaoVoice</h1><p>next主题:<code>next/layout/_partials/head.swig</code></p>
<p>配置了客户端的检测,电脑端加载DaoVice,手机不加载(加快访问速度)</p>
<h2 id="注册登录DaoVoice"><a href="#注册登录DaoVoice" class="headerlink" title="注册登录DaoVoice"></a>注册登录DaoVoice</h2><p><a href="https://account.daocloud.io/signup">注册地址</a></p>
<p>修改的hexo的文件路径如下: 博客<code>/themes/next/layout/_partials/head.swig</code> 末尾添加下面的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	let win &#x3D; window.navigator.userAgent.toLowerCase();</span><br><span class="line">	if(&#x2F;mobi|android|touch|mini&#x2F;i.test(win))&#123;</span><br><span class="line">		console.log(win);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]&#x3D;r;i[r]&#x3D;i[r]||function()&#123;(i[r].q&#x3D;i[r].q||[]).push(arguments)&#125;,i[r].l&#x3D;1*new Date();a&#x3D;s.createElement(o),m&#x3D;s.getElementsByTagName(o)[0];a.async&#x3D;1;a.src&#x3D;g;a.charset&#x3D;&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&#39;https:&#39; &#x3D;&#x3D; document.location.protocol ? &#39;https:&#39; : &#39;http:&#39;) + &quot;&#x2F;&#x2F;widget.daovoice.io&#x2F;widget&#x2F;50da685b.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">		daovoice(&#39;init&#39;, &#123;</span><br><span class="line">		   app_id: &quot;50da685b&quot;</span><br><span class="line">		&#125;);</span><br><span class="line">		daovoice(&#39;update&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>用户ID需要自行填写，查找的的位置在下图片中显示出来了<br><img src="http://friendk.cn/hexo/hexo-DaoVoice.png" alt="1578380330606"></p>
<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>在Next主题的配置文件<code>博客/themes/next/_config.yml</code>末尾中添加用户ID:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 用户ID</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题配置百度Share功能</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%99%BE%E5%BA%A6Share.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="配置百度Share"><a href="#配置百度Share" class="headerlink" title="配置百度Share"></a>配置百度Share</h1><p><code>_config.yml</code>中提示：<code>Warning: Baidu Share does not support https.</code><br>因为百度分享不支持在<code>https</code>上使用，所以一种解决方法便是，直接放文件到我们自己的目录下面。</p>
<p> <a href="https://github.com/hrwhisper/baiduShare">static文件夹</a></p>
<p>下载压缩包到本地，解压后，将<code>static</code>文件夹保存至<code>themes\next\source</code>目录下。</p>
<p>next\layout_partials\share:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.baidushare.type &#x3D;&#x3D;&#x3D; &quot;button&quot;%&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;bdsharebuttonbox&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_tsina&quot; data-cmd&#x3D;&quot;tsina&quot; title&#x3D;&quot;分享到新浪微博&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_douban&quot; data-cmd&#x3D;&quot;douban&quot; title&#x3D;&quot;分享到豆瓣网&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_sqq&quot; data-cmd&#x3D;&quot;sqq&quot; title&#x3D;&quot;分享到QQ好友&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_qzone&quot; data-cmd&#x3D;&quot;qzone&quot; title&#x3D;&quot;分享到QQ空间&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_weixin&quot; data-cmd&#x3D;&quot;weixin&quot; title&#x3D;&quot;分享到微信&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_tieba&quot; data-cmd&#x3D;&quot;tieba&quot; title&#x3D;&quot;分享到百度贴吧&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_twi&quot; data-cmd&#x3D;&quot;twi&quot; title&#x3D;&quot;分享到Twitter&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_fbook&quot; data-cmd&#x3D;&quot;fbook&quot; title&#x3D;&quot;分享到Facebook&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;bds_more&quot; data-cmd&#x3D;&quot;more&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;bds_count&quot; data-cmd&#x3D;&quot;count&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window._bd_share_config &#x3D; &#123;</span><br><span class="line">      &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;share&quot;: &#123;</span><br><span class="line">        &quot;bdSize&quot;: &quot;16&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;: &#123;</span><br><span class="line">        &quot;viewList&quot;: [&quot;tsina&quot;, &quot;douban&quot;, &quot;sqq&quot;, &quot;qzone&quot;, &quot;weixin&quot;, &quot;twi&quot;, &quot;fbook&quot;],</span><br><span class="line">        &quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class="line">        &quot;viewSize&quot;: &quot;16&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.baidushare.type &#x3D;&#x3D;&#x3D; &quot;slide&quot; %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window._bd_share_config &#x3D; &#123;</span><br><span class="line">      &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;: &#123;</span><br><span class="line">        &quot;viewList&quot;: [&quot;tsina&quot;, &quot;douban&quot;, &quot;sqq&quot;, &quot;qzone&quot;, &quot;weixin&quot;, &quot;twi&quot;, &quot;fbook&quot;],</span><br><span class="line">        &quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class="line">        &quot;viewSize&quot;: &quot;16&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;slide&quot;: &#123;</span><br><span class="line">        &quot;bdImg&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;bdPos&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;bdTop&quot;: &quot;100&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  with(document)0[(getElementsByTagName(&#39;head&#39;)[0]||body).appendChild(createElement(&#39;script&#39;)).src&#x3D;&#39;&#x2F;static&#x2F;api&#x2F;js&#x2F;share.js?v&#x3D;89860593.js?cdnversion&#x3D;&#39;+~(-new Date()&#x2F;36e5)];</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>主题配置文件:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidushare:</span> </span><br><span class="line">  <span class="attr">baidushare:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">slide</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题配置网页加载条</title>
    <url>/hexo/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E6%9D%A1.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="配置网页加载条"><a href="#配置网页加载条" class="headerlink" title="配置网页加载条:"></a>配置网页加载条:</h1><p>打开 /themes/next/layout/_partials/head.swig 文件，在文件末尾添加如下代码：</p>
<script src="https://neveryu.github.io/js/src/pace.min.js"></script>
<p>然后，打开 /themes/source/css/_custom/custom.styl 文件，在文件末尾添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*网页加载条*/</span></span><br><span class="line"><span class="comment">/* This is a compiled file, you should be editing the file in the templates directory */</span></span><br><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1e92fb</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#e90f92</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1.0</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">2px</span> transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-ms-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-o-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-ms-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网页加载条 END*/</span></span><br></pre></td></tr></table></figure>


<p>另外，还看到一个方法，参考：Hexo-NexT配置超炫网页效果 - 简书</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑主题配置文件搜索pace，将其值改为ture就可以了，选择一款你喜欢的样式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="attr">pace:</span> <span class="string">ture</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-minimal</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装hexo</title>
    <url>/hexo/%E5%AE%89%E8%A3%85hexo.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;Workspaces&#x2F;hexo&#x2F;</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<blockquote>
<p>hexo会自动下载一些文件到这个目录，包括node_modules</p>
</blockquote>
<p><code>source/_post</code>目录为存放<code>.md</code>文件的位置</p>
<p>常用命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br><span class="line">hexo clean # 清理生成文件</span><br></pre></td></tr></table></figure>
<h2 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3.修改主题"></a>3.修改主题</h2><p><code>themes</code>文件夹是用来存放主题的,可以修改hexo根目录下的<code>_config.yml</code>来指定主题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h2 id="4-上传至github"><a href="#4-上传至github" class="headerlink" title="4.上传至github"></a>4.上传至github</h2><h3 id="准备ssh-key"><a href="#准备ssh-key" class="headerlink" title="准备ssh_key"></a>准备ssh_key</h3><p>使用ssh key来解决本地和服务器的连接问题。在<code>git bash</code>中输入下面命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure>
<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:邮箱地址是你注册使用的邮箱</p>
</blockquote>
<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>C:\Users\你的用户名\.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>
<p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p>
<blockquote>
<p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>看到这个信息说明SSH已配置成功！</p>
<h3 id="上传至github"><a href="#上传至github" class="headerlink" title="上传至github"></a>上传至github</h3><p>安装插件:<code>npm install hexo-deployer-git --save</code></p>
<p>配置<code>hexo</code>根目录下的<code>_config.yml</code>文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:yourName&#x2F;yourName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>自动部署博客到服务器上</title>
    <url>/hexo/%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="部署hexo博客到服务器上"><a href="#部署hexo博客到服务器上" class="headerlink" title="部署hexo博客到服务器上"></a>部署hexo博客到服务器上</h1><blockquote>
<p>在将博客部署到coding和github上后,发现手机上访问会有很长一段时间不显示文章（一直刷新几次会正常显示）,后来在电脑上发现从远程仓库返回的utils.js不对导致了这个错误，网上百度并没有发现该错误的解决办法，最后实在没有办法，只能将hexo博客部署到服务器上（coding和github上的依旧保持更新）。</p>
</blockquote>
<h2 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h2><p>网上部署hexo到服务器上的大致思路如下：</p>
<ol>
<li>服务器端配置git私人仓库</li>
<li>使用nginx，将访问地址指向私人仓库中的博客地址</li>
<li>本地写好博客后，将生成好的博客上传至私人博客</li>
</ol>
<p>我的部署方法是采用Jenkins远程拉取github上的博客，然后部署到nginx服务器上，其实跟上面讲到的方法大同小异（主要原因是因为我的服务器是windows的，ssh连接起来比较麻烦）</p>
<h2 id="使用Jenkins部署博客到服务器上"><a href="#使用Jenkins部署博客到服务器上" class="headerlink" title="使用Jenkins部署博客到服务器上"></a>使用Jenkins部署博客到服务器上</h2><h3 id="下载安装Jenkins"><a href="#下载安装Jenkins" class="headerlink" title="下载安装Jenkins"></a>下载安装Jenkins</h3><p>见<a href="http://www.friendk.cn/2013/07/13/Jenkins/windows%E5%AE%89%E8%A3%85Jenkins/">windows安装Jenkins</a></p>
<h3 id="创建新任务"><a href="#创建新任务" class="headerlink" title="创建新任务"></a>创建新任务</h3><h4 id="1-点击-新建Item"><a href="#1-点击-新建Item" class="headerlink" title="1. 点击  新建Item"></a>1. 点击  <strong>新建Item</strong></h4><h4 id="2-输入任务名-选择Freestyle-project"><a href="#2-输入任务名-选择Freestyle-project" class="headerlink" title="2. 输入任务名,选择Freestyle project"></a>2. 输入任务名,选择Freestyle project</h4><h4 id="添加描述"><a href="#添加描述" class="headerlink" title="添加描述"></a>添加描述</h4><p><img src="http://friendk.cn/jenkins/jenkins-6.png" alt="1575640614589"></p>
<p>描述里输入对该任务的说明补充</p>
<h4 id="配置源码管理"><a href="#配置源码管理" class="headerlink" title="配置源码管理"></a>配置源码管理</h4><p><img src="http://friendk.cn/jenkins/jenkins-7.png" alt="1575640798234"></p>
<p><code>Repository URL</code>是你放个人博客的仓库地址(<strong>注意不是源码!!!</strong>)</p>
<p><code>Credentials</code>是连接仓库的凭证,没有的话点击添加:</p>
<p><img src="http://friendk.cn/jenkins/jenkins-8.png" alt="1575640940980"></p>
<p>输入登录仓库的用户名和密码</p>
<p>ID不用填</p>
<h4 id="配置构建触发器"><a href="#配置构建触发器" class="headerlink" title="配置构建触发器"></a>配置构建触发器</h4><p><img src="http://friendk.cn/jenkins/jenkins-9.png" alt="1575641046890"></p>
<p>构建触发器勾选 <strong>触发远程构建</strong></p>
<blockquote>
<p>这里使用到仓库的webHook,即当仓库更新时会通过一个url触发构建的操作</p>
</blockquote>
<p>URL的格式: <code>Jenkins_URL/job/test/build?token=TOKEN_NAME</code></p>
<p>身份验证令牌可自定义填写</p>
<h4 id="配置构建"><a href="#配置构建" class="headerlink" title="配置构建"></a>配置构建</h4><p><img src="http://friendk.cn/jenkins/jenkins-10.png" alt="1575641394146"></p>
<p>window服务器选择第一个,Linux服务器选择第二个</p>
<p><img src="http://friendk.cn/jenkins/jenkins-11.png" alt="1575641585853"></p>
<blockquote>
<p>上面的dos命令先是删除lkblog文件夹,然后复制Jenkins工作空间下的lkblog复制到nginx中,然后重启nginx服务器（<code>nginx -s reload</code>可以不写）</p>
</blockquote>
<p>最后点击保存</p>
<h3 id="配置github的webhook"><a href="#配置github的webhook" class="headerlink" title="配置github的webhook"></a>配置github的webhook</h3><p>进入个博客的仓库,点击<code>settings</code>,点击<code>WebHook</code>,点击 <code>Add webhook</code></p>
<p><img src="http://friendk.cn/jenkins/jenkins-12.png" alt="1575642025140"></p>
<p><code>Payload URL</code>的值为: <code>Jenkins_URL/job/test/build?token=TOKEN_NAME</code></p>
<blockquote>
<p>注意 Jenkins_URL必须是外网地址</p>
</blockquote>
<p>配置好<code>Payload URL</code>后点击 <code>Add webhook</code></p>
<p>以上就打工搞成啦 (^_^)</p>
<h1 id="博客图片存储"><a href="#博客图片存储" class="headerlink" title="博客图片存储"></a>博客图片存储</h1><p>原本是打算用七牛的,但是由于域名还没有备案,所以暂时只能先用<code>ftp + nginx</code>的解决方案了。</p>
<ol>
<li><p><code>windows server 2008 R2</code>安装ftp服务自行百度,将ftp站点的物理路径设置为<code>盘符:\..\nginx\html\blogImg</code></p>
</li>
<li><p>nginx配置文件添加下列配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8787;</span><br><span class="line">        server_name  服务器的ip地址;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html&#x2F;blogImg;   </span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>socket.io学习</title>
    <url>/%E5%89%8D%E7%AB%AF/socket.io.html</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://www.w3cschool.cn/socket/socket-1olq2egc.html">W3Cschool教程</a></p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>使用<code>koa2</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa2-cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>).Server(app.callback());</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>)(server);</span><br><span class="line">app.use(cors());</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    socket.emit(<span class="string">&#x27;conned&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用<code>node</code>创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).createServer();</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    socket.emit(<span class="string">&#x27;conned&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h3><p>安装：<code>npm install --global nodemon</code><br>使用：<code>nodemon server.js</code></p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> socket = io(<span class="string">&quot;ws://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;conned&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="服务端API"><a href="#服务端API" class="headerlink" title="服务端API"></a>服务端API</h2><h2 id="客户端API"><a href="#客户端API" class="headerlink" title="客户端API"></a>客户端API</h2><h3 id="socket-id"><a href="#socket-id" class="headerlink" title="socket.id"></a>socket.id</h3><p>套接字会话的唯一标识符。在connect事件触发后设置，并在reconnect事件后更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">socket.on(<span class="string">&quot;connect&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//socket.id = &quot;ZLz8um5JA9LFwAoBAAAC&quot;;</span></span><br><span class="line">    <span class="built_in">console</span>.log(socket.id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以在<code>connect</code>事件中设置上一次连接的套接字会话标识。</p>
</blockquote>
<h3 id="socket-send-args-ack"><a href="#socket-send-args-ack" class="headerlink" title="socket.send([,...args][,ack])"></a><code>socket.send([,...args][,ack])</code></h3><p>向服务端发送一个<code>message</code>事件</p>
<ul>
<li><code>[...args]</code>: 向服务端发送的数据，如果有多个数据，请发送一个对象</li>
<li><code>[ack]</code>:回调函数，需要服务端执行才会被调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--客户端--&gt;</span><br><span class="line">socket.send(<span class="string">&quot;hello!&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;发送成功的回调&quot;</span>,data); <span class="comment">//hello!</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;!--服务端--&gt;</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 监听服务端的消息</span></span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//执行socket.send()的回调。</span></span><br><span class="line">    fn(data);</span><br><span class="line">    <span class="comment">//广播消息</span></span><br><span class="line">    io.sockets.emit(<span class="string">&#x27;broadcast&#x27;</span>,&#123;<span class="attr">data</span>:data&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="socket-emit-eventName-…args-ack"><a href="#socket-emit-eventName-…args-ack" class="headerlink" title="socket.emit(eventName[, …args][, ack])"></a><code>socket.emit(eventName[, …args][, ack])</code></h3><p>触发服务端监听的事件(<code>socket.on(eventName,function()&#123;&#125;)</code>)</p>
<ul>
<li><code>eventName</code>: 事件名称</li>
<li><code>[,...args]</code>:</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>socket.io</category>
      </categories>
      <tags>
        <tag>socket.io</tag>
      </tags>
  </entry>
  <entry>
    <title>前端数据模拟Mockjs</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/mockjs.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i mockjs -D</code></p>
<h2 id="使用mock模拟请求"><a href="#使用mock模拟请求" class="headerlink" title="使用mock模拟请求"></a>使用mock模拟请求</h2><p>格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Mock.mock(url,type,<span class="function">(<span class="params">opts</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(opts);</span><br><span class="line">    <span class="comment">/*body: null</span></span><br><span class="line"><span class="comment">    type: &quot;GET&quot;</span></span><br><span class="line"><span class="comment">    url: &quot;http://localhost:8080/users?query=&amp;pagenum=1&amp;pagesize=2&quot;*/</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:<br></p>
<ol>
<li>get请求的参数只能从url中获取,post请求的参数可以通过body属性得到</li>
<li>url最好使用正则表达式,如 <code>new RegExp(url)</code></li>
</ol>
</blockquote>
<p>示例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Mock.mock(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;/users&quot;</span>),<span class="string">&quot;get&quot;</span>,<span class="function">(<span class="params">opts</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(opts);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="快速使用模板"><a href="#快速使用模板" class="headerlink" title="快速使用模板"></a>快速使用模板</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--common.js--</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"><span class="comment">// 登录后台</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        url: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">          <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="string">&#x27;expire&#x27;</span>: Mock.Random.natural(<span class="number">60</span> * <span class="number">60</span> * <span class="number">1</span>, <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>),</span><br><span class="line">          <span class="string">&#x27;token&#x27;</span>: Mock.Random.string(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">---index.js--</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> common <span class="keyword">from</span> <span class="string">&#x27;./modules/common&#x27;</span></span><br><span class="line">fnCreate(common,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建mock模拟数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>mod 模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>isOpen 是否开启?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnCreate</span> (<span class="params">mod, isOpen = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> mod) &#123;</span><br><span class="line">        (<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.isOpen !== <span class="literal">false</span>) &#123;</span><br><span class="line">            Mock.mock(<span class="keyword">new</span> <span class="built_in">RegExp</span>(res.url), res.type, <span class="function">(<span class="params">opts</span>) =&gt;</span> &#123;</span><br><span class="line">              opts[<span class="string">&#x27;data&#x27;</span>] = opts.body ? <span class="built_in">JSON</span>.parse(opts.body) : <span class="literal">null</span></span><br><span class="line">              <span class="keyword">delete</span> opts.body</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;%cmock拦截, 请求: &#x27;</span>, <span class="string">&#x27;color:blue&#x27;</span>, opts)</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;%cmock拦截, 响应: &#x27;</span>, <span class="string">&#x27;color:blue&#x27;</span>, res.data)</span><br><span class="line">              <span class="keyword">return</span> res.data</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(mod[key]() || &#123;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>


<h2 id="常用的随机生成"><a href="#常用的随机生成" class="headerlink" title="常用的随机生成"></a>常用的随机生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Mock from &#39;mockjs&#39;</span><br><span class="line">Mock.mock(&#123;</span><br><span class="line">    &quot;data|100&quot;: [ &#x2F;&#x2F;生成100条数据 数组</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;address&quot;: &quot;@county(true)&quot;, &#x2F;&#x2F;随机生成地址</span><br><span class="line">            &quot;shopMsg&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">            &#x2F;&#x2F;生成商品信息，长度为10个汉字</span><br><span class="line">            &quot;shopName&quot;:&quot;@cword(6,10)&quot;, &#x2F;&#x2F;商品名称</span><br><span class="line">            &quot;shopId|+1&quot;: 1,&#x2F;&#x2F;生成商品id，自增1</span><br><span class="line">            &quot;shopTel&quot;: &#x2F;^1(5|3|7|8)[0-9]&#123;9&#125;$&#x2F;,&#x2F;&#x2F;生成随机电话号</span><br><span class="line">            &quot;salesVolume|30-1000&quot;: 30, &#x2F;&#x2F;随机生成商品价格 在30-1000之间</span><br><span class="line">            &quot;time&quot;:&quot;@datetime(),&quot; &#x2F;&#x2F;随机生成时间</span><br><span class="line">            &quot;name&quot;:&quot;@cname&quot;, &#x2F;&#x2F;随机中文名字</span><br><span class="line">            &quot;email&quot;:&quot;@email()&quot;, &#x2F;&#x2F;随机邮箱</span><br><span class="line">            &quot;image&quot;:&quot;@image()&quot;, &#x2F;&#x2F;随机图片</span><br><span class="line">            &quot;price&quot;:&#39;@integer(1000,2000)&#39;, &#x2F;&#x2F;随机价格</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端测试</category>
        <category>Mockjs</category>
      </categories>
      <tags>
        <tag>Mockjs</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper安装</title>
    <url>/%E5%90%8E%E7%AB%AF/zookeeper%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="1-下载zookeeper"><a href="#1-下载zookeeper" class="headerlink" title="1.下载zookeeper"></a>1.下载zookeeper</h2><p><a href="https://downloads.apache.org/zookeeper/">地址</a></p>
<blockquote>
<p>下载.tar.gz版本的包</p>
</blockquote>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><blockquote>
<p>注意：需要安装java环境</p>
</blockquote>
<h3 id="2-1解压zookeeper"><a href="#2-1解压zookeeper" class="headerlink" title="2.1解压zookeeper"></a>2.1解压zookeeper</h3><p><code>tar -zxvf zookeeper-3.4.14.tar.gz</code></p>
<blockquote>
<p>若没有权限，使用 <code>chmod 777 zookeeper-3.4.14.tar.gz</code></p>
</blockquote>
<h3 id="2-2修改配置文件"><a href="#2-2修改配置文件" class="headerlink" title="2.2修改配置文件"></a>2.2修改配置文件</h3><ol>
<li>进入<code>conf</code>文件夹下</li>
<li>将<code>zoo_sample.cfg</code>复制一份<blockquote>
<p>cp zoo_sample.cfg zoo.cfg</p>
</blockquote>
</li>
<li>使用vi命令打开<code>zoo.cfg</code>并修改配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将dataDir改为以下新建的目录</p>
<ol>
<li>在<code>zookeeper</code>目录下新建data(<code>mkdir data</code>)文件夹</li>
<li>将dataDir设置为data的路径(例如:<code>/usr/soft/zookeeper-3.4.14/data</code>)</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="3-启动zookeeper"><a href="#3-启动zookeeper" class="headerlink" title="3. 启动zookeeper"></a>3. 启动zookeeper</h2><p>在zookeeper目录下的bin文件夹中，使用以下命令启动zookeeper:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkServer.sh start</span><br></pre></td></tr></table></figure>
<h2 id="5-检查zookeeper启动情况"><a href="#5-检查zookeeper启动情况" class="headerlink" title="5. 检查zookeeper启动情况"></a>5. 检查zookeeper启动情况</h2><p>我们可以使用以下命令查看zookeeper的启动状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkServer.sh status</span><br></pre></td></tr></table></figure>
<h2 id="6-设置zookeeper开机启动"><a href="#6-设置zookeeper开机启动" class="headerlink" title="6.设置zookeeper开机启动"></a>6.设置zookeeper开机启动</h2><ol>
<li>进入<code>/etc/init.d</code>目录</li>
<li>创建文件<code>zookeeper</code>，并添加脚本：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#chkconfig:2345 20 90</span><br><span class="line">#description:zookeeper</span><br><span class="line">#processname:zookeeper</span><br><span class="line">ZK_PATH&#x3D;&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;soft&#x2F;jdk1.8.0_202</span><br><span class="line">case $1 in</span><br><span class="line">         start) sh  $ZK_PATH&#x2F;bin&#x2F;zkServer.sh start;;</span><br><span class="line">         stop)  sh  $ZK_PATH&#x2F;bin&#x2F;zkServer.sh stop;;</span><br><span class="line">         status) sh  $ZK_PATH&#x2F;bin&#x2F;zkServer.sh status;;</span><br><span class="line">         restart) sh $ZK_PATH&#x2F;bin&#x2F;zkServer.sh restart;;</span><br><span class="line">         *)  echo &quot;require start|stop|status|restart&quot;  ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li>
<li>保存脚本之后，执行以下命令将其注册为服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig --add zookeeper</span><br></pre></td></tr></table></figure></li>
<li>测试是否启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 init.d]# service zookeeper start</span><br><span class="line">env: &#x2F;etc&#x2F;init.d&#x2F;zookeeper: 权限不够</span><br><span class="line">[root@centos7 init.d]# chmod +x zookeeper</span><br><span class="line">[root@centos7 init.d]# </span><br><span class="line">[root@centos7 init.d]# service zookeeper start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: &#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@centos7 init.d]# service zookeeper status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: &#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">Mode: standalone</span><br><span class="line">[root@centos7 init.d]# ps -ef|grep zookeeper</span><br><span class="line">root       4905      1  1 23:24 pts&#x2F;0    00:00:00 &#x2F;usr&#x2F;soft&#x2F;jdk1.8.0_202&#x2F;bin&#x2F;java -Dzookeeper.log.dir&#x3D;. -Dzookeeper.root.logger&#x3D;INFO,CONSOLE -cp &#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;zookeeper-server&#x2F;target&#x2F;classes:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;build&#x2F;classes:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;zookeeper-server&#x2F;target&#x2F;lib&#x2F;*.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;build&#x2F;lib&#x2F;*.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-log4j12-1.7.25.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.7.25.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;netty-3.10.6.Final.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;log4j-1.2.17.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;jline-0.9.94.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;lib&#x2F;audience-annotations-0.5.0.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;zookeeper-3.4.14.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;zookeeper-server&#x2F;src&#x2F;main&#x2F;resources&#x2F;lib&#x2F;*.jar:&#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;conf: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only&#x3D;false org.apache.zookeeper.server.quorum.QuorumPeerMain &#x2F;usr&#x2F;soft&#x2F;zookeeper-3.4.14&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">root       4985   4732  0 23:25 pts&#x2F;0    00:00:00 grep --color&#x3D;auto zookeeper</span><br><span class="line">[root@centos7 init.d]# </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>chai断言库学习</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/chai%E6%96%AD%E8%A8%80%E5%BA%93.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="expect-预期"><a href="#expect-预期" class="headerlink" title="expect(预期)"></a>expect(预期)</h2><p>expect属于BDD(行为驱动开发)样式风格</p>
<h3 id="引入expect"><a href="#引入expect" class="headerlink" title="引入expect"></a>引入expect</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//expect是测试输入值的预期结果</span></span><br><span class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>).expect;</span><br><span class="line"><span class="comment">//基本用法(value为测试值)</span></span><br><span class="line">expect(value)...</span><br></pre></td></tr></table></figure>
<h3 id="语言链"><a href="#语言链" class="headerlink" title="语言链"></a>语言链</h3><ul>
<li>to</li>
<li>be</li>
<li>been</li>
<li>is</li>
<li>that : 限定的意思</li>
<li>which</li>
<li>and</li>
<li>has</li>
<li>have</li>
<li>with</li>
<li>at</li>
<li>of</li>
<li>same</li>
<li>but</li>
<li>does</li>
<li>still</li>
</ul>
<hr>
<h3 id="not"><a href="#not" class="headerlink" title=".not"></a>.not</h3><p>否定链中随后的所有断言</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//期望函数不会抛出异常</span></span><br><span class="line">expect(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;).to.not.throw();</span><br><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;).to.not.have.property(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>]).to.be.an(<span class="string">&#x27;array&#x27;</span>).that.does.not.include(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="deep"><a href="#deep" class="headerlink" title=".deep"></a>.deep</h3><p>全等，但不同于(==),主要用于对象的比较</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预期值全等与&#x27;&#123;a:1&#125;&#x27;,但并不严格相等(引用地址不同)</span></span><br><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;).to.deep.equal(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target array deeply (but not strictly) includes `&#123;a: 1&#125;`</span></span><br><span class="line">expect([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]).to.deep.include(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">expect([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]).to.not.include(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target object deeply (but not strictly) includes `x: &#123;a: 1&#125;`</span></span><br><span class="line">expect(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;).to.deep.include(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;);</span><br><span class="line">expect(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;).to.not.include(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target array deeply (but not strictly) has member `&#123;a: 1&#125;`</span></span><br><span class="line">expect([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]).to.have.deep.members([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]);</span><br><span class="line">expect([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]).to.not.have.members([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target set deeply (but not strictly) has key `&#123;a: 1&#125;`</span></span><br><span class="line">expect(<span class="keyword">new</span> <span class="built_in">Set</span>([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;])).to.have.deep.keys([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]);</span><br><span class="line">expect(<span class="keyword">new</span> <span class="built_in">Set</span>([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;])).to.not.have.keys([&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target object deeply (but not strictly) has property `x: &#123;a: 1&#125;`</span></span><br><span class="line">expect(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;).to.have.deep.property(<span class="string">&#x27;x&#x27;</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">expect(&#123;<span class="attr">x</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;).to.not.have.property(<span class="string">&#x27;x&#x27;</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="nested"><a href="#nested" class="headerlink" title=".nested"></a>.nested</h3><p>嵌套.nested (不能和.own一起用)———–在property和include之前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在链中之后的断言将启用点和方括号符号</span></span><br><span class="line">expect(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]&#125;&#125;).to.have.nested.property(<span class="string">&#x27;a.b[1]&#x27;</span>);</span><br><span class="line">expect(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]&#125;&#125;).to.nested.include(&#123;<span class="string">&#x27;a.b[1]&#x27;</span>: <span class="string">&#x27;y&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果 &quot;.&quot;或是[]是属性名称的一部分,则可以通过在其前面添加两个反斜杠对其进行转义</span></span><br><span class="line">expect(&#123;<span class="string">&#x27;.a&#x27;</span>: &#123;<span class="string">&#x27;[b]&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;&#125;).to.have.nested.property(<span class="string">&#x27;\\.a.\\[b\\]&#x27;</span>);</span><br><span class="line">expect(&#123;<span class="string">&#x27;.a&#x27;</span>: &#123;<span class="string">&#x27;[b]&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;&#125;).to.nested.include(&#123;<span class="string">&#x27;\\.a.\\[b\\]&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="own"><a href="#own" class="headerlink" title=".own"></a>.own</h3><p>忽略继承的属性(own可理解为自己的)———–在property和include之前</p>
<blockquote>
<p>不可以.nested一起用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.b = <span class="number">2</span>;</span><br><span class="line">expect(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;).to.have.own.property(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">expect(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;).to.not.have.own.property(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="ordered"><a href="#ordered" class="headerlink" title=".ordered"></a>.ordered</h3><p>导致链中跟随的所有.members断言要求成员具有相同的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>]).to.have.ordered.members([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">  .but.not.have.ordered.members([<span class="number">2</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="any"><a href="#any" class="headerlink" title=".any"></a>.any</h3><p>导致链中跟随的所有.keys断言只要求目标具有至少一个给定的键。这与.all相反，.all要求目标具有所有给定的键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;).to.not.have.any.keys(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有关何时使用.any或.all的指导，请查看.keys</p>
</blockquote>
<hr>
<h3 id="all"><a href="#all" class="headerlink" title=".all"></a>.all</h3><p>导致链中跟随的所有.keys断言要求目标具有所有给定的键。这与.any正好相反，后者只要求目标至少具有一个给定的键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;).to.have.all.keys(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，当在链的前面添加.all和.any时，默认情况下使用.all。但是，通常最好还是添加.all，因为它提高了可读性。</p>
</blockquote>
<hr>
<h3 id="a-type-msg"><a href="#a-type-msg" class="headerlink" title=".a(type[,msg])"></a>.a(type[,msg])</h3><p>类型检查: 断言目标的类型等于给定的字符串类型。类型不区分大小写。</p>
<blockquote>
<p>type如果是以元音开头的,用.an()。 其他的用.a()</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="string">&#x27;foo&#x27;</span>).to.be.a(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;).to.be.an(<span class="string">&#x27;object&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在对同一目标做出更多断言之前，最好使用.a检查目标的类型。这样，您就可以避免根据目标类型执行不同操作的任何断言出现意外行为。</span></span><br><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).to.be.an(<span class="string">&quot;array&quot;</span>).that.includes(<span class="number">2</span>); <span class="comment">//that可理解为限定的意思</span></span><br><span class="line">expect([]).to.be.an(<span class="string">&quot;array&quot;</span>).that.is.empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以这么写，增加可读性</span></span><br><span class="line">expect(&#123; <span class="attr">b</span>: <span class="number">2</span> &#125;).to.have.a.property(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以加参数，表示断言失败后显示的信息</span></span><br><span class="line"><span class="comment">// expect(2).to.be.a(&quot;string&quot;, &quot;why fail??&quot;);</span></span><br><span class="line"><span class="comment">// expect(1, &quot;why fail??&quot;).to.be.a(&quot;string&quot;);</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="include-val-msg"><a href="#include-val-msg" class="headerlink" title=".include(val[,msg])"></a>.include(val[,msg])</h3><p>断言目标中是否包含给定的值(默认情况下使用严格相等,但是可以使用.deep)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="string">&#x27;foobar&#x27;</span>).to.include(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).to.include(<span class="number">2</span>);</span><br><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;).to.include(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="ok"><a href="#ok" class="headerlink" title=".ok"></a>.ok</h3><p>断言目标是一个真实值(在布尔上下文中被认为是真实的)。然而，通常最好断言目标是严格地(===)或完全等于其期望值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;).to.be.ok;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="true"><a href="#true" class="headerlink" title=".true"></a>.true</h3><p>断言目标严格地(===)等于true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">true</span>).to.be.true;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="false"><a href="#false" class="headerlink" title=".false"></a>.false</h3><p>断言目标严格地(===)等于false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">false</span>).to.be.false;</span><br></pre></td></tr></table></figure>
<h3 id="null"><a href="#null" class="headerlink" title=".null"></a>.null</h3><p>断言目标严格地(===)等于null</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">null</span>).to.be.null;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="undefined"><a href="#undefined" class="headerlink" title=".undefined"></a>.undefined</h3><p>断言目标严格地(===)等于undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">undefined</span>).to.be.undefined;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="NaN"><a href="#NaN" class="headerlink" title=".NaN"></a>.NaN</h3><p>断言目标严格地(===)等于NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">NaN</span>).to.be.NaN;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="exist"><a href="#exist" class="headerlink" title=".exist"></a>.exist</h3><p>断言目标不是严格地(===)等于null或undefined。然而，通常最好是断言目标等于它的期望值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="literal">null</span>).to.be.null; <span class="comment">// 推荐</span></span><br><span class="line">expect(<span class="literal">null</span>).to.not.exist; <span class="comment">// 不推荐</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="empty"><a href="#empty" class="headerlink" title=".empty"></a>.empty</h3><p>当目标是一个字符串或数组时，.empty断言目标的length属性严格地(===)等于0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect([]).to.be.empty;</span><br><span class="line">expect(<span class="string">&#x27;&#x27;</span>).to.be.empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象也可以</span></span><br><span class="line">expect(&#123;&#125;).to.be.empty;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="arguments"><a href="#arguments" class="headerlink" title=".arguments"></a>.arguments</h3><p>断言目标是arguments对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  expect(<span class="built_in">arguments</span>).to.be.arguments;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="equal-val-msg"><a href="#equal-val-msg" class="headerlink" title=".equal(val[,msg])"></a>.equal(val[,msg])</h3><p>断言目标严格地(===)等于给定的val</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="number">1</span>).to.equal(<span class="number">1</span>);</span><br><span class="line">expect(<span class="string">&#x27;foo&#x27;</span>).to.equal(<span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="eql-obj-msg"><a href="#eql-obj-msg" class="headerlink" title=".eql(obj[,msg])"></a>.eql(obj[,msg])</h3><p>断言目标与给定的obj深度相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标对象深度(但不严格)等于&#123;a: 1&#125;</span></span><br><span class="line">expect(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;).to.eql(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;).but.not.equal(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象深度(但不严格)等于[1,2]</span></span><br><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>]).to.eql([<span class="number">1</span>, <span class="number">2</span>]).but.not.equal([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>chai</category>
      </categories>
      <tags>
        <tag>chai</tag>
      </tags>
  </entry>
  <entry>
    <title>navigation连接mysql出现1251错误</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="navigation连接mysql出现1251错误"><a href="#navigation连接mysql出现1251错误" class="headerlink" title="navigation连接mysql出现1251错误"></a>navigation连接mysql出现1251错误</h2><p><a href="https://blog.csdn.net/qq_37939980/article/details/95953320">解决方法</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>线性结构</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h2><p>数组的缺点：</p>
<ul>
<li>数组的创建通常需要申请一段连续的内存空间（一整块的内存），并且大小是固定的（大多数编程语言是固定的，JavaScript中是会自己进行扩展的），所以当数组不能满足容量需求时，需要扩容</li>
<li>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</li>
</ul>
<h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><p>栈结构像生活中的水桶一样，只能在一端倒水或加水。</p>
<p><img src="http://images.cnitblog.com/blog/587773/201404/151922459639113.gif" alt="点击查看源网页"></p>
<p>如上图所示：栈是一种受限的线性表，它的特点是后进先出（LIFO）</p>
<ul>
<li>栈仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，另一端称为栈底。</li>
<li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之称为新的栈顶元素；</li>
<li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li>
</ul>
<p><strong>函数调用栈：</strong>函数之间的调用是使用栈结构实现的。假设有A、B、C三个函数，调用次序为A–&gt;B，B—&gt;C。<br>首先是函数A执行后进栈，调用函数B后，B进栈，调用函数C后，C进栈，C函数执行完毕后出栈，然后是函数B执行完毕后出栈，最后是A。</p>
<h3 id="实现栈结构的两种方式"><a href="#实现栈结构的两种方式" class="headerlink" title="实现栈结构的两种方式"></a>实现栈结构的两种方式</h3><ol>
<li>基于数组</li>
<li>基于链表</li>
</ol>
<p>由于JavaScript中没有链表,所以选择采用数据实现。<br>栈常见的操作：</p>
<ul>
<li><code>push(element)</code>: 添加一个新元素到栈顶位置</li>
<li><code>pop()</code>: 移除栈顶元素,同时返回被移除的元素</li>
<li><code>peek()</code>: 返回栈顶的元素,不对栈顶做任何修改</li>
<li><code>isEmpty()</code>: 如果栈里没有任何元素就返回true,否则返回false</li>
<li><code>size()</code>: 返回栈里的元素个数</li>
<li><code>toString()</code>: 将栈结构的内容以字符形式返回</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 栈的属性</span></span><br><span class="line">        <span class="built_in">this</span>.items = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 元素入栈</span></span><br><span class="line">    <span class="comment">// element:要入栈的元素</span></span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 元素出栈</span></span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看栈顶元素</span></span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断栈结构是否为空</span></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回栈结构的元素个数</span></span><br><span class="line">    <span class="function"><span class="title">size</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将栈结构的内容以字符形式返回</span></span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h2><p>队列结构也是一种受限的线性表，它就像水管一样，只允许一头进，另一头出。<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578992814764&di=92c6648b568428dec585417bde411923&imgtype=0&src=http%3A%2F%2Ffile.koolearn.com%2F20141012%2F14130787585637.jpg" alt="点击查看源网页"></p>
<blockquote>
<p>队列的特点是先进先出(FIFO)</p>
</blockquote>
<h3 id="实现栈结构的两种方式-1"><a href="#实现栈结构的两种方式-1" class="headerlink" title="实现栈结构的两种方式"></a>实现栈结构的两种方式</h3><ol>
<li>基于数组</li>
<li>基于链表</li>
</ol>
<p>由于JavaScript中没有链表,所以选择采用数据实现。<br>队列的常见操作：</p>
<ul>
<li><code>enqueue(element)</code>:向队列尾部添加一个(或多个新的项)</li>
<li><code>dequeue()</code>: 移除队列的第一项(即排在队列最前面的项),并返回被移除的元素</li>
<li><code>front()</code>:返回队列中第一个元素</li>
<li><code>isEmpty()</code>: 如果队列中不包含任何元素,返回true,否则返回false</li>
<li><code>size()</code>: 返回队列包含的元素个数</li>
<li><code>toString()</code>: 将队列中的内容,转成字符串形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items=[];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//enqueu(element):向队列尾部添加一个(或多个新的项)</span></span><br><span class="line">    <span class="function"><span class="title">enqueue</span>(<span class="params">elements</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(elements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dequeue(): 移除队列的第一项(即排在队列最前面的项),并返回被移除的元素</span></span><br><span class="line">    <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//front():返回队列中第一个元素</span></span><br><span class="line">    <span class="function"><span class="title">front</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//isEmpty(): 如果队列中不包含任何元素,返回true,否则返回false</span></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//size(): 返回队列包含的元素个数</span></span><br><span class="line">    <span class="function"><span class="title">size</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString(): 将队列中的内容,转成字符串形式</span></span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="击鼓传花游戏实现"><a href="#击鼓传花游戏实现" class="headerlink" title="击鼓传花游戏实现"></a>击鼓传花游戏实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 击鼓传花游戏规则</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">几个朋友一起玩一个游戏,围成一圈,开始数数,数到某个数字的人自动淘汰.</span></span><br><span class="line"><span class="comment">最后剩下的这个人会自动获胜</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList,num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">    nameList.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;名字:&#x27;</span>,element);</span><br><span class="line">        queue.enqueue(element);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            queue.enqueue(queue.dequeue());            </span><br><span class="line">        &#125;</span><br><span class="line">        queue.dequeue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(queue.front());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nameList = [<span class="string">&#x27;Lilei&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>,<span class="string">&#x27;Davi&#x27;</span>,<span class="string">&#x27;Jhon&#x27;</span>,<span class="string">&#x27;Jiao&#x27;</span>];</span><br><span class="line">passGame(nameList,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h2><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的实现机制完全不同。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>什么是链表？</p>
<p>链表类似于火车：有一个火车头，火车头会连接一个车厢（节点），节点上有乘客（数据），并且这个车厢会连接下一个节点。</p>
<p><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1579095340118.png" alt="1579095340118"></p>
<p>链表是由头(头指针)和节点组成，节点包括一个数据区和一个地址域（指向下一个节点）</p>
<p>相对于数组，链表有一些优点：</p>
<ul>
<li>内存空间不是必须连续的，可以充分利用计算机的内存，实现灵活的内存动态管理。</li>
<li>链表不必在创建时就确定大小，并且可以无限的延伸下去</li>
<li>链表在插入和删除数据时，效率更高</li>
</ul>
<p>相对于数组，链表有一些缺点：</p>
<ul>
<li>链表访问任何一个位置的元素时，都需要从头（即head）开始访问（无法跳过第一个元素访问任何一个元素）</li>
<li>无法通过下标直接访问元素，需要从头一个个访问，知道找到对应的元素。</li>
</ul>
<blockquote>
<p>注意:目前我们所说的链表是单向链表,后面会讲到双向链表</p>
</blockquote>
<p>代码实现:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.length = <span class="number">0</span>;    <span class="comment">//存放链表中元素的个数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    链表常见的操作:</span></span><br><span class="line"><span class="comment">    1.append(element): 向列表尾部添加一个新的节点</span></span><br><span class="line"><span class="comment">    2.insert(position,element): 向列表的特定位置插入一个新的节点</span></span><br><span class="line"><span class="comment">    3.get(position): 获取对应位置的元素</span></span><br><span class="line"><span class="comment">    4.indexOf(element): 返回元素在列表中的索引。如果列表中没有范元素返回-1</span></span><br><span class="line"><span class="comment">    5.update(position,element):修改某个位置的元素</span></span><br><span class="line"><span class="comment">    6.removeAt(position): 从列表中的特定位置移除一项</span></span><br><span class="line"><span class="comment">      remove(element): 从列表中删除一项</span></span><br><span class="line"><span class="comment">    7.isEmpty():判断链表是否为空</span></span><br><span class="line"><span class="comment">    8.size(): 返回链表包含的元素个数</span></span><br><span class="line"><span class="comment">    9.toString():将链表中的节点转换成字符串返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// append(element): 向列表尾部添加一个新的节点</span></span><br><span class="line">    <span class="function"><span class="title">append</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="comment">// 判断是否添加的是第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="comment">// 判断节点指向的下一个节点的next属性是否为null</span></span><br><span class="line">            <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length +=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert(position,element): 向列表的特定位置插入一个新的节点</span></span><br><span class="line">    <span class="comment">// position从小标0开始</span></span><br><span class="line">    <span class="function"><span class="title">insert</span>(<span class="params">position,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            node.next = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="built_in">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = current;</span><br><span class="line">            previous.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length +=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get(position): 获取对应位置的元素</span></span><br><span class="line">    <span class="comment">// position从下标0开始</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current.data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// indexOf(element): 返回元素在列表中的索引。如果列表中没有范元素返回-1</span></span><br><span class="line">    <span class="function"><span class="title">indexOf</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update(position,element):修改某个位置的元素</span></span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">position,element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.data = element;</span><br><span class="line">        <span class="keyword">return</span> current.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// removeAt(position): 从列表中的特定位置移除一项</span></span><br><span class="line">    <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length -=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// remove(element): 从列表中删除一项</span></span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(element);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// isEmpty():判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// size(): 返回链表包含的元素个数.</span></span><br><span class="line">    <span class="function"><span class="title">size</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// toString():将链表中的节点转换成字符串返回</span></span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> listString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            listString += current.data + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> link = <span class="keyword">new</span> LinkList();</span><br><span class="line">link.append(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">link.append(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">link.append(<span class="string">&quot;lk&quot;</span>);</span><br><span class="line">link.append(<span class="string">&quot;lk3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(link.remove(<span class="string">&#x27;lk&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(link.toString());</span><br></pre></td></tr></table></figure>
<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581165485908.png" alt="1581165485908"></p>
<blockquote>
<p>特点:</p>
<ul>
<li>可以使用一个head和tail分别指向头部和尾部的节点</li>
<li>每个节点都由三部分组成：前一个节点的指针(<code>prev</code>)/保存的元素(<code>item</code>)/后一个节点的指针(next)</li>
<li>双向链表的第一个节点的<code>prev</code>是<code>null</code></li>
<li>双向链表的最后的节点的<code>next</code>是<code>null</code></li>
</ul>
</blockquote>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>链地址法解决冲突的思路是,在发生重复的下标值处存放一个链表(数组),链表(数组)内再依次存放数据</p>
<p><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1582466123510.png" alt="1582466123510"></p>
]]></content>
      <categories>
        <category>数据结构和算法(JavaScript)</category>
      </categories>
      <tags>
        <tag>数据结构和算法(JavaScript)</tag>
      </tags>
  </entry>
  <entry>
    <title>2017-2019年总结</title>
    <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/2017-2019%E5%B9%B4%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>我是在大一（2017年）加入学校工作室才接触到了编程从此便喜欢上了它。一开始还不知道什么是前端，只是看老师推荐的视频，做点工作室以前的项目练手。也是在这段时间慢慢对前端有了一定了解。</p>
<a id="more"></a>

<h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><p>​    我在高中的时候有上过计算机课,老师当时教的是<code>VisualBasic</code>，我可能是脑子太笨了，根本听不懂。但是我还是和喜欢编程的。高中阶段还有去买过《C++从入门到精通》和网页开发的书籍，虽然买来也买怎么看过，但那时编程已经在我的心中萌芽了。</p>
<p>​    高考结束后填报志愿，因为我的分数只能上个专科，加上对学校计算机专业也不是很了解，所以只要是更计算机挂钩的我我都填了。后来来到了温州科技职业学院，专业是计算机网络技术。</p>
<p>​    机缘巧合之下，我的一个任课老师说他的工作室要招新，有兴趣的可以去报名，就这样我加入了农科软件工作室。可以说他是我编程之路上的启蒙老师，为我指明了一个方向。加入工作室还没有立马上手项目，老师让我们去看视频学习，主要有以下：</p>
<ul>
<li><a href="https://edu.51cto.com/course/166.html">李炎恢老师的JavaScript入门视频</a></li>
<li><a href="https://edu.51cto.com/course/699.html">李炎恢老师的jquery入门视频</a></li>
<li>ASP.NET实战ADO.NET数据库</li>
<li>三层架构</li>
<li><code>BootStrap</code></li>
<li>HTML5和CSS3新特性</li>
</ul>
<p>刚看完这些视频的时候我很懵，我是谁？我在哪？我要干嘛？基本上看完就忘了。我到现在还记得<code>JavaScript</code>看到原型的时候就看不懂了，一直是云里雾里的状态。三层架构也是，看完了让我去搭一个项目还要再看着视频一步一步来。直到2018暑假的工作室集训，做了我人生中的第一个实战项目（订餐系统）之后，很多的疑惑才烟消云散。</p>
<h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><p>​    2018暑假的工作室集训，做了订餐系统，这是一个用了<code>ASP.NET</code>、三层架构和<code>bootstrap</code>的项目。做完这个项目之后让我对项目开发流程有了一定的认识，当更多的是锻炼的我的编程思维。</p>
<p>​    在做完了订餐系统之后，老师推荐我去学习<code>ASP.NET MVC5</code>和<code>Vue</code>，并给了我学校请假系统的源码，让我在过年前多看看，熟悉系统的流程。因为工作室应公寓中心的要求需要对其作出一些修改，老师打算把这个交给我来做（把系统从三层架构改为MVC模式）。这项任务我是在18年寒假完成的。</p>
<h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><p>重构完请假系统后，我在想用<code>Vue</code>来开发请假系统，但是在开始阶段便遇到了一些问题:</p>
<ul>
<li>怎么用<code>vue</code>开发项目</li>
<li>怎么做数据交互</li>
<li>源代码管理起来麻烦</li>
</ul>
<p>针对上述问题，我学习了用<code>vue-cli</code>创建项目，了解了前后端分离的开发架构，并学习了<code>ASP.NET Web API 2</code>，学习了<code>git</code>。</p>
<p>在开发过程中,我又遇到了跨域问题,便学习了跨域的解决方案和<code>Nginx</code>的使用。<br>开发完<code>Vue版的请假系统后</code>，我又学习了：</p>
<ul>
<li><code>Webpack</code></li>
<li><code>TypeScript</code></li>
<li><code>ECMAScript6</code></li>
<li><code>Node</code></li>
<li><code>React</code></li>
<li><code>MongoDB</code></li>
<li><code>Koa2</code></li>
<li><code>Jenkins</code></li>
</ul>
<p>暑假偷偷学的<code>Java</code>技术栈(不过后来貌似一直没有用上):</p>
<ul>
<li><code>JavaEE</code></li>
<li><code>Maven</code></li>
<li><code>JDBC</code>、<code>Servlet</code></li>
<li><code>Spring</code>、<code>Spring MVC</code>、<code>Spring Boot</code></li>
<li><code>mybatis</code></li>
</ul>
<p>2020年要做的事：</p>
<ul>
<li>学习服务端渲染</li>
<li>学习<code>WebAssembly</code></li>
<li>学习<code>pwa</code></li>
<li>能熟练使用<code>TypeScript</code></li>
<li>继续学习<code>node</code></li>
</ul>
]]></content>
      <categories>
        <category>程序人生</category>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5 --canvas学习</title>
    <url>/%E5%89%8D%E7%AB%AF/HTML5/canvas.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="1-canvas网页元素"><a href="#1-canvas网页元素" class="headerlink" title="1.canvas网页元素"></a>1.canvas网页元素</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">  您的浏览器不支持canvas！</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果浏览器不支持canvas标签，则浏览器就会显示里面的文本</p>
</blockquote>
<hr>
<h2 id="2-获取canvas画笔"><a href="#2-获取canvas画笔" class="headerlink" title="2.获取canvas画笔"></a>2.获取canvas画笔</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">getContext方法指定参数2d,表示改canvas节点用于生成2D图案（即平面图片）</span></span><br><span class="line"><span class="comment">如果参数是webgl，就表示用于生成3D图案（需要学习WebGL API）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-绘制路径"><a href="#3-绘制路径" class="headerlink" title="3.绘制路径"></a>3.绘制路径</h2><p><strong>图形的基本元素是路径</strong></p>
<p><strong>路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</strong></p>
<p><strong>一个路径，甚至一个子路径，都是闭合的。</strong></p>
<h3 id="3-1使用路径绘制图形的步骤："><a href="#3-1使用路径绘制图形的步骤：" class="headerlink" title="3.1使用路径绘制图形的步骤："></a>3.1使用路径绘制图形的步骤：</h3><ol>
<li>创建路径起始点</li>
<li>调用绘制方法去绘制出路径</li>
<li>把路径封闭</li>
<li>一旦路径生成，通过描边或填充路径区域来渲染图形。</li>
</ol>
<blockquote>
<p>需要用到的方法:<br><br>1.beginPath()<br>新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径<br>2.moveTo(x, y)<br><br>把画笔移动到指定的坐标(x, y)。相当于设置路径的起始点坐标。<br><br>3.closePath()<br><br>闭合路径之后，图形绘制命令又重新指向到上下文中<br><br>4.stroke()<br><br>通过线条来绘制图形轮廓<br><br>5.fill()<br><br>通过填充路径的内容区域生成实心的图形</p>
</blockquote>
<h3 id="3-2绘制线段-lineTo-x-y"><a href="#3-2绘制线段-lineTo-x-y" class="headerlink" title="3.2绘制线段:lineTo(x,y)"></a>3.2绘制线段:lineTo(x,y)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.beginPath(); <span class="comment">//新建一条path</span></span><br><span class="line">    ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标  </span></span><br><span class="line">    ctx.lineTo(<span class="number">50</span>,<span class="number">100</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(50, 100)的直线.</span></span><br><span class="line">    ctx.lineTo(<span class="number">100</span>,<span class="number">100</span>); <span class="comment">//绘制一条从(50,100)到指定坐标(50, 100)的直线.</span></span><br><span class="line">    ctx.stroke(); <span class="comment">//绘制路径。</span></span><br><span class="line">    <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">    ctx.closePath();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">draw();</span><br></pre></td></tr></table></figure>
<h3 id="3-3绘制圆-圆弧-arc-、arcTo"><a href="#3-3绘制圆-圆弧-arc-、arcTo" class="headerlink" title="3.3绘制圆/圆弧:arc()、arcTo()"></a>3.3绘制圆/圆弧:arc()、arcTo()</h3><ol>
<li>arc(x, y, r, startAngle, endAngle, anticlockwise)</li>
</ol>
<ul>
<li>以(x, y) 为圆心，</li>
<li>以r 为半径，</li>
<li>从 startAngle 弧度开始到endAngle弧度结束。</li>
<li>anticlosewise 是布尔值，true 表示逆时针，false 表示顺时针(默认是顺时针)。</li>
</ul>
<blockquote>
<p>这里的度数都是弧度。<br><br>0 弧度是指的 x 轴正方向<br><br><code>radians=(Math.PI/180)*degrees</code>   //角度转换成弧度，Math.PI = Π = 180度</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">50</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI); <span class="comment">//画一个圆</span></span><br><span class="line">ctx.fillStyle=<span class="string">&quot;black&quot;</span>;  <span class="comment">//填充圆为黑色</span></span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI); <span class="comment">//画一个半圆</span></span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>arcTo(x1, y1, x2, y2, radius)</li>
</ol>
<blockquote>
<p>根据给定的控制点和半径画一段圆弧<br><br>参数x1、y1为控制点1的坐标，参数x2、y2为控制点2的坐标<br><br>arcTo方法说明：<br><br>1.绘制的弧形是由两条切线所决定。<br><br>2.第 1 条切线：起始点和控制点1决定的直线。<br><br>3.第 2 条切线：控制点1 和控制点2决定的直线。<br><br>4.绘制的圆弧就是与这两条直线相切的圆弧。<br></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.arcTo(<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">40</span>); <span class="comment">//画一个圆弧</span></span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-渐变"><a href="#4-渐变" class="headerlink" title="4.渐变"></a>4.渐变</h2><p>创建渐变的两种方式：</p>
<ul>
<li><code>createLinearGradient(x,y,x1,y1)</code> - 创建线条渐变</li>
<li><code>createRadialGradient(x,y,r,x1,y1,r1)</code> - 创建一个径向/圆渐变</li>
</ul>
<blockquote>
<p>当我们使用渐变对象，必须使用两种或两种以上的停止颜色。<br><br>addColorStop()方法指定颜色停止，参数使用坐标来描述，可以是0至1。<br><br>可以设置<code>fillStyle</code>和<code>strokeStyle</code>的值为渐变对象，然后绘制图形</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="comment">// 创建线条渐变</span></span><br><span class="line"><span class="keyword">let</span> grd = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">0</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0.3</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;white&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">1</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">ctx.fillStyle=grd;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">150</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个径向/圆渐变</span></span><br><span class="line"><span class="keyword">let</span> grd = ctx.createLinearGradient(<span class="number">75</span>,<span class="number">50</span>,<span class="number">5</span>,<span class="number">90</span>,<span class="number">60</span>,<span class="number">100</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0.3</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;white&quot;</span>);</span><br><span class="line">grd.addColorStop(<span class="number">1</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">ctx.fillStyle=grd;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">150</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5-添加样式和颜色"><a href="#5-添加样式和颜色" class="headerlink" title="5.添加样式和颜色"></a>5.添加样式和颜色</h2><h3 id="5-1-颜色"><a href="#5-1-颜色" class="headerlink" title="5.1 颜色"></a>5.1 颜色</h3><ul>
<li><code>fillStyle=color</code> 设置填充的颜色</li>
<li><code>strokeStyle = color</code> 设置图形轮廓的颜色</li>
</ul>
<blockquote>
<ol>
<li>color 可以是表示css颜色值的字符串(rgba)、渐变对象或者图案对象</li>
<li>默认情况下，线条和填充颜色都是黑色。</li>
<li>一旦您设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值。如果你要给每个图形上不同的颜色，你需要重新设置 fillStyle 或 strokeStyle 的值。</li>
</ol>
</blockquote>
<h3 id="5-2-线条样式"><a href="#5-2-线条样式" class="headerlink" title="5.2 线条样式"></a>5.2 线条样式</h3><h4 id="5-2-1-线宽"><a href="#5-2-1-线宽" class="headerlink" title="5.2.1 线宽"></a>5.2.1 线宽</h4><p>线宽。只能是正值。默认是 1.0。</p>
<p><strong>起始点和终点的连线为中心，上下各占线宽的一半。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>
<h4 id="5-2-2-线条末端样式"><a href="#5-2-2-线条末端样式" class="headerlink" title="5.2.2 线条末端样式"></a>5.2.2 线条末端样式</h4><p><code>lineCap = type</code>,共有 3 个值：</p>
<ul>
<li>butt：线段末端以方形结束</li>
<li>round：线段末端以圆形结束</li>
<li>square：线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。</li>
</ul>
<h4 id="5-2-3-线条转折处的样式"><a href="#5-2-3-线条转折处的样式" class="headerlink" title="5.2.3 线条转折处的样式"></a>5.2.3 线条转折处的样式</h4><p>同一个 path 内，设定线条与线条间接合处的样式。</p>
<p>共有 3 个值 round, bevel 和 miter：</p>
<ol>
<li><p>round 通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。</p>
</li>
<li><p>bevel 在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。</p>
</li>
<li><p>miter(默认) 通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。</p>
</li>
</ol>
<h4 id="5-2-4-虚线"><a href="#5-2-4-虚线" class="headerlink" title="5.2.4 虚线"></a>5.2.4 虚线</h4><p>用 <code>setLineDash</code> 方法和 <code>lineDashOffset</code> 属性来制定虚线样式。 <code>setLineDash</code> 方法接受一个数组，来指定线段与间隙的交替；<code>lineDashOffset</code>属性设置起始偏移量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.setLineDash([<span class="number">20</span>, <span class="number">5</span>]);  <span class="comment">// [实线长度, 间隙长度]</span></span><br><span class="line">ctx.lineDashOffset = -<span class="number">0</span>;</span><br><span class="line">ctx.strokeRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">210</span>, <span class="number">210</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ctx.getLineDash()); <span class="comment">//[20,5]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>getLineDash() 返回一个包含当前虚线样式，长度为非负偶数的数组。</p>
</blockquote>
<hr>
<h2 id="6-绘制矩形"><a href="#6-绘制矩形" class="headerlink" title="6.绘制矩形"></a>6.绘制矩形</h2><p><code>&lt;canvas&gt;</code> 只支持一种原生的图形绘制：矩形。所有其他图形都至少需要生成一种路径 (path)。</p>
<p>canvast 提供了三种方法绘制矩形：</p>
<ol>
<li>fillRect(x, y, width, height)：绘制一个填充的矩形。</li>
<li>strokeRect(x, y, width, height)：绘制一个矩形的边框。</li>
<li>clearRect(x, y, widh, height)：清除指定的矩形区域，然后这块区域会变的完全透明。 </li>
</ol>
<blockquote>
<p>参数说明：<br>x, y：指的是矩形的左上角的坐标。(相对于canvas的坐标原点)width, height：指的是绘制的矩形的宽和高。 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="comment">// 设置填充的颜色，默认为黑色（需要在矩形绘制前设置）</span></span><br><span class="line">ctx.fillStyle=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">150</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Symbol</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/10%E3%80%81Symbol.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h1><p><code>ES5</code>的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。</p>
<p><code>Symbol</code>表示独一无二的值</p>
<p><code>Symbol</code>值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的<code>Symbol</code> 类型。凡是属性名属于 <code>Symbol</code>类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="comment">// &quot;symbol&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象，也就是说，由于Symbol值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的原始数据类型。</p>
</blockquote>
<p>Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.toString() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.toString() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>Symbol函数的参数只是表示对当前Symbol值得描述，因此相同参数的Symbol函数返回的返回值是不相等的</li>
<li>Symbol值不能与其它类型的值进行运算，会报错</li>
<li>Symbol值可以显示转为字符串，也可以转为布尔值</li>
</ul>
</blockquote>
<h1 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h1><p>通过该属性可以获取到<code>Symbol</code>的描述</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sym.description <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a>作为属性名的Symbol</h1><p><code>Symbol</code>作为属性名的用法:</p>
<ul>
<li>在对象的外部，通过方括号进行赋值，切记不能使用 . 符号赋值【因为点运算符后面总是字符串，所以不会读取<code>Symbol</code>实例作为标识所指代的那个值】</li>
<li>通过<code>object.defineProperty</code>赋值</li>
<li>在对象内部，<code>Symbol</code>值定义属性时，<code>Symbol</code>值必须放在方括号之中</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">&#x27;Hello!&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="魔术字符串"><a href="#魔术字符串" class="headerlink" title="魔术字符串"></a>魔术字符串</h1><p>魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p>
<h1 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h1><p><code>Symbol</code>作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有<code>Symbol</code>属性名。</p>
<p><code>Object.getOwnPropertySymbols</code>方法返回一个数组，成员是当前对象的所有用作属性名的<code>Symbol</code>值。</p>
<p><code>Reflect.ownKeys</code>方法可以返回所有类型的键名，包括常规键名和<code>Symbol</code>键名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&#x27;my_key&#x27;</span>)]: <span class="number">1</span>,</span><br><span class="line">  enum: <span class="number">2</span>,</span><br><span class="line">  nonEnum: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="comment">// [Symbol(my_key)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//  [&quot;enum&quot;, &quot;nonEnum&quot;, Symbol(my_key)]</span></span><br></pre></td></tr></table></figure>
<h1 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h1><p> 有时，我们希望重新使用同一个<code>Symbol</code>值，<code>Symbol.for</code>方法可以做到这一点。它接受一个字符串作为参数，然后所有有没有以该参数作为名称的Symbol值。如果有，就返回这个<code>Symbol</code>值，否则就新建并返回一个以该字符串为名称的<code>Symbol</code>值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Symbol.for()与Symbol()这两种写法。都会生成新的Symbol。它们的区别就是，前者会被登记在全局环境中供搜索，后者不会。</p>
</blockquote>
<p><code>Symbol.keyFor</code>方法返回一个已登记的Symbol类型值的<code>key</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Symbol.for为Symbol值登记的名字，是全局环境的，可以在不同的iframe或service work中取到同一个值</p>
</blockquote>
<h1 id="内置的Symbol值"><a href="#内置的Symbol值" class="headerlink" title="内置的Symbol值"></a>内置的Symbol值</h1><p>除了定义自己使用的 <code>Symbol</code>值以外，ES6 还提供了 11 个内置的 <code>Symbol</code>值，指向语言内部使用的方法。</p>
<h2 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h2><p>对象的<code>Symbol.hasInstance</code>属性,指向一个内部方法。当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是<code>Foo[Symbol.hasInstance](foo)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.hasInstance](foo) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="keyword">new</span> MyClass() <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，MyClass是一个类，new MyClass()会返回一个实例。该实例的Symbol.hasInstance方法，会在进行instanceof运算时自动调用，判断左侧的运算子是否为Array的实例。</p>
</blockquote>
<h2 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h2><p>对象<code>Symbol.isConcatSpreadable</code>属性等于一个布尔值表示该对象用于<code>Array.prototype.concat()</code>时,是否可以展开。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].concat(arr1, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line">arr1[<span class="built_in">Symbol</span>.isConcatSpreadable] <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr2[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].concat(arr2, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;c&#x27;,&#x27;d&#x27;], &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码说明，数组的默认行为是可以展开，Symbol.isConcatSpreadable默认等于undefined。该属性等于true时，也有展开效果</p>
</blockquote>
<p>类似数组的对象正好相反，默认不展开。它的<code>Symbol.isConcatSpreadable</code>属性设为<code>true</code>，才可以展开。</p>
<h2 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a>Symbol.species</h2><p>对象的<code>Symbol.species</code>属性，指向一个构造函数。创造衍生对象时，会使用该属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> MyArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> b = a.map(<span class="function"><span class="params">x</span> =&gt;</span> x);</span><br><span class="line"><span class="keyword">const</span> c = a.filter(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">b <span class="keyword">instanceof</span> MyArray <span class="comment">// true</span></span><br><span class="line">c <span class="keyword">instanceof</span> MyArray <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，子类MyArray继承了父类Array，a时MyArray的实例，b和c是a的衍生对象。虽然b和c都是调用数组方法生成的，但是实际上它们是MyArray的实例，而不是数组（Array）的实例</p>
</blockquote>
<p><code>Symbol.species</code>属性就是为了解决这个问题而提供的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]() &#123; <span class="keyword">return</span> <span class="built_in">Array</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Symbol.species属性要采用get取值器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认的Symbol.species属性等同于下面的写法。</span></span><br><span class="line"><span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Symbol-match"><a href="#Symbol-match" class="headerlink" title="Symbol.match"></a>Symbol.match</h2><p>对象<code>Symbol.match</code>属性，指向一个函数。当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.match(regexp)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">regexp[<span class="built_in">Symbol</span>.match](<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMatcher</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.match](string) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>.indexOf(string);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;e&#x27;</span>.match(<span class="keyword">new</span> MyMatcher()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol-replace"><a href="#Symbol-replace" class="headerlink" title="Symbol.replace"></a>Symbol.replace</h2><p>对象的<code>Symbol.replace</code>属性，指向一个方法，当该对象被<code>String.prototype.replace</code>方法调用时，会返回该方法的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replace(searchValue, replaceValue)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">searchValue[<span class="built_in">Symbol</span>.replace](<span class="built_in">this</span>, replaceValue)</span><br></pre></td></tr></table></figure>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = &#123;&#125;;</span><br><span class="line">x[<span class="built_in">Symbol</span>.replace] = <span class="function">(<span class="params">...s</span>) =&gt;</span> <span class="built_in">console</span>.log(s);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span>.replace(x, <span class="string">&#x27;World&#x27;</span>) <span class="comment">// [&quot;Hello&quot;, &quot;World&quot;]</span></span><br></pre></td></tr></table></figure>
<p><code>Symbol.replace</code>方法会收到两个参数，第一个参数是<code>replace</code>方法正在作用的对象，上面例子是<code>Hello</code>，第二个参数是替换后的值，上面例子是<code>World</code>。</p>
<h2 id="Symbol-search"><a href="#Symbol-search" class="headerlink" title="Symbol.search"></a>Symbol.search</h2><p>对象的<code>Symbol.search</code>属性，指向一个方法，当该对象被<code>String.prototype.search</code>方法调用时，会返回该方法的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.search(regexp)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">regexp[<span class="built_in">Symbol</span>.search](<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySearch</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.search](string) &#123;</span><br><span class="line">    <span class="keyword">return</span> string.indexOf(<span class="built_in">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.search(<span class="keyword">new</span> MySearch(<span class="string">&#x27;foo&#x27;</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol-split"><a href="#Symbol-split" class="headerlink" title="Symbol.split"></a>Symbol.split</h2><p>对象的<code>Symbol.split</code>属性，指向一个方法，当该对象被<code>String.prototype.split</code>方法调用时，会返回该方法的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.split(separator, limit)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">separator[<span class="built_in">Symbol</span>.split](<span class="built_in">this</span>, limit)</span><br></pre></td></tr></table></figure>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySplitter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.split](string) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = string.indexOf(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      string.substr(<span class="number">0</span>, index),</span><br><span class="line">      string.substr(index + <span class="built_in">this</span>.value.length)</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.split(<span class="keyword">new</span> MySplitter(<span class="string">&#x27;foo&#x27;</span>))</span><br><span class="line"><span class="comment">// [&#x27;&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.split(<span class="keyword">new</span> MySplitter(<span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.split(<span class="keyword">new</span> MySplitter(<span class="string">&#x27;baz&#x27;</span>))</span><br><span class="line"><span class="comment">// &#x27;foobar&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面方法使用Symbol.split方法，重新定义了字符串对象的split方法的行为</p>
</blockquote>
<h2 id="Symbol-Iterator"><a href="#Symbol-Iterator" class="headerlink" title="Symbol.Iterator"></a>Symbol.Iterator</h2><p>对象的<code>Symbol.iterator</code>属性，指向该对象的默认遍历器方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myIterable = &#123;&#125;;</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h2><p>对象的<code>Symbol.toPrimitive</code>属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p>
<p><code>Symbol.toPrimitive</code>被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。</p>
<ul>
<li><code>Number</code>：该场合需要转成数值</li>
<li><code>String</code>：该场合需要转成字符串</li>
<li><code>Default</code>：该场合可以转成数值，也可以转成字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (hint) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;default&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> * obj <span class="comment">// 246</span></span><br><span class="line"><span class="number">3</span> + obj <span class="comment">// &#x27;3default&#x27;</span></span><br><span class="line">obj == <span class="string">&#x27;default&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>(obj) <span class="comment">// &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h2><p>对象的<code>Symbol.toStringTag</code>属性，指向一个方法。在该对象上面调用<code>Object.prototype.toString</code>方法时，如果这个属性存在，它的返回值会出现在<code>toString</code>方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制<code>[object Object]</code>或<code>[object Array]</code>中<code>object</code>后面的那个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">(&#123;[<span class="built_in">Symbol</span>.toStringTag]: <span class="string">&#x27;Foo&#x27;</span>&#125;.toString())</span><br><span class="line"><span class="comment">// &quot;[object Foo]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  get [<span class="built_in">Symbol</span>.toStringTag]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> Collection();</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(x) <span class="comment">// &quot;[object xxx]&quot;</span></span><br></pre></td></tr></table></figure>
<p>ES6 新增内置对象的Symbol.toStringTag属性值如下。</p>
<ul>
<li><code>JSON[Symbol.toStringTag]</code>：’JSON’</li>
<li><code>Math[Symbol.toStringTag]</code>：’Math’</li>
<li><code>Module 对象M[Symbol.toStringTag]</code>：’Module’</li>
<li><code>ArrayBuffer.prototype[Symbol.toStringTag]</code>：’ArrayBuffer’</li>
<li><code>DataView.prototype[Symbol.toStringTag]</code>：’DataView’</li>
<li><code>Map.prototype[Symbol.toStringTag]</code>：’Map’</li>
<li><code>Promise.prototype[Symbol.toStringTag]</code>：’Promise’</li>
<li><code>Set.prototype[Symbol.toStringTag]</code>：’Set’</li>
<li><code>%TypedArray%.prototype[Symbol.toStringTag]</code>：’Uint8Array’等</li>
<li><code>WeakMap.prototype[Symbol.toStringTag]</code>：’WeakMap’</li>
<li><code>WeakSet.prototype[Symbol.toStringTag]</code>：’WeakSet’</li>
<li><code>%MapIteratorPrototype%[Symbol.toStringTag]</code>：’Map Iterator’</li>
<li><code>%SetIteratorPrototype%[Symbol.toStringTag]</code>：’Set Iterator’</li>
<li><code>%StringIteratorPrototype%[Symbol.toStringTag]</code>：’String Iterator’</li>
<li><code>Symbol.prototype[Symbol.toStringTag]</code>：’Symbol’</li>
<li><code>Generator.prototype[Symbol.toStringTag]</code>：’Generator’</li>
<li><code>GeneratorFunction.prototype[Symbol.toStringTag]</code>：’GeneratorFunction’</li>
</ul>
<h2 id="Symbol-unscopables"><a href="#Symbol-unscopables" class="headerlink" title="Symbol.unscopables"></a>Symbol.unscopables</h2><p>对象的<code>Symbol.unscopables</code>属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被<code>with</code>环境排除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.unscopables]</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   copyWithin: true,</span></span><br><span class="line"><span class="comment">//   entries: true,</span></span><br><span class="line"><span class="comment">//   fill: true,</span></span><br><span class="line"><span class="comment">//   find: true,</span></span><br><span class="line"><span class="comment">//   findIndex: true,</span></span><br><span class="line"><span class="comment">//   includes: true,</span></span><br><span class="line"><span class="comment">//   keys: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.unscopables])</span><br><span class="line"><span class="comment">/* [&#x27;copyWithin&#x27;, &#x27;entries&#x27;, &#x27;fill&#x27;, &#x27;find&#x27;, &#x27;findIndex&#x27;, </span></span><br><span class="line"><span class="comment">	&#x27;includes&#x27;, &#x27;keys&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>上面代码说明，数组有7个属性，会被<code>with</code>命令排除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有 unscopables 时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (MyClass.prototype) &#123;</span><br><span class="line">  foo(); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有 unscopables 时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  get [<span class="built_in">Symbol</span>.unscopables]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (MyClass.prototype) &#123;</span><br><span class="line">  foo(); <span class="comment">// 2</span></span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码通过指定Symbol.unscopables属性，使得with语法块不会在当前作用域寻找foo属性，即foo将指向外层作用域的变量。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Set和Map数据结构</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/11%E3%80%81Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>Set</code>数据结构类似于数组,但是成员的值都是唯一的，没有重复的值。<br><code>Set</code>本身是一个构造函数,用来生成<code>Set</code>数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br></pre></td></tr></table></figure>
<p>Set函数可以接受一个数组（或者具有 <code>iterable</code> 接口的其他数据结构）作为参数，用来初始化。</p>
<p><strong>注意:</strong></p>
<ul>
<li>向 <code>Set</code> 加入值的时候，不会发生类型转换,所以 5 和 ‘5’是两个不同的值</li>
<li>Set内部,<code>NaN</code>是等于自身的</li>
<li>两个对象总是不相等的(空对象除外)</li>
</ul>
<h2 id="Set实例的属性和方法"><a href="#Set实例的属性和方法" class="headerlink" title="Set实例的属性和方法"></a>Set实例的属性和方法</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><code>Set.prototype.constructor</code>：构造函数，默认就是Set函数。</li>
<li><code>Set.prototype.size</code>：返回Set实例的成员总数。</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）</p>
<h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法:"></a>操作方法:</h4><ul>
<li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li>
<li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为Set的成员。</li>
<li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li>
</ul>
<h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法:"></a>遍历方法:</h4><ul>
<li><code>Set.prototype.keys()</code>：返回键名的遍历器</li>
<li><code>Set.prototype.values()</code>：返回键值的遍历器</li>
<li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li>
<li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</li>
</ul>
<blockquote>
<p>需要注意的是:Set的遍历顺序就是插入顺序</p>
</blockquote>
<p><strong>keys , values , entries</strong></p>
<p>keys() , values() , entries() 返回的都是遍历器对象<br>由于Set结构没有键名,只有键值(或者说键名和键值是同一个值),所以keys和values方法的行为完全一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。</span></span><br><span class="line"><span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator] === <span class="built_in">Set</span>.prototype.values <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以省略values方法，直接用for...of循环遍历 Set。</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
<p><strong>foreach</strong></p>
<p><code>foreach</code>接收两个参数:</p>
<ul>
<li>一: 函数, 函数接收三个参数 键值(values) , 键名(keys) , 集合本身 </li>
<li>二:表示绑定处理函数内部的this对象</li>
</ul>
<h4 id="遍历的应用"><a href="#遍历的应用" class="headerlink" title="遍历的应用"></a>遍历的应用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展运算符（...）内部使用for...of循环，可以用于 Set 结构。</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> arr = [...set];</span><br><span class="line"><span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的map和filter方法也可以间接用于 Set </span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4&#125;</span></span><br></pre></td></tr></table></figure>
<p>在遍历操作中，同步改变原来的 <code>Set</code> 结构，有两种方法。一种是利用原 <code>Set</code> 结构映射出一个新的结构，然后赋值给原来的<code>Set</code> 结构；另一种是利用<code>Array.from</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/ 方法一</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set, <span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br></pre></td></tr></table></figure>
<h1 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h1><p><code>WeakSet</code>与<code>Set</code>类似,也是不重复的值的集合。但是，它与 Set 有两个区别。<br>首先，<code>WeakSet</code> 的成员只能是对象，而不能是其他类型的值。<br>向<code>WeakSet</code>中放入对象以外的值会报错:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line">ws.add(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// TypeError: invalid value used in weak set</span></span><br></pre></td></tr></table></figure>
<p>其次，<code>WeakSet</code> 中的对象都是弱引用，即垃圾回收机制不考虑 <code>WeakSet</code>对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 <code>WeakSet</code>之中。</p>
<p>这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0,垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。<code>WeakSet</code>里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，<code>WeakSet</code>适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在<code>WeakSet</code>里面的引用就会自动消失。</p>
<p>由于上面这个特点，<code>WeakSet</code>的成员是不适合引用的，因为它会随时消失。另外，由于 <code>WeakSet</code>内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定<code>WeakSet</code>不可遍历。</p>
<blockquote>
<p>这些特点同样适用于 <code>WeakMap</code> 结构。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>WeakSet</code>是一个构造函数,可以使用new命令,创建<code>WeakSet</code>数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br></pre></td></tr></table></figure>
<p>作为构造函数，<code>WeakSet</code> 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 <code>Iterable</code> 接口的对象，都可以作为 <code>WeakSet</code> 的参数。）该数组的所有成员，都会自动成为 <code>WeakSet</code>实例对象的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br></pre></td></tr></table></figure>
<p>作为构造函数，<code>WeakSet</code> 可以接受一个数组或类似数组的对象(成员也要是对象)作为参数(实际上，任何具有 <code>Iterable</code>接口的对象，都可以作为 <code>WeakSet</code> 的参数。）该数组的所有成员，都会自动成为 <code>WeakSet</code> 实例对象的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 数组或类似数组的对象参数中的成员也要是对象</p>
</blockquote>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul>
<li><code>WeakSet.prototype.add(value)</code>：向 <code>WeakSet</code>实例添加一个新成员。</li>
<li><code>WeakSet.prototype.delete(value)</code>：清除 <code>WeakSet</code>实例的指定成员。</li>
<li><code>WeakSet.prototype.has(value)</code>：返回一个布尔值，表示某个值是否在 </li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p>
<p>Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p>
<p>Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">map.size <span class="comment">// 2</span></span><br><span class="line">map.has(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">map.has(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// &quot;Author&quot;</span></span><br></pre></td></tr></table></figure>
<p>Map构造函数接受数组作为参数，实际上执行的是下面的算法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">items.forEach(</span><br><span class="line">  ([key, value]) =&gt; map.set(key, value)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的Map.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;bar&#x27;</span>, <span class="number">2</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>(set);</span><br><span class="line">m1.get(<span class="string">&#x27;foo&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;baz&#x27;</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>(m2);</span><br><span class="line">m3.get(<span class="string">&#x27;baz&#x27;</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li><p>如果对同一个键多次赋值，后面的值将覆盖前面的值。</p>
</li>
<li><p>如果读取一个未知的键，则返回<code>undefined</code></p>
</li>
<li><p>只有对同一个对象的引用，<code>Map</code> 结构才将其视为同一个键。<br><code>Map</code> 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。比如连个数组的值虽然相同,但是他们的内存地址不同,就是不同的键<br>如果 <code>Map</code>的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，<code>Map</code> 将其视为一个键<code>undefined</code>和<code>null</code>是两个不同的键</p>
<p>虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键。</p>
</li>
</ul>
<h2 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h2><ol>
<li><p>size</p>
<p>返回 Map 结构的成员总数</p>
</li>
<li><p>Map.prototype.set(key, value)</p>
<p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个<code>Map</code> 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</p>
</li>
<li><p>Map.prototype.get(key)</p>
<p><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</p>
</li>
<li><p>Map.prototype.has(key)</p>
<p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中</p>
</li>
<li><p>Map.prototype.delete(key)<br><code>delete</code>方法删除某个键，返回true。如果删除失败，返回false。</p>
</li>
<li><p>Map.prototype.clear()</p>
<p><code>clear</code>方法清除所有成员，没有返回值。</p>
</li>
</ol>
<h2 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h2><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p>
<ul>
<li>​    <code>Map.prototype.keys()</code>：返回键名的遍历器。</li>
<li>​    <code>Map.prototype.values()</code>：返回键值的遍历器。</li>
<li>​    <code>Map.prototype.entries()</code>：返回所有成员的遍历器。</li>
<li>​    <code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</li>
</ul>
<blockquote>
<p>注意:  Map 的遍历顺序就是插入顺序</p>
</blockquote>
<p><code>foreach</code>接收两个参数:</p>
<ul>
<li>一: 函数, 函数接收三个参数 键值(values) , 键名(keys) , 集合本身 (map)</li>
<li>二:表示绑定处理函数内部的this对象</li>
</ul>
<h2 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="headerlink" title="与其他数据结构的互相转换"></a>与其他数据结构的互相转换</h2><h3 id="Map转为数组"><a href="#Map转为数组" class="headerlink" title="Map转为数组"></a>Map转为数组</h3><p>Map 转为数组最方便的方法，就是使用扩展运算符( … )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="literal">true</span>, <span class="number">7</span>)</span><br><span class="line">  .set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line">[...myMap]</span><br><span class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &#x27;abc&#x27; ] ] ]</span></span><br></pre></td></tr></table></figure>
<h3 id="数组转为Map"><a href="#数组转为Map" class="headerlink" title="数组转为Map"></a>数组转为Map</h3><p>将数组传入 Map 构造函数，就可以转为 Map。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="literal">true</span>, <span class="number">7</span>],</span><br><span class="line">  [&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   true =&gt; 7,</span></span><br><span class="line"><span class="comment">//   Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Map转为对象"><a href="#Map转为对象" class="headerlink" title="Map转为对象"></a>Map转为对象</h3><p>如果所有 Map 的键都是字符串，它可以无损地转为对象。</p>
<p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToObj</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">    obj[k] = v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .set(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">strMapToObj(myMap)</span><br><span class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="对象转为Map"><a href="#对象转为Map" class="headerlink" title="对象转为Map"></a>对象转为Map</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToStrMap</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    strMap.set(k, obj[k]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> strMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objToStrMap(&#123;<span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// Map &#123;&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Map转为JSON"><a href="#Map转为JSON" class="headerlink" title="Map转为JSON"></a>Map转为JSON</h3><p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).set(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">strMapToJson(myMap)</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line">mapToArrayJson(myMap)</span><br><span class="line"><span class="comment">// &#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON转为Map"><a href="#JSON转为Map" class="headerlink" title="JSON转为Map"></a>JSON转为Map</h3><p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToStrMap(<span class="string">&#x27;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;&#x27;yes&#x27; =&gt; true, &#x27;no&#x27; =&gt; false&#125;</span></span><br></pre></td></tr></table></figure>
<p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToMap(<span class="string">&#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="WeakWap"><a href="#WeakWap" class="headerlink" title="WeakWap"></a>WeakWap</h1><p><code>WeakWap</code>结构与<code>Wap</code>结构类似,也是用于生成键值对的集合。</p>
<p><code>WeakWap与Wap</code>的区别:</p>
<ul>
<li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名。</li>
<li><code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</li>
</ul>
<p>总之，<code>WeakMap</code>的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。<br>注意，<code>WeakMap</code> 弱引用的只是键名，而不是键值。键值依然是正常引用</p>
<h2 id="WeakMap语法"><a href="#WeakMap语法" class="headerlink" title="WeakMap语法"></a>WeakMap语法</h2><p><code>WeakMap</code>没有遍历操作和size属性,只有以下四个方法可用:</p>
<ul>
<li><code>get()</code></li>
<li><code>set()</code></li>
<li><code>has()</code></li>
<li><code>delete()</code></li>
</ul>
<h2 id="WeakMap的用途"><a href="#WeakMap的用途" class="headerlink" title="WeakMap的用途"></a>WeakMap的用途</h2><p><code>WeakMap</code> 应用的典型场合就是 DOM 节点作为键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;logo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> myWeakmap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">myWeakmap.set(myElement, &#123;<span class="attr">timesClicked</span>: <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">myElement.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> logoData = myWeakmap.get(myElement);</span><br><span class="line">  logoData.timesClicked++;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*myElement是一个 DOM 节点，每当发生click事件，就更新一下状态。</span></span><br><span class="line"><span class="comment">我们将这个状态作为键值放在 WeakMap 里，对应的键名就是myElement。</span></span><br><span class="line"><span class="comment">一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。</span></span><br></pre></td></tr></table></figure>
<p><code>WeakMap</code>的另一个用处是部署私有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _counter = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> _action = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countdown</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">counter, action</span>)</span> &#123;</span><br><span class="line">    _counter.set(<span class="built_in">this</span>, counter);</span><br><span class="line">    _action.set(<span class="built_in">this</span>, action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">dec</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = _counter.get(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (counter &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    counter--;</span><br><span class="line">    _counter.set(<span class="built_in">this</span>, counter);</span><br><span class="line">    <span class="keyword">if</span> (counter === <span class="number">0</span>) &#123;</span><br><span class="line">      _action.get(<span class="built_in">this</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Countdown(<span class="number">2</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;DONE&#x27;</span>));</span><br><span class="line"></span><br><span class="line">c.dec()</span><br><span class="line">c.dec()</span><br><span class="line"><span class="comment">// DONE</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Proxy</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/12%E3%80%81Proxy.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p>
<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>
<p>生成Proxy实例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>target参数表示所要拦截的目标对象</p>
</li>
<li><p>handler参数也是一个对象，用来定制拦截行为</p>
</li>
</ul>
<p>如果handler没有设置任何拦截,那就等同于直接通向原对象(target),我们可以将Proxy对象设置到<code>object.proxy</code>,从而可以在object对象上调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="attr">proxy</span>: <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler) &#125;;</span><br></pre></td></tr></table></figure>
<p>Proxy实例还可以是其他对象的原型对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proxy);</span><br><span class="line">obj.time <span class="comment">// 35</span></span><br><span class="line"></span><br><span class="line">    (...args)。</span><br></pre></td></tr></table></figure>
<p>支持在handler中设置的拦截操作,一共13种:</p>
<ul>
<li><p>get(target, propKey, receiver)：</p>
<p>拦截对象属性的读取，比如<code>proxy.foo和proxy[&#39;foo&#39;]</code>。</p>
</li>
<li><p>set(target, propKey, value, receiver)：</p>
<p>拦截对象属性的设置，比如<code>proxy.foo = v或proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</p>
</li>
<li><p>has(target, propKey)：</p>
<p>拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</p>
</li>
<li><p>deleteProperty(target, propKey)：</p>
<p>拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</p>
</li>
<li><p>ownKeys(target)：</p>
<p>拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</p>
</li>
<li><p>getOwnPropertyDescriptor(target, propKey)：</p>
<p>​    拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</p>
</li>
<li><p>defineProperty(target, propKey, propDesc)：</p>
<p>​    拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</p>
</li>
<li><p>preventExtensions(target)：</p>
<p>拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</p>
</li>
<li><p>getPrototypeOf(target)：</p>
<p>拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</p>
</li>
<li><p>isExtensible(target)：</p>
<p>拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</p>
</li>
<li><p>setPrototypeOf(target, proto)：</p>
<p>拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</p>
</li>
<li><p>apply(target, object, args)：</p>
<p>拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</p>
</li>
<li><p>construct(target, args)：</p>
<p>拦截 <code>Proxy</code>实例作为构造函数调用的操作，比如<code>new proxy</code></p>
</li>
</ul>
<h1 id="拦截方法"><a href="#拦截方法" class="headerlink" title="拦截方法"></a>拦截方法</h1><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>get方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p>
<p>用法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">&quot;Property \&quot;&quot;</span> + </span><br><span class="line">                               property + <span class="string">&quot;\&quot; does not exist.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">proxy.age <span class="comment">// 抛出一个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，</span></span><br><span class="line"><span class="comment">访问不存在的属性，只会返回undefined。</span></span><br></pre></td></tr></table></figure>
<p>get方法可以继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;GET &#x27;</span> + propertyKey);</span><br><span class="line">    <span class="keyword">return</span> target[propertyKey];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">obj.foo <span class="comment">// &quot;GET foo&quot;</span></span><br><span class="line"><span class="comment">/*拦截操作定义在Prototype对象上面，所以如果读取obj对象继承的属性时，</span></span><br><span class="line"><span class="comment">拦截会生效。</span></span><br></pre></td></tr></table></figure>
<h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p>set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。</p>
<p>通过set方法可以实现数据绑定,动态更新DOM</p>
<p>注意:</p>
<ul>
<li>如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用。</li>
<li>严格模式下，set代理如果没有返回true，就会报错。</li>
</ul>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p>apply方法拦截函数的调用、call和apply操作。<br>apply方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（this）和目标对象的参数数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply (target, ctx, args) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>直接调用<code>Reflect.apply</code>方法，也会被拦截</p>
<h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p>has方法用来拦截<code>HasProperty</code>操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是in运算符。<br>has方法可以接受两个参数，分别是目标对象、需查询的属性名。<br>使用has拦截隐藏某些属性,不被in运算符发现:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">&#x27;_prop&#x27;</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>has拦截操作对in运算符生效,但是不对for…in循环生效<br>注意:</p>
<ul>
<li>has方法拦截的是<code>HasProperty</code>操作，而不是<code>HasOwnProperty</code>操作，即has方法不判断一个属性是对象自身的属性，还是继承的属性。</li>
<li>如果原对象不可配置或者禁止扩展，这时has拦截会报错。</li>
</ul>
<h2 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h2><p> construct方法用于拦截new命令</p>
<p> construct方法可以接受两个参数:</p>
<ol>
<li><code>target</code>：目标对象</li>
<li><code>args</code>：构造函数的参数对象</li>
<li><code>newTarget</code>：创造实例对象时，new命令作用的构造函数（下面例子的p）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, &#123;</span><br><span class="line">  construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;called: &#x27;</span> + args.join(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> p(<span class="number">1</span>)).value</span><br><span class="line"><span class="comment">// &quot;called: 1&quot;</span></span><br><span class="line"><span class="comment">// 10 </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:construct方法返回的必须是一个对象，否则会报错。</p>
</blockquote>
<h2 id="deleteProperty"><a href="#deleteProperty" class="headerlink" title="deleteProperty()"></a>deleteProperty()</h2><p><code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    invariant(key, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invariant</span> (<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> </span></span><br><span class="line"><span class="string">							private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy._prop</span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，目标对象自身的不可配置（configurable）的属性，不能被<code>deleteProperty</code>方法删除，否则报错。</p>
</blockquote>
<h2 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty()"></a>defineProperty()</h2><p><code>defineProperty</code>方法拦截了<code>Object.defineProperty</code>操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  defineProperty (target, key, descriptor) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.foo = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，如果目标对象不可扩展（non-extensible），则<code>defineProperty</code>不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则<code>defineProperty</code>方法不得改变这两个设置。</p>
</blockquote>
<h2 id="getOwnPropertyDescriptor"><a href="#getOwnPropertyDescriptor" class="headerlink" title="getOwnPropertyDescriptor()"></a>getOwnPropertyDescriptor()</h2><p><code>getOwnPropertyDescriptor</code>方法拦截<code>Object.getOwnPropertyDescriptor()</code>，返回一个属性描述对象或者<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ar handler = &#123;</span><br><span class="line">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="string">&#x27;tar&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">&#x27;wat&#x27;</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">&#x27;_foo&#x27;</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line"><span class="comment">// &#123;value: &#x27;tar&#x27;,writable:true,enumerable:true,configurable:true&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="getPrototypeOf"><a href="#getPrototypeOf" class="headerlink" title="getPrototypeOf()"></a>getPrototypeOf()</h2><p><code>getPrototypeOf</code>方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。</p>
<ol>
<li><code>Object.prototype.__proto</code>__</li>
<li><code>Object.prototype.isPrototypeOf()</code></li>
<li><code>Object.getPrototypeOf()</code></li>
<li><code>Reflect.getPrototypeOf()</code></li>
<li><code>instanceof</code></li>
</ol>
<blockquote>
<p>注意，<code>getPrototypeOf</code>方法的返回值必须是对象或者null，否则报错。另外，如果目标对象不可扩展（non-extensible）， <code>getPrototypeOf</code>方法必须返回目标对象的原型对象。</p>
</blockquote>
<h2 id="isExtensible"><a href="#isExtensible" class="headerlink" title="isExtensible()"></a>isExtensible()</h2><p><code>isExtensible</code>方法拦截<code>Object.isExtensible</code>操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  isExtensible: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;called&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(p)</span><br><span class="line"><span class="comment">// &quot;called&quot;</span></span><br><span class="line"><span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。这个方法有一个强限制，它的返回值必须与目标对象的<code>isExtensible</code>属性保持一致，否则就会抛出错误。</p>
</blockquote>
<h2 id="ownKeys"><a href="#ownKeys" class="headerlink" title="ownKeys()"></a>ownKeys()</h2><p><code>ownKeys</code>方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作</p>
<ol>
<li><code>Object.getOwnPropertyNames()</code></li>
<li><code>Object.getOwnPropertySymbols()</code></li>
<li><code>Object.keys()</code></li>
<li><code>for...in</code>循环</li>
</ol>
<p>注意，使用<code>Object.keys</code>方法时，有三类属性会被<code>ownKeys</code>方法自动过滤，不会返回。</p>
<ul>
<li>目标对象上不存在的属性</li>
<li>属性名为 Symbol 值</li>
<li>不可遍历（enumerable）的属性</li>
</ul>
<p>注意:</p>
<ul>
<li><p><code>ownKeys</code>方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。</p>
</li>
<li><p>如果目标对象自身包含不可配置的属性，则该属性必须被<code>ownKeys</code>方法返回，否则报错。</p>
</li>
<li><p>如果目标对象是不可扩展的（non-extensible），这时<code>ownKeys</code>方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。</p>
</li>
</ul>
<h2 id="preventExtensions"><a href="#preventExtensions" class="headerlink" title="preventExtensions()"></a>preventExtensions()</h2><p><code>setPrototypeOf</code>方法主要用来拦截<code>Object.setPrototypeOf</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  setPrototypeOf (target, proto) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Changing the prototype is forbidden&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class="line"><span class="comment">// Error: Changing the prototype is forbidden</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*上面代码中，只要修改target的原型对象，就会报错。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），<code>setPrototypeOf</code>方法不得改变目标对象的原型。</p>
</blockquote>
<h1 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h1><p><code>Proxy.revocable</code>方法返回一个可取消的 Proxy 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.foo = <span class="number">123</span>;</span><br><span class="line">proxy.foo <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">revoke();     <span class="comment">//取消Proxy实例</span></span><br><span class="line">proxy.foo <span class="comment">// TypeError: Revoked</span></span><br></pre></td></tr></table></figure>
<p><code>Proxy.revocable</code>的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。</p>
<h1 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h1><p>虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  m: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === proxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">target.m() <span class="comment">// false</span></span><br><span class="line">proxy.m()  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>将this绑定原始对象解决问题:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2015-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;getDate&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> target.getDate.bind(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.getDate() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Reflect</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/13%E3%80%81Reflect.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。`</p>
<p><code>Reflect</code>设计目的是为了优化Object的一些操作方法以及合理的返回Object操作返回的结果，对于一些命令式的Object行为，<code>Reflect</code>对象可以将其变为函数式的行为。</p>
<h2 id="Reflect的作用"><a href="#Reflect的作用" class="headerlink" title="Reflect的作用"></a>Reflect的作用</h2><ol>
<li><p>将语言内部的方法放到<code>Reflect</code>对象上。【现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。】</p>
</li>
<li><p>修改某些<code>Object</code>方法的返回结果。</p>
</li>
<li><p>让<code>Object</code>操作都变成函数行为。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="string">&#x27;assign&#x27;</span> <span class="keyword">in</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(<span class="built_in">Object</span>, <span class="string">&#x27;assign&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。</p>
</li>
</ol>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p><code>Reflect</code>对象共有13个静态方法。</p>
<ul>
<li>Reflect.apply(target, thisArg, args)</li>
<li>Reflect.construct(target, args)</li>
<li>Reflect.get(target, name, receiver)</li>
<li>Reflect.set(target, name, value, receiver)</li>
<li>Reflect.defineProperty(target, name, desc)</li>
<li>Reflect.deleteProperty(target, name)</li>
<li>Reflect.has(target, name)</li>
<li>Reflect.ownKeys(target)</li>
<li>Reflect.isExtensible(target)</li>
<li>Reflect.preventExtensions(target)</li>
<li>Reflect.getOwnPropertyDescriptor(target, name)</li>
<li>Reflect.getPrototypeOf(target)</li>
<li>Reflect.setPrototypeOf(target, prototype)</li>
</ul>
<h2 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target,name,receiver)"></a>Reflect.get(target,name,receiver)</h2><p><code>Reflect.get</code>方法查找并返回<code>target</code>对象的<code>name</code>属性,如果没有该属性,则返回<code>undefined</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">baz</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.foo + <span class="built_in">this</span>.bar;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">  foo: <span class="number">4</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.get(myObject, <span class="string">&#x27;foo&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(myObject, <span class="string">&#x27;bar&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//如果name属性部署了读取函数（getter），则读取函数的this绑定receiver。</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(myObject, <span class="string">&#x27;baz&#x27;</span>, myReceiverObject) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个参数必须是对象,否则会报错</p>
</blockquote>
<h2 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target,name,value,receiver)"></a>Reflect.set(target,name,value,receiver)</h2><p><code>Reflect.set</code>方法设置<code>target</code>对象的<code>name</code>属性等于<code>value</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  foo: <span class="number">4</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">bar</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.foo = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">  foo: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果name属性设置了赋值函数，则赋值函数的this绑定receiver。</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(myObject, <span class="string">&#x27;bar&#x27;</span>, <span class="number">1</span>, myReceiverObject);</span><br><span class="line">myObject.foo <span class="comment">// 4</span></span><br><span class="line">myReceiverObject.foo <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个参数必须是对象,否则会报错</p>
</blockquote>
<p>注意：如果 <code>Proxy</code>对象和 <code>Reflect</code>对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了<code>receiver</code>，那么<code>Reflect.set</code>会触发<code>Proxy.defineProperty</code>拦截。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  a: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">defineProperty</span>(<span class="params">target, key, attribute</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;defineProperty&#x27;</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineProperty(target, key, attribute);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(p, handler);</span><br><span class="line">obj.a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>Proxy.set</code>拦截里面使用了<code>Reflect.set</code>，而且传入了<code>receiver</code>，导致触发<code>Proxy.defineProperty</code>拦截。这是因为<code>Proxy.set</code>的<code>receiver</code>参数总是指向当前的 <code>Proxy</code>实例（即上例的<code>obj</code>），而<code>Reflect.set</code>一旦传入<code>receiver</code>，就会将属性赋值到<code>receiver</code>上面（即<code>obj</code>），导致触发<code>defineProperty</code>拦截。如果<code>Reflect.set</code>没有传入<code>receiver</code>，那么就不会触发<code>defineProperty</code>拦截。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  a: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.set(target, key, value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">defineProperty</span>(<span class="params">target, key, attribute</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;defineProperty&#x27;</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineProperty(target, key, attribute);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(p, handler);</span><br><span class="line">obj.a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">// set</span></span><br></pre></td></tr></table></figure>
<h2 id="Reflect-has-obj-name"><a href="#Reflect-has-obj-name" class="headerlink" title="Reflect.has(obj,name)"></a>Reflect.has(obj,name)</h2><p><code>Reflect.has</code>方法对应<code>name in obj</code>里面的<code>in</code>运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> myObject <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(myObject, <span class="string">&#x27;foo&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>Reflect.has()</code>方法的第一个参数不是对象，会报错。</p>
</blockquote>
<h2 id="Reflect-deleteProperty-obj-name"><a href="#Reflect-deleteProperty-obj-name" class="headerlink" title="Reflect.deleteProperty(obj,name)"></a>Reflect.deleteProperty(obj,name)</h2><p><code>Reflect.deleteProperty</code>方法等同于<code>delete obj[name]</code>，用于删除对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">delete</span> myObj.foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(myObj, <span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>Reflect.deleteProperty()</code>方法的第一个参数不是对象，会报错。</p>
</blockquote>
<h2 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target,args)"></a>Reflect.construct(target,args)</h2><p><code>Reflect.construct</code>方法等同于<code>new target(...args)</code>，这提供了一种不使用<code>new</code>，来调用构造函数的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="built_in">Reflect</span>.construct(Greeting, [<span class="string">&#x27;张三&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>Reflect.construct()</code>方法的第一个参数不是函数，会报错。</p>
</blockquote>
<h2 id="Reflect-getPrototype-obj"><a href="#Reflect-getPrototype-obj" class="headerlink" title="Reflect.getPrototype(obj)"></a>Reflect.getPrototype(obj)</h2><p><code>Reflect.getPrototypeOf</code>方法用于读取对象的<code>__proto__</code>属性，对应<code>Object.getPrototypeOf(obj)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> FancyThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(myObj) === FancyThing.prototype;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果参数不是对象，<code>Object.getPrototypeOf</code>会将这个参数转为对象，然后再运行，而<code>Reflect.getPrototypeOf</code>会报错。</p>
</blockquote>
<h2 id="Reflect-setPrototypeOf-obj-newProto"><a href="#Reflect-setPrototypeOf-obj-newProto" class="headerlink" title="Reflect.setPrototypeOf(obj,newProto)"></a>Reflect.setPrototypeOf(obj,newProto)</h2><p><code>Reflect.setPrototypeOf</code>方法用于设置目标对象的原型（prototype），对应<code>Object.setPrototypeOf(obj, newProto)</code>方法。它返回一个布尔值，表示是否设置成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(myObj, <span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(myObj, <span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line">myObj.length <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>如果无法设置目标对象的原型,<code>Reflect.setPrototypeOf</code>方法返回<code>false</code>。</li>
<li>如果第一个参数不是对象，<code>Object.setPrototypeOf</code>会返回第一个参数本身，而<code>Reflect.setPrototypeOf</code>会报错。</li>
<li>如果第一个参数是<code>undefined</code>或<code>null</code>，<code>Object.setPrototypeOf</code>和<code>Reflect.setPrototypeOf</code>都会报错。</li>
</ul>
</blockquote>
<h2 id="Reflect-apply-func-thisArg-args"><a href="#Reflect-apply-func-thisArg-args" class="headerlink" title="Reflect.apply(func,thisArg,args)"></a>Reflect.apply(func,thisArg,args)</h2><p><code>Reflect.apply</code>方法等同于<code>Function.prototype.apply.call(func, thisArg, args)</code>，用于绑定<code>this</code>对象后执行给定函数。</p>
<p>一般来说，如果要绑定一个函数的<code>this</code>对象，可以这样写<code>fn.apply(obj, args)</code>，但是如果函数定义了自己的<code>apply</code>方法，就只能写成<code>Function.prototype.apply.call(fn, obj, args)</code>，采用<code>Reflect</code>对象可以简化这种操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest, []);</span><br></pre></td></tr></table></figure>
<h2 id="Reflect-defineProperty-target-propertyKey-attributes"><a href="#Reflect-defineProperty-target-propertyKey-attributes" class="headerlink" title="Reflect.defineProperty(target, propertyKey, attributes)"></a>Reflect.defineProperty(target, propertyKey, attributes)</h2><p><code>Reflect.defineProperty</code>方法基本等同于<code>Object.defineProperty</code>，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用<code>Reflect.defineProperty</code>代替它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(MyDate, <span class="string">&#x27;now&#x27;</span>, &#123;</span><br><span class="line">  value: <span class="function">() =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineProperty(MyDate, <span class="string">&#x27;now&#x27;</span>, &#123;</span><br><span class="line">  value: <span class="function">() =&gt;</span> <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>Reflect.defineProperty</code>的第一个参数不是对象，就会抛出错误，比如<code>Reflect.defineProperty(1, &#39;foo&#39;)</code>。</p>
</blockquote>
<h2 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h2><p><code>Reflect.getOwnPropertyDescriptor</code>基本等同于<code>Object.getOwnPropertyDescriptor</code>，用于得到指定属性的描述对象，将来会替代掉后者。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">&#x27;hidden&#x27;</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">var</span> theDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(myObject, <span class="string">&#x27;hidden&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="keyword">var</span> theDescriptor = <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(myObject, <span class="string">&#x27;hidden&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果第一个参数不是对象，<code>Object.getOwnPropertyDescriptor(1, &#39;foo&#39;)</code>不报错，返回<code>undefined</code>，而<code>Reflect.getOwnPropertyDescriptor(1, &#39;foo&#39;)</code>会抛出错误，表示参数非法。</p>
</blockquote>
<h2 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible (target)"></a>Reflect.isExtensible (target)</h2><p><code>Reflect.isExtensible</code>方法对应<code>Object.isExtensible</code>，返回一个布尔值，表示当前对象是否可扩展。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(myObject) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(myObject) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果参数不是对象，<code>Object.isExtensible</code>会返回<code>false</code>，因为非对象本来就是不可扩展的，而<code>Reflect.isExtensible</code>会报错。</p>
</blockquote>
<h2 id="Reflect-preventExtensions-target"><a href="#Reflect-preventExtensions-target" class="headerlink" title="Reflect.preventExtensions(target)"></a>Reflect.preventExtensions(target)</h2><p><code>Reflect.preventExtensions</code>对应<code>Object.preventExtensions</code>方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(myObject) <span class="comment">// Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(myObject) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果参数不是对象，<code>Object.preventExtensions</code>在 ES5 环境报错，在 ES6 环境返回传入的参数，而<code>Reflect.preventExtensions</code>会报错。</p>
</blockquote>
<h2 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys (target)"></a>Reflect.ownKeys (target)</h2><p><code>Reflect.ownKeys</code>方法用于返回对象的所有属性，基本等同于<code>Object.getOwnPropertyNames</code>与<code>Object.getOwnPropertySymbols</code>之和。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">&#x27;baz&#x27;</span>)]: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">&#x27;bing&#x27;</span>)]: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(myObject)</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(myObject)</span><br><span class="line"><span class="comment">//[Symbol(baz), Symbol(bing)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(myObject)</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, Symbol(baz), Symbol(bing)]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>Reflect.ownKeys()</code>方法的第一个参数不是对象，会报错</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Promise对象</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/14%E3%80%81Promise%E5%AF%B9%E8%B1%A1.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="Promise的含义"><a href="#Promise的含义" class="headerlink" title="Promise的含义"></a>Promise的含义</h1><p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件更合理和更强大。</p>
<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步消息）的结果。</p>
<p><code>Promise</code>对象有以下两个<strong>特点：</strong></p>
<p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>
<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>无法取消<code>Promise</code></li>
<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li>
<li>当处于<code>pending</code>状态时，无法得知目前进展到哪一阶段（刚刚开始还是即将完成）</li>
</ul>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p><code>Promise</code>对象是一个构造函数，用来生成Promise实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>Promise</code>构造函数接收一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>
<p><code>resolve</code>函数的作用：<br>将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从<code>pending</code>变为<code>resolved</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p>
<p><code>reject</code>函数的作用：<br>将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从<code>pending</code>变为<code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
</blockquote>
<p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受<code>Promise</code>对象传出的值作为参数。</p>
</blockquote>
<h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p><code>then</code>方法定义在原型对象<code>Promise.prototype</code>上的。它的作用是为<code>Promise</code>实例添加状态改变时的回调函数。<br><code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数,第二个参数(可选)是<code>rejected</code>状态的回调函数。</p>
<p><code>then</code>方法返回的是一个新的<code>Promise</code>实例。所以可以采用链式写法，即<code>then</code>方法后面在调用另一个then方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h1><p><code>catch</code>方法用于指定发生错误时的回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果该对象状态变为<code>resolved</code>，则会调用<code>then</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。</p>
<p>如果<code>Promise</code>状态已经变成<code>resolved</code>，再抛出错误是无效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


</blockquote>
<h1 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h1><p><code>finally</code>方法用于指定不管Promise对象最后状态如何，都会执行的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.finally(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>finally</code>方法的回调函数不接受任何参数，所以<code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</p>
</blockquote>
<h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>
</blockquote>
<p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<p>如果作为参数的 Promise 实例，自己定义了<code>catch</code>方法，那么它一旦被<code>rejected</code>，并不会触发<code>Promise.all()</code>的<code>catch</code>方法。如果没有定义自己的<code>catch</code>方法，就会调用<code>Promise.all()</code>的<code>catch</code>方法。</p>
<h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p>
</blockquote>
<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>
<h1 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h1><p><code>Promise.allSettled()</code>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束。该方法由 <a href="https://github.com/tc39/proposal-promise-allSettled">ES2020</a> 引入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  fetch(<span class="string">&#x27;/api-1&#x27;</span>),</span><br><span class="line">  fetch(<span class="string">&#x27;/api-2&#x27;</span>),</span><br><span class="line">  fetch(<span class="string">&#x27;/api-3&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.allSettled(promises);</span><br><span class="line">removeLoadingIndicator();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。</p>
</blockquote>
<h1 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h1><p><code>Promise.any()</code>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。该方法目前是一个第三阶段的<a href="https://github.com/tc39/proposal-promise-any">提案</a> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  fetch(<span class="string">&#x27;/endpoint-a&#x27;</span>).then(<span class="function">() =&gt;</span> <span class="string">&#x27;a&#x27;</span>),</span><br><span class="line">  fetch(<span class="string">&#x27;/endpoint-b&#x27;</span>).then(<span class="function">() =&gt;</span> <span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">  fetch(<span class="string">&#x27;/endpoint-c&#x27;</span>).then(<span class="function">() =&gt;</span> <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> <span class="built_in">Promise</span>.any(promises);</span><br><span class="line">  <span class="built_in">console</span>.log(first);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>Promise.any()</code>方法的参数数组包含三个 Promise 操作。其中只要有一个变成<code>fulfilled</code>，<code>Promise.any()</code>返回的 Promise 对象就变成<code>fulfilled</code>。如果所有三个操作都变成<code>rejected</code>，那么就会<code>await</code>命令就会抛出错误。</p>
</blockquote>
<p><code>Promise.any()</code>抛出的错误，不是一个一般的错误，而是一个 AggregateError 实例。它相当于一个数组，每个成员对应一个被<code>rejected</code>的操作所抛出的错误。下面是 AggregateError 的实现示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> AggregateError() <span class="keyword">extends</span> <span class="built_in">Array</span> -&gt; AggregateError</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> AggregateError();</span><br><span class="line">err.push(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;first error&quot;</span>));</span><br><span class="line">err.push(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;second error&quot;</span>));</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure>
<p>捕捉错误时，如果不用<code>try...catch</code>结构和 await 命令，可以像下面这样写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.any(promises).then(</span><br><span class="line">  (first) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Any of the promises was fulfilled.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="comment">// All of the promises were rejected.</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h1><p>有时需要将现有对象转为 Promise 对象，<code>Promise.resolve()</code>方法就起到这个作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsPromise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码将 jQuery 生成的<code>deferred</code>对象，转为一个新的 Promise 对象。</p>
</blockquote>
<p><strong><code>Promise.resolve</code>方法的参数分成四种情况：</strong></p>
<p><strong>（1）参数是一个 Promise 实例</strong></p>
<p>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</p>
<p><strong>（2）参数是一个<code>thenable</code>对象</strong></p>
<p><code>thenable</code>对象指的是具有<code>then</code>方法的对象，比如下面这个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>Promise.resolve</code>方法会将这个对象转为 Promise 对象，然后就立即执行<code>thenable</code>对象的<code>then</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);  <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>thenable</code>对象的<code>then</code>方法执行后，对象<code>p1</code>的状态就变为<code>resolved</code>，从而立即执行最后那个<code>then</code>方法指定的回调函数，输出 42。</p>
</blockquote>
<p><strong>（3）参数不是具有then方法的对象，或根本就不是对象</strong></p>
<p>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码生成一个新的 Promise 对象的实例<code>p</code>。由于字符串<code>Hello</code>不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是<code>resolved</code>，所以回调函数会立即执行。<code>Promise.resolve</code>方法的参数，会同时传给回调函数。</p>
</blockquote>
<p><strong>（4）不带有任何参数</strong></p>
<p><code>Promise.resolve()</code>方法允许调用时不带参数，直接返回一个<code>resolved</code>状态的 Promise 对象。</p>
<p>所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用<code>Promise.resolve()</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码的变量<code>p</code>就是一个 Promise 对象。</p>
</blockquote>
<p>需要注意的是，立即<code>resolve()</code>的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>setTimeout(fn, 0)</code>在下一轮“事件循环”开始时执行，<code>Promise.resolve()</code>在本轮“事件循环”结束时执行，<code>console.log(&#39;one&#39;)</code>则是立即执行，因此最先输出。</p>
</blockquote>
<h1 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h1><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为<code>rejected</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码生成一个 Promise 对象的实例<code>p</code>，状态为<code>rejected</code>，回调函数会立即执行。</p>
</blockquote>
<p>注意，<code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致。</p>
<h1 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h1><p>该方法是为了解决：不论函数是异步的还是同步的，都想用Promise来处理它。</p>
<p>该方法还在<a href="https://github.com/ljharb/proposal-promise-try">提案</a>中。</p>
<p>用法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.try(method)</span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>catch可以捕获同步和异步的错误。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Iterator 和 for...of 循环</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/15%E3%80%81Iterator%E5%92%8Cfor...of%E5%BE%AA%E7%8E%AF.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="Iterator（遍历器）的概念"><a href="#Iterator（遍历器）的概念" class="headerlink" title="Iterator（遍历器）的概念"></a>Iterator（遍历器）的概念</h1><p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p>
<p><strong>Iterator的作用有三个：</strong></p>
<ol>
<li>为各种数据结构，提供一个统一的、简便的访问接口；</li>
<li>使得数据结构的成员能够按某种次序排列；</li>
<li>ES6 创造了一种新的遍历命令<code>for...of</code>循环，Iterator 接口主要供<code>for...of</code>消费。</li>
</ol>
<p><strong>Iterator的遍历过程是这样的：</strong></p>
<ol>
<li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</li>
<li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</li>
<li>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</li>
<li>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</li>
</ol>
<blockquote>
<p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。</p>
</blockquote>
<p>一个模拟<code>next</code>方法返回值的列子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;a&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;b&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex &lt; array.length ?</span><br><span class="line">        &#123;<span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</span><br><span class="line">        &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码定义了一个<code>makeIterator</code>函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。对数组<code>[&#39;a&#39;, &#39;b&#39;]</code>执行这个函数，就会返回该数组的遍历器对象（即指针对象）<code>it</code>。</p>
<p>指针对象的<code>next</code>方法，用来移动指针。开始时，指针指向数组的开始位置。然后，每次调用<code>next</code>方法，指针就会指向数组的下一个成员。第一次调用，指向<code>a</code>；第二次调用，指向<code>b</code>。</p>
<p><code>next</code>方法返回一个对象，表示当前数据成员的信息。这个对象具有<code>value</code>和<code>done</code>两个属性，<code>value</code>属性返回当前位置的成员，<code>done</code>属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用<code>next</code>方法。</p>
<p>总之，调用指针对象的<code>next</code>方法，就可以遍历事先给定的数据结构。</p>
</blockquote>
<h1 id="默认Iterator接口"><a href="#默认Iterator接口" class="headerlink" title="默认Iterator接口"></a>默认Iterator接口</h1><p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”（<code>iterable</code>）。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名<code>Symbol.iterator</code>，它是一个表达式，返回<code>Symbol</code>对象的<code>iterator</code>属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对象<code>obj</code>是可遍历的（<code>iterable</code>），因为具有<code>Symbol.iterator</code>属性。执行这个属性，会返回一个遍历器对象。该对象的根本特征就是具有<code>next</code>方法。每次调用<code>next</code>方法，都会返回一个代表当前成员的信息对象，具有<code>value</code>和<code>done</code>两个属性。</p>
</blockquote>
<p>原生具备<code>Iterator</code>接口的数据结构如下：</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li><code>TypedArray</code></li>
<li>函数的arguments对象</li>
<li><code>NodeList</code>对象</li>
</ul>
<p>数组的<code>Symbol.iterator</code>属性:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>


<p>对象部署遍历器接口并不是很必要，因为这时对象实际上被当作Map结构使用。</p>
<p>对象上部署遍历器接口的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  data: [ <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span> ],</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; self.data.length) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            value: self.data[index++],</span><br><span class="line">            done: <span class="literal">false</span></span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>类似数组的对象部署遍历器:</p>
<blockquote>
<p>类似数组的对象：存在数值键名和<code>length</code>属性</p>
</blockquote>
<p><code>Symbol.iterator</code>方法直接引用数组的 Iterator 接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)] <span class="comment">// 可以执行了</span></span><br></pre></td></tr></table></figure>
<p>类似数组的对象调用数组的<code>Symbol.iterator</code>方法的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="调用Iterator接口的场合"><a href="#调用Iterator接口的场合" class="headerlink" title="调用Iterator接口的场合"></a>调用Iterator接口的场合</h1><h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="(1)解构赋值"></a>(1)解构赋值</h2><p>对数组和 Set 结构进行解构赋值时，会默认调用<code>Symbol.iterator</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&#x27;a&#x27;</span>).add(<span class="string">&#x27;b&#x27;</span>).add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x,y] = set;</span><br><span class="line"><span class="comment">// x=&#x27;a&#x27;; y=&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = set;</span><br><span class="line"><span class="comment">// first=&#x27;a&#x27;; rest=[&#x27;b&#x27;,&#x27;c&#x27;];</span></span><br></pre></td></tr></table></figure>


<h2 id="2-扩展运算符"><a href="#2-扩展运算符" class="headerlink" title="(2)扩展运算符"></a>(2)扩展运算符</h2><p>扩展运算符（…）也会调用默认的 Iterator 接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">[...str] <span class="comment">//  [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, ...arr, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><strong>（3）yield*</strong></p>
<p><code>yield*</code>后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> generator = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = generator();</span><br><span class="line"></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-其他场合"><a href="#4-其他场合" class="headerlink" title="(4)其他场合"></a>(4)其他场合</h2><p>由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。</p>
<ul>
<li><code>for...of</code></li>
<li><code>Array.from()</code></li>
<li>Map(), Set(), <code>WeakMap()</code>,<code>WeakSet()</code>（比如<code>new Map([[&#39;a&#39;,1],[&#39;b&#39;,2]])</code>）</li>
<li><code>Promise.all()</code></li>
<li><code>Promise.race()</code></li>
</ul>
<h1 id="字符串的Iterator接口"><a href="#字符串的Iterator接口" class="headerlink" title="字符串的Iterator接口"></a>字符串的Iterator接口</h1><p>字符串是一个类似数组的对象也原生具有Iterator接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someString = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> someString[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line"><span class="comment">// &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = someString[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iterator.next()  <span class="comment">// &#123; value: &quot;h&quot;, done: false &#125;</span></span><br><span class="line">iterator.next()  <span class="comment">// &#123; value: &quot;i&quot;, done: false &#125;</span></span><br><span class="line">iterator.next()  <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Iterator接口与Generator函数"><a href="#Iterator接口与Generator函数" class="headerlink" title="Iterator接口与Generator函数"></a>Iterator接口与Generator函数</h1><p><code>Symbol.Iterator</code>方法的最简单实现,还是使用Generator函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myIterable = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者采用下面的简洁写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  * [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;hello&quot;</span></span><br><span class="line"><span class="comment">// &quot;world&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="遍历器对象的return-，throw"><a href="#遍历器对象的return-，throw" class="headerlink" title="遍历器对象的return()，throw()"></a>遍历器对象的return()，throw()</h1><p>遍历器对象除了具有<code>next</code>方法，还可以具有<code>return</code>方法和<code>throw</code>方法。如果自己写遍历器对象生成函数，那么<code>next</code>方法是必须部署的，<code>return</code>方法和<code>throw</code>方法是可选的。</p>
<h2 id="return-方法"><a href="#return-方法" class="headerlink" title="return()方法"></a>return()方法</h2><p>该方法的使用场合是，如果<code>for...of</code>循环提前退出（通常是因为出错，或者有<code>break</code>语句），就会调用<code>return</code>方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署<code>return</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLinesSync</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">return</span>() &#123;</span><br><span class="line">          file.close();</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>return</code>方法必须返回一个对象</p>
</blockquote>
<h2 id="throw-方法"><a href="#throw-方法" class="headerlink" title="throw()方法"></a>throw()方法</h2><p>该方法主要是配合Generator函数使用，一般的遍历器对象用不到这个方法。</p>
<h1 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h1><p>for…of循环作为遍历所有数据结构的统一方法。</p>
<p>for…of循环可以使用的范围包括数组、Set和Map结构、类似数组的对象、Generator对象以及字符串。</p>
<h2 id="Set和Map结构"><a href="#Set和Map结构" class="headerlink" title="Set和Map结构"></a>Set和Map结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> engines = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;Gecko&quot;</span>, <span class="string">&quot;Trident&quot;</span>, <span class="string">&quot;Webkit&quot;</span>, <span class="string">&quot;Webkit&quot;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> e <span class="keyword">of</span> engines) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Gecko</span></span><br><span class="line"><span class="comment">// Trident</span></span><br><span class="line"><span class="comment">// Webkit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> es6 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">es6.set(<span class="string">&quot;edition&quot;</span>, <span class="number">6</span>);</span><br><span class="line">es6.set(<span class="string">&quot;committee&quot;</span>, <span class="string">&quot;TC39&quot;</span>);</span><br><span class="line">es6.set(<span class="string">&quot;standard&quot;</span>, <span class="string">&quot;ECMA-262&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [name, value] <span class="keyword">of</span> es6) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name + <span class="string">&quot;: &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// edition: 6</span></span><br><span class="line"><span class="comment">// committee: TC39</span></span><br><span class="line"><span class="comment">// standard: ECMA-262</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码演示了如何遍历 Set 结构和 Map 结构。值得注意的地方有两个，首先，遍历的顺序是按照各个成员被添加进数据结构的顺序。其次，Set 结构遍历时，返回的是一个值，而 Map 结构遍历时，返回的是一个数组，该数组的两个成员分别为当前 Map 成员的键名和键值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>).set(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 1]</span></span><br><span class="line"><span class="comment">// [&#x27;b&#x27;, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&#x27; : &#x27;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a : 1</span></span><br><span class="line"><span class="comment">// b : 2</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--async函数</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/17%E3%80%81async%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。<br>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>async</code>函数就是将 Generator 函数的星号（<code>*</code>）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。</p>
</blockquote>
<p><code>async</code>函数对 Generator 函数的改进，体现在以下四点：</p>
<ol>
<li><p>内置执行器<br><code>async</code>函数自带执行器,也就是说,<code>async</code>函数的执行也普通函数一模一样,只要一行。不像<code>Generator</code>函数需要调用<code>next</code>方法。</p>
</li>
<li><p>更好的语义<br><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</p>
</li>
<li><p>更广的适用性</p>
<p><code>async</code>函数的<code>await</code>命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</p>
</li>
<li><p>返回值是<code>Promise</code></p>
<p><code>async</code>函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用<code>then</code>方法指定下一步的操作。</p>
</li>
</ol>
<blockquote>
<p> 进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而<code>await</code>命令就是内部<code>then</code>命令的语法糖。</p>
</blockquote>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="keyword">await</span> <span class="string">&#x27;啊&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> stockPrice = <span class="keyword">await</span> <span class="string">&#x27;嚏&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">getStockPriceByName().then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(result); <span class="comment">//ok</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="返回Promise对象"><a href="#返回Promise对象" class="headerlink" title="返回Promise对象"></a>返回Promise对象</h2><p><code>async</code>函数返回一个 Promise 对象。<br><code>async</code>函数内部<code>return</code>语句返回的值，会成为<code>then</code>方法回调函数的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>


<p><code>async</code>函数内部抛出错误，会导致返回的 Promise 对象变为<code>reject</code>状态。抛出的错误对象会被<code>catch</code>方法回调函数接收到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(</span><br><span class="line">  v =&gt; <span class="built_in">console</span>.log(v),</span><br><span class="line">  e =&gt; <span class="built_in">console</span>.log(e)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// Error: 出错了</span></span><br></pre></td></tr></table></figure>


<h2 id="Promise对象的状态变化"><a href="#Promise对象的状态变化" class="headerlink" title="Promise对象的状态变化"></a>Promise对象的状态变化</h2><p><code>async</code>函数返回的 Promise 对象，必须等到内部所有<code>await</code>命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">  <span class="keyword">let</span> html = <span class="keyword">await</span> response.text();</span><br><span class="line">  <span class="keyword">return</span> html.match(<span class="regexp">/&lt;title&gt;([\s\S]+)&lt;\/title&gt;/i</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">getTitle(<span class="string">&#x27;https://tc39.github.io/ecma262/&#x27;</span>).then(<span class="built_in">console</span>.log)</span><br><span class="line"><span class="comment">// &quot;ECMAScript 2017 Language Specification&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code>。</p>
</blockquote>
<h2 id="await命令"><a href="#await命令" class="headerlink" title="await命令"></a>await命令</h2><p>正常情况下，<code>await</code>命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="comment">// return 123;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义<code>then</code>方法的对象），那么<code>await</code>会将其等同于 Promise 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">timeout</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">resolve, reject</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">setTimeout</span>(</span><br><span class="line">      () =&gt; resolve(<span class="built_in">Date</span>.now() - startTime),</span><br><span class="line">      <span class="built_in">this</span>.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sleepTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(sleepTime);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 1000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是 Promise 对象，但是因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>处理。</p>
</blockquote>
<p><code>await</code>命令后面的 Promise 对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 不会执行,因为第一个await语句状态变成了reject。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，上面代码中，<code>await</code>语句前面没有<code>return</code>，但是<code>reject</code>方法的参数依然传入了<code>catch</code>方法的回调函数。这里如果在<code>await</code>前面加上<code>return</code>，效果是一样的。</p>
</blockquote>
<p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个<code>await</code>放在<code>try...catch</code>结构里面，这样不管这个异步操作是否成功，第二个<code>await</code>都会执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>
<p>另一种方法是<code>await</code>后面的 Promise 对象再跟一个<code>catch</code>方法，处理前面可能出现的错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// 出错了</span></span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>


<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>如果<code>await</code>后面的异步操作出错，那么等同于<code>async</code>函数返回的 Promise 对象被<code>reject</code>。<br>防止出错的方法，也是将其放在<code>try...catch</code>代码块之中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = <span class="keyword">await</span> firstStep();</span><br><span class="line">    <span class="keyword">const</span> val2 = <span class="keyword">await</span> secondStep(val1);</span><br><span class="line">    <span class="keyword">const</span> val3 = <span class="keyword">await</span> thirdStep(val1, val2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Final: &#x27;</span>, val3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><ul>
<li><p>最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p>
</li>
<li><p>多个<code>await</code>命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继发关系</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> getFoo();</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> getBar();</span><br><span class="line"></span><br><span class="line"><span class="comment">//改写</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> [foo, bar] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([getFoo(), getBar()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> fooPromise = getFoo();</span><br><span class="line"><span class="keyword">let</span> barPromise = getBar();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> fooPromise;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> barPromise;</span><br></pre></td></tr></table></figure></li>
<li><p><code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错。</p>
</li>
<li><p>async 函数可以保留运行堆栈。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Class的基本使用</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/18%E3%80%81class.html</url>
    <content><![CDATA[<a id="more"></a>

<p>在ES6之前,想要实现类需要通过构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.x = x;</span><br><span class="line">  <span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.x + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.y + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>通过构造函数来实现类写起来不清晰，且继承起来十分麻烦，很容易出错。</p>
<p><strong>所以，他来了</strong>，ES6引入了class（类）这个概念，作为对象模板。通过class关键字，可以定义类。</p>
<h1 id="class关键字"><a href="#class关键字" class="headerlink" title="class关键字"></a>class关键字</h1><p>ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到。一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.x + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.y + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>construntor</code>方法</strong>：这个方法就是类的构造方法,而this关键字则代表实例对象,简言之这里就是写类的属性的地方.</p>
<p>类里面还可以写一些方法：例如<code>toString()</code>方法</p>
<h2 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h2><p><code>constructor</code>方法是类的默认方法，通过new命令生成实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类必须使用<code>new</code>调用,否则会报错。这是它跟普通构造函数的一个主要区别。</p>
</blockquote>
<h2 id="类的实例"><a href="#类的实例" class="headerlink" title="类的实例"></a>类的实例</h2><p>生成类的实例的写法，与ES5完全一样，也是使用<code>new</code>命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> point = Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>


<h2 id="取值函数（getter）和存值函数（setter）"><a href="#取值函数（getter）和存值函数（setter）" class="headerlink" title="取值函数（getter）和存值函数（setter）"></a>取值函数（getter）和存值函数（setter）</h2><p>在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = &#123;</span><br><span class="line">            a:<span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">a</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">a</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.a = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> myclass = <span class="keyword">new</span> Myclass();</span><br><span class="line">myclass.a = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myclass.a);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置get和set的属性不能是constructor中的属性，但是可以跟属性值为对象中的属性同名。</p>
</blockquote>
<h2 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h2><p>类的属性名，可以采用表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> methodName = <span class="string">&#x27;getArea&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">length</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [methodName]() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;我是动态方法名哦!!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用属性表达式</span></span><br><span class="line">Square.getArea()</span><br></pre></td></tr></table></figure>




<h2 id="Class表达式"><a href="#Class表达式" class="headerlink" title="Class表达式"></a>Class表达式</h2><p>可以像函数一样使用表达式定义一个类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getClassName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name; <span class="comment">//Me</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:使用class表达式定义类，它的name属性只能在类的内部才能访问到,name属性会返回类的名字</p>
</blockquote>
<p>立即执行的Class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// &quot;张三&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>严格模式</li>
</ul>
<blockquote>
<p>类的内部默认就是严格模式</p>
</blockquote>
<ul>
<li>不存在提升</li>
</ul>
<blockquote>
<p>类不存在变量提升,这一点与ES5完全不同。</p>
</blockquote>
<ul>
<li>name属性</li>
</ul>
<blockquote>
<p>name属性返回紧跟在 class 关键字后面的类名</p>
</blockquote>
<ul>
<li>Generator 方法</li>
</ul>
<blockquote>
<p>如果某个方法之前加上星号( * )，就表示该方法是一个Generator函数</p>
</blockquote>
<ul>
<li>this的指向</li>
</ul>
<blockquote>
<p>类的方法内部如果含有this，它默认指向类的实例。</p>
<p>解决this指向问题:</p>
<ol>
<li>可以在构造方法中绑定this</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.printName = <span class="built_in">this</span>.printName.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.使用箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getThis = <span class="function">() =&gt;</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> Obj();</span><br><span class="line">myObj.getThis() === myObj <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>类相当于实例的原型,所有在类中定义的方法,都会被实例继承。</p>
<p>如果不想一个方法被继承，可以在方法前面加上static关键字，这就称为静态方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.baz();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">baz</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.bar() <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.bar()</span><br><span class="line"><span class="comment">// TypeError: foo.bar is not a function</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果静态方法包含this关键字，这个this指的是类，而不是实例。<br><em>父类的静态方法可以被子类继承，也可以在super对象上调用</em></p>
</blockquote>
<h1 id="new-target-属性"><a href="#new-target-属性" class="headerlink" title="new.target 属性"></a>new.target 属性</h1><p>该属性一般用在构造函数之中，返回<code>new</code>命令作用于的那个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span>.target !== <span class="literal">undefined</span>) &#123;      </span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;必须使用 new 命令生成实例&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>); <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> notAPerson = Person.call(person, <span class="string">&#x27;张三&#x27;</span>);  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>new.target</code>在Class内部调用返回当前Class</p>
<p>当子类继承父类时，<code>new.target</code>返回子类</p>
</blockquote>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><code>Class</code>通过<code>extend</code>关键字实现继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p><code>super</code>关键字既可以当作函数使用，也可以当作对象使用。这两种情况下，它的用法完全不同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">p</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.p()); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ES6要求，子类的构造函数中必须执行一次super函数，即调用父类的构造函数<br><strong>注意：</strong><br>1.super虽然代表了父类的构造函数，但是返回的是子类的实例，即super内部的this指的是子类的实例。<br>2.super作为函数只能用在子类的构造函数中。<br>3.super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Module</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/19%E3%80%81Module.html</url>
    <content><![CDATA[<p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<a id="more"></a>

<h1 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h1><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用<code>export</code>命令对外部输出了三个变量。</p>
</blockquote>
<ul>
<li><p><code>export</code>的另一种写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>




</li>
</ul>
<ul>
<li><p><code>export</code>命令除了输出变量，还可以输出函数和类（class）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对外输出一个函数<code>multiply</code></p>
</blockquote>
</li>
<li><p><code>export</code>输出的变量就是本来的名字，但是可以使用<code>as</code>关键字重命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><code>export</code>命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">export</span> m;   <span class="comment">//通过变量`m`，还是直接输出 1。`1`只是一个值，不是接口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------------------------*/</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> f;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;f&#125;;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><strong>注意：</strong><br><code>export</code>命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错（<code>import命令也是如此</code>）。</p>
<h1 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h1><p>通过<code>import</code>命令加载其他<code>JS</code>文件中<code>export</code>输出的模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p><code>import</code>命令使用<code>as</code>关键字，将输入的变量重命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><code>import</code>命令输入的变量都是只读的，因为它的本质是输入接口。但是修改对象属性是允许的（不允许在加载模块的脚本里面改写接口）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Syntax Error : &#x27;a&#x27; is read-only;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>import</code>后面的<code>from</code>指定模块文件的位置，可以是相对路径，也可以是绝对路径，<code>.js</code>后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;myMethod&#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码不会报错，因为<code>import</code>的执行早于<code>foo</code>的调用。这种行为的本质是，<code>import</code>命令是编译阶段执行的，在代码运行之前。</p>
</blockquote>
</li>
<li><p><code>import</code>是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">&#x27;f&#x27;</span> + <span class="string">&#x27;oo&#x27;</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">module</span> = <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="built_in">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;module1&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;module2&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>import</code>语句会执行所加载的模块，因此可以有下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果多次重复执行同一句<code>import</code>语句，那么只会执行一次，而不会执行多次。</p>
</blockquote>
</li>
</ul>
<h1 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h1><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//使用星号整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;圆面积：&#x27;</span> + circle.area(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;圆周长：&#x27;</span> + circle.circumference(<span class="number">14</span>));</span><br></pre></td></tr></table></figure>


<h1 id="export-default命令"><a href="#export-default命令" class="headerlink" title="export default命令"></a>export default命令</h1><p>使用该命令为模块指定默认输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line">customName(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。</p>
</blockquote>
<h1 id="export与import的复合写法"><a href="#export与import的复合写法" class="headerlink" title="export与import的复合写法"></a>export与import的复合写法</h1><p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，<code>foo</code>和<code>bar</code>实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用<code>foo</code>和<code>bar</code>。</p>
<h1 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h1><p><code>const</code>声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constants.js 模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test1.js 模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">&#x27;./constants&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test2.js 模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">&#x27;./constants&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>如果要使用的常量非常多，可以建一个专门的<code>constants</code>目录，将各种常量写在不同的文件里面，保存在该目录下。</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--let和const命令</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/1%E3%80%81let&amp;&amp;const.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h1><ul>
<li>let命令只在所在的代码块内有效</li>
<li>let命令很适合for循环的计数器</li>
<li>let命令不存在变量提升,在变量声明前使用会报ReferenceError错误</li>
<li>let不允许在相同的作用域内,重复声明同一个变量</li>
</ul>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES5只有全局作用域和函数作用域,没有块级作用域,这带来很多不合理场景。<br>第一种场景:内层变量可能会覆盖外层变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">//解释</span></span><br><span class="line"><span class="comment">/*函数内部if代码块外部使用外层的tmp变量,内部使用内层的tmp变量,但是由于存在</span></span><br><span class="line"><span class="comment">*变量提升,内层的tmp覆盖了外层的tmp变量</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<p>第二种场景:用来计数的循环变量泄露为全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*循环变量i只用来控制循环,但是循环结束后,他并没有小时,泄露成了全局变量</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<h2 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h2><p>let和const为JavaScript提供了块级作用域<br>ES6允许块级作用域的多级嵌套</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;</span><br><span class="line">	<span class="keyword">let</span> test = <span class="number">12</span>;</span><br><span class="line">    &#123;<span class="keyword">let</span> text = <span class="number">12</span>;&#125;</span><br><span class="line">&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>块级作用域的出现,使用立即执行函数来防止污染全局变量已经不再必要了</p>
<h2 id="块级作用域域函数声明"><a href="#块级作用域域函数声明" class="headerlink" title="块级作用域域函数声明"></a>块级作用域域函数声明</h2><p>ES5规定,函数只能在顶层作用域和函数作用域之中声明,不能在块级作用中声明函数,但是浏览器没有遵守这个规定,为了兼容以前的旧代码,还是支持在块级作用域之中声明函数</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 重复声明一次函数f</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>在ES5环境中运行,if内声明的函数会被提升到函数头部:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 环境</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>ES6引入块级作用域后,明确允许在块级作用域之中声明函数.函树声明语句的行为类似于let,在块级作用域之外不可引用.<br>但是ES6规定,浏览器的实现可以不遵守上面的规定,有自己的行为方式(为了兼容以前的老代码).</p>
<ul>
<li>允许在块级作用域内声明函数</li>
<li>函数声明类似于var,即会提升到全局作用域或函数作用域的头部。</li>
<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>
</ul>
<blockquote>
<p>注意:上面的三条规则只对ES6的浏览器实现有效,其他浏览器环境的实现不用遵守</p>
</blockquote>
<p>上面的例子在ES6环境中运行如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器的 ES6 环境</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f();</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// Uncaught TypeError: f is not a function</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>综上所述,应该避免在块级作用域内声明函数,如果确实需要,也应该写成函数表达式,而不是函数声明语句。<br>注意:ES6块级作用域必须有大括号,如果没有大括号,JavaScript引擎就认为不存在块级作用域</p>
</blockquote>
<h1 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h1><p>const声明一个只读的常量,一旦声明,常量的值就不能改变。<br>const一旦声明了变量,就必须立即初始化,不能留到以后赋值,不然会报错。<br>const声明的变量也是不存在变量提升的,不能重复声明。</p>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>const定义的常量不是变量的值不得改动,而是变量指向的的那个内存地址保存的数据不得改动</p>
<ul>
<li>对于简单类型的数据(数值,字符串,布尔值),值就保存在变量指向的那个内存地址,因此等同于常量</li>
<li>对于复合类型的数据(主要是对象和数组),变量指向的内存地址,保存的只是一个指向实际数据的指针,const只能保证这个指针是固定的,但是它指向的数据结构是不是可变的就不能控制了</li>
</ul>
<h1 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h1><p>在ES5中,全局变量就等同于顶层对象(window)的属性,这非常不利于模块化编程,因为顶层对象的属性到处都可以修改。<br>ES6中的let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p>
<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><ol>
<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块</li>
<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象，否则会指向当前对象（运行环境）</li>
</ol>
<h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>概念:使用let或const命令声明变量之前,该变量都是不可用的,这在语法上,称为”暂时性死区”.<br>暂时性死区意味着typeof不再是一个百分之百安全的操作.</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x;       <span class="comment">//ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--变量的解构和赋值</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/2%E3%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E5%92%8C%E8%B5%8B%E5%80%BC.html</url>
    <content><![CDATA[<a id="more"></a>

<p>ES6允许按照一定模式,从数组和对象中提取值,对变量进行赋值 ,着称为结构赋值</p>
<h1 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的结构赋值</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的写法等同于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>本质上,这种写法属于”模式匹配”,只要等号两边的模式相同,左边的变量就会被赋予对应的值<br>如果结构不成功变量的值等于undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1      </span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>];</span><br><span class="line">third <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1      </span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1     </span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x <span class="comment">// &quot;a&quot;      </span></span><br><span class="line">y <span class="comment">// undefined     </span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>…运算符为Iterator 提供的</p>
</blockquote>
<p>结构不完全,即等号左边的模式,只匹配一部分的等号右边的数组,这种情况下,结构依然可以成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>如果等号的右边不是数组(严格的来说,不是可遍历的结构),将会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>上面前五个表达式的值转为对象以后不具备Iterator接口,最后一个本身就不具备Iterator接口<br>对于set结构,也可以使用数组的结构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>事实上,只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>结构赋值允许指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<p>ES6内部使用严格相等运算符(===)判断一个位置是否有值,所以,只有当一个数组成员严格等于undefined,默认值才会生效如果默认值是一个表达式,那么这个表达式是惰性求值的,即只有在用到的时候,才会求值(例如函数表达式)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x=f()] = [<span class="number">1</span>];</span><br><span class="line"><span class="comment">//由于数组成员不为undefined,所以函数f不会执行</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:默认值可以引用结构赋值的其他变量,但该变量必须已经声明</p>
</blockquote>
<h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>结构不仅可以用于数组,还可以用于对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:foo,<span class="attr">bar</span>:bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">&#x27;aaa&#x27;</span>,<span class="attr">bar</span>:<span class="string">&#x27;bbb&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//简写:let &#123;foo,bar&#125; = &#123;foo:&#x27;aaa&#x27;,bar:&#x27;bbb&#x27;&#125;;</span></span><br><span class="line">foo     <span class="comment">//&#x27;aaa&#x27;</span></span><br><span class="line">bar     <span class="comment">//&#x27;bbb&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中,键值对的意思是    <strong>属性名: 变量名</strong><br>对象的解构赋值的内部机制,是先找到同名属性,然后再赋值给对应的变量.真正的被赋值的是后者,而不是前者</p>
<p><strong>与数组解构的不同之处:</strong></p>
<ol>
<li>数组解构中数组的元素必须按次序排列,变量的取值由它的位置决定;</li>
<li>但是对象解构赋值没有次序要求,只要变量与属性同名,才能取到正确的值</li>
<li>同数组解构一样,如果解构失败,变量的值等于undefined</li>
</ol>
<blockquote>
<p>注意:  对象的解构赋值可以取到继承的属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo &#125; = obj1;</span><br><span class="line">foo <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a><strong>默认值</strong></h2><p>对象的解构也可以指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x=<span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">x   <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>:y=<span class="number">3</span>&#125; = &#123;<span class="attr">x</span>:<span class="number">5</span>&#125;;</span><br><span class="line">y  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>默认值生效的条件是,对象的属性值严格等于undefined</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h2><p>(1)如果要讲一个已经声明的变量用于解构赋值,必须非常小心</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">//上面代码的写法会报错，因为 JavaScript 引擎会将&#123;x&#125;理解成一个代码块，</span></span><br><span class="line"><span class="comment">//从而发生语法错误。只有不将大括号写在行首，</span></span><br><span class="line"><span class="comment">//避免 JavaScript 将其解释为代码块，才能解决这个问题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>(2)由于数组本质上是特殊的对象,因此可以对数组进行对象属性的解构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>:first,[arr.length -<span class="number">1</span>]:last&#125; = arr;</span><br><span class="line">first    <span class="comment">//1</span></span><br><span class="line">last     <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h1><p>字符串在解构赋值时会被转成一个类似数组的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,d,e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a   <span class="comment">//&quot;h&quot;</span></span><br><span class="line">b   <span class="comment">//&quot;e&quot;</span></span><br><span class="line">c   <span class="comment">//&quot;l&quot;</span></span><br><span class="line">d   <span class="comment">//&quot;l&quot;</span></span><br><span class="line">e   <span class="comment">//&quot;o&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h1><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>:s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>解构赋值的规则: 只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<h1 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h1><p>函数的参数也可以使用解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>函数参数的解构使用默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure>
<h1 id="圆括号的问题"><a href="#圆括号的问题" class="headerlink" title="圆括号的问题"></a>圆括号的问题</h1><p>建议只要有可能，就不要在模式中放置圆括号。</p>
<h2 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h2><ol>
<li>变量声明语句</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全部报错</span></span><br><span class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>
<p>2.函数参数</p>
<p>函数参数也属于变量声明,因此不能带有圆括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z)]</span>) </span>&#123; <span class="keyword">return</span> z; &#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[z,(x)]</span>) </span>&#123; <span class="keyword">return</span> x; &#125;</span><br></pre></td></tr></table></figure>
<p>3.赋值语句的模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span><br><span class="line">([a]) = [<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将整个模式放在圆括号之中，导致报错。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">[(&#123; <span class="attr">p</span>: a &#125;), &#123; <span class="attr">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一部分模式放在圆括号之中，导致报错。</span></span><br></pre></td></tr></table></figure>
<h2 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h2><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br><span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span><br><span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>1.交换变量的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>
<p>2.从函数返回多个值<br>将函数返回值放在一个数组或对象里返回,用解构赋值进行取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>
<p>3.函数参数的定义<br>解构赋值可以方便地将一组参数与变量名对应起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>4.提取JSON数据<br>解构赋值对提取 JSON 对象中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure>
<p>5.函数参数的默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x:x=<span class="number">1</span>, y:y=<span class="number">2</span>, z:z=<span class="number">3</span>&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;);    <span class="comment">//x=1 y=2 z=3</span></span><br></pre></td></tr></table></figure>
<p>6.遍历Map结构</p>
<p>任何部署了 Iterator 接口的对象，都可以用for…of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure>
<p>只想获取键名,或者获取键值,可以写成下面的形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.输入模块的指定方法</p>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--字符串的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="字符的Unicode表示法"><a href="#字符的Unicode表示法" class="headerlink" title="字符的Unicode表示法"></a>字符的Unicode表示法</h1><p>ES6 加强了对 Unicode 的支持，允许采用\uxxxx形式表示一个字符,其中xxxx表示字符的Unicode码点<br>表示范围:   \u0000 ~ \uFFFF<br>超出范围的字符,必须用两个双字节的形式表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;\uD842\uDFB7&quot;</span></span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br><span class="line"><span class="string">&quot;\u20BB7&quot;</span></span><br><span class="line"><span class="comment">// &quot; 7&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中,如果直接在\u后面跟上超过0xFFFF的数值,JavaScript会理解成 \u20BB+7. 由于\u20BB是一个不可打印字符,所以只会显示一个空格,后面跟着一个7</p>
<p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;\u&#123;20BB7&#125;&quot;</span></span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;&quot;</span></span><br><span class="line"><span class="comment">// &quot;ABC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="number">123</span>;</span><br><span class="line">hell\u&#123;6F&#125; <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\u&#123;1F680&#125;&#x27;</span> === <span class="string">&#x27;\uD83D\uDE80&#x27;</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p>
<p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\z&#x27;</span> === <span class="string">&#x27;z&#x27;</span>  <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\172&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\x7A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\u007A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\u&#123;7A&#125;&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h1><p>ES6位字符串添加了遍历器接口,使得字符串可以被for…of循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">&#x27;foo&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;f&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>
<p>除了遍历字符串,这个遍历器最大的有点是可以识别大于0xFFFF的码点.传统的for循环无法识别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(text[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot; &quot;</span></span><br><span class="line"><span class="comment">// &quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> text) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="直接输入U-2028-和-U-2029"><a href="#直接输入U-2028-和-U-2029" class="headerlink" title="直接输入U+2028 和 U+2029"></a>直接输入U+2028 和 U+2029</h1><p>JavaScript字符串允许直接输入字符,以及输入字符的转义形式<br>例如: <code>&#39;中&#39; === &#39;\u4e2d&#39;         //true</code><br>但是,JavaScript规定有五个字符,不能直接在字符串里面直接使用,只能使用转义形式.</p>
<ul>
<li>U+005C：反斜杠（reverse solidus)</li>
<li>U+000D：回车（carriage return）</li>
<li>U+2028：行分隔符（line separator）</li>
<li>U+2029：段分隔符（paragraph separator）</li>
<li>U+000A：换行符（line feed）</li>
</ul>
<p>对于json格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）</p>
<h1 id="JSON-stringify-的改造"><a href="#JSON-stringify-的改造" class="headerlink" title="JSON.stringify()的改造"></a>JSON.stringify()的改造</h1><p>UTF-8标准规定,0xD800到0xDFFF之间的码点,不能单独使用,必须配对使用<br>现在JSON.stringify方法可能返回不符合UTF-8标准的字符串(可能返回0xD800到0xDFFF之间的单个码点)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\u&#123;D834&#125;&#x27;</span>) <span class="comment">// &quot;&quot;\\uD834&quot;&quot;</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\uDF06\uD834&#x27;</span>) <span class="comment">// &quot;&quot;\\udf06\\ud834&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果遇到0xD800到0xDFFF之间的单个码点,或者不存在的匹配形式,它会返回转义字符串,留给应用自己决定下一步的处</p>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>ES6中使用反引号(`)标识模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span><br><span class="line"><span class="string">`In JavaScript &#x27;\n&#x27; is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串(所有的空格和缩进都会被保留在输出之中)</span></span><br><span class="line"><span class="comment">//可以使用trim方法消除行首行尾的缩进....</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string">     not legal.`</span></span><br></pre></td></tr></table></figure>
<p>如果在模板中需要使用反引号表示,则需要使用反斜杠进行转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting = <span class="string">`\`Yo\` World!`</span>;</span><br></pre></td></tr></table></figure>
<p>模板字符串中嵌入<code>变量(js表达式)</code>,需要将<code>变量名(js表达式)</code>写在<code>$&#123;&#125;</code>之中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//嵌入变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;name&#125;</span>,年龄:<span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js表达式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span><br><span class="line"><span class="comment">// &quot;1 + 4 = 5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class="line"><span class="comment">// &quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span>    <span class="comment">// foo Hello World bar</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:<br>如果大括号中的值不是字符串,将按照一般的规则转为字符串<br>如果字符串中的变量没有声明,将报错<br>大括号内部是一个字符串,将会原样输出</p>
</blockquote>
<p>模板字符串可以嵌套:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;table&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/table&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<h1 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h1><p>模板字符串跟在一个函数名后面,该函数将被调用来处理这个模板字符串,这些被称为”标签模板”功能<br>标签: 指的就是函数<br>模板字符串:函数的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert<span class="string">`123`</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">alert(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
<p> 如果标签模板里面有变量,就不是简单的调用了,而是将模板字符串先处理成多个参数,再调用函数,</p>
<p> 函数会接受一个数组和模板里面的变量值 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">tag([<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27; world &#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="number">15</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p>第一个参数为数组(该数组有一个raw属性,保存的是转义后的原字符串),该数组的成员是模板字符串中那些没有变量替换的部分, 也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推.</p>
<p>其他参数为模板字符串中各个变量被替换后的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用函数的rest参数(形式为...变量名)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">strArray,...values</span>)</span>&#123;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模板字符串的限制"><a href="#模板字符串的限制" class="headerlink" title="模板字符串的限制"></a>模板字符串的限制</h2><p>模板字符串默认会将字符串转义,导致无法嵌入其他语言</p>
<h1 id="字符串新增的方法"><a href="#字符串新增的方法" class="headerlink" title="字符串新增的方法"></a>字符串新增的方法</h1><h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String,fromCodePoint()"></a>String,fromCodePoint()</h2><p>用于从Unicode码点返回对应字符,可以识别码点大于0xFFFF的字符(弥补了ES5中该方法的不足)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">0x20BB7</span>)</span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>如果String.fromCodePoint方法有多个参数,则他们会被合并成一个字符串返回</p>
<h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h2><p>该方法返回一个斜杠都被转义(即斜杠前面再加一个斜杠)的字符串,往往用于模板字符串的处理方法<br>如果原字符串的斜杠已经被转义,那么该方法会进行再次转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span></span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\\\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>该方法也可以作为正常的函数使用,这时,他的第一个参数应该是一个具有raw属性的对象,且raw属性的值应该是一个数组.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: <span class="string">&#x27;test&#x27;</span> &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// &#x27;t0e1s2t&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: [<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>] &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h2 id="实例方法-codePointAt"><a href="#实例方法-codePointAt" class="headerlink" title="实例方法: codePointAt()"></a>实例方法: codePointAt()</h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节.对于那些需要4个字节储存的字符(Unicode码点大于0xFFFF的字符),JavaScript 会认为它们是两个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;𠮷&quot;</span>;</span><br><span class="line"></span><br><span class="line">s.length <span class="comment">// 2</span></span><br><span class="line">s.charAt(<span class="number">0</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line">s.charAt(<span class="number">1</span>) <span class="comment">// &#x27;&#x27;</span></span><br><span class="line">s.charCodeAt(<span class="number">0</span>) <span class="comment">// 55362</span></span><br><span class="line">s.charCodeAt(<span class="number">1</span>) <span class="comment">// 57271</span></span><br></pre></td></tr></table></figure>
<p>对于这种4个字节的字符,JavaScript不能正确处理,字符串长度会误判为2,而且charAt()方法无法读取整个字符,charCodeAt()方法只能分别返回前两个字节和后两个字节的值.<br>ES6提供的codePointAt()方法,能够正确的处理4个字节储存的字符,返回个一个字符的码点.</p>
<p>参数:字符在字符串中的位置(从0开始,整个字符码点的位置)</p>
<p>返回值: 码点的十进制值(可以通过toString方法进行进制的转换)</p>
<p>codePointAt()方法的参数,仍然是不正确的,比如，上面代码中，字符a在字符串的正确位置序号应该是 1，但是必须向codePointAt()方法传入 2.</p>
<p>解决办法:</p>
<p>1).使用for…of循环(它会正确识别 32 位的 UTF-16 字符。)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;𠮷a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure>
<p>2).使用扩展运算符(…)进行展开运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...<span class="string">&#x27;𠮷a&#x27;</span>]; <span class="comment">// arr.length === 2</span></span><br><span class="line">arr.forEach(</span><br><span class="line">  ch =&gt; <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>))</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure>
<h2 id="实例方法-normalize"><a href="#实例方法-normalize" class="headerlink" title="实例方法:normalize()"></a>实例方法:normalize()</h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。</p>
<p>一:直接提供带重音符号的字符，比如Ǒ（\u01D1）</p>
<p>二:提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如o（\u004F）和ˇ \u030C）合成Ǒ（\u004F\u030C）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>===<span class="string">&#x27;\u004F\u030C&#x27;</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>.length <span class="comment">// 1</span></span><br><span class="line"><span class="string">&#x27;\u004F\u030C&#x27;</span>.length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>
<p>normalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。</p>
<ul>
<li>NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li>
<li>NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>
<li>NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）</li>
<li>NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>
</ul>
<blockquote>
<p>注意: normalize方法目前不能识别三个或三个以上字符的合成.  这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>
</blockquote>
<h2 id="实例方法-includes-startsWith-endsWith"><a href="#实例方法-includes-startsWith-endsWith" class="headerlink" title="实例方法:includes() , startsWith() , endsWith()"></a>实例方法:includes() , startsWith() , endsWith()</h2><ul>
<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>
<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;!&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个参数表示从第n个位置知道字符串结束</span></span><br><span class="line">s.startsWith(<span class="string">&#x27;world&#x27;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个参数表示针对前n个字符</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="实例方法-repeat"><a href="#实例方法-repeat" class="headerlink" title="实例方法: repeat()"></a>实例方法: repeat()</h2><p>repeat()方法返回一个新字符串,表示将原字符串重复n次.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>) <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">2</span>) <span class="comment">// &quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="number">0</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li>参数如果是小数,会被取整(小数的整数部分)</li>
<li>参数如果是负数或infinity,会报错</li>
<li>参数是0到-1之间的小数,则等同于0(这是因为会先进行取整运算)</li>
<li>参数NaN等同于0</li>
<li>参数是字符串,则会先转换成数字</li>
</ul>
</blockquote>
<h2 id="实例方法-padStart-padEnd"><a href="#实例方法-padStart-padEnd" class="headerlink" title="实例方法: padStart() , padEnd()"></a>实例方法: padStart() , padEnd()</h2><p>用途:字符串长度补全, padStart()用于头部补全, padEnd()用于尾部补全</p>
<p>参数:</p>
<p>第一个参数:字符串补全生效的最大长度</p>
<p>第二个参数:用来补全的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li>如果原字符串的长度等于或大于最大长度,则字符串补全不生效,返回原字符串</li>
</ul>
<ul>
<li><p>如果用来补全的字符串与原字符串两者的长度之和超过了最大长度,则会截去超出位数的补全字符串 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0123456789&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;0123456abc&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>如果省略第二个参数,默认使用空格补全长度</li>
</ul>
</blockquote>
<h2 id="实例方法-trimStart-trimEnd"><a href="#实例方法-trimStart-trimEnd" class="headerlink" title="实例方法: trimStart() , trimEnd()"></a>实例方法: trimStart() , trimEnd()</h2><p>这两个方法的行为与trim一致,trimStart()消除字符串头部的空格,trimEnd()消除尾部的空格,并返回新字符串,不会修改原始字符串.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;  abc  &#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.trim() <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">s.trimStart() <span class="comment">// &quot;abc  &quot;</span></span><br><span class="line">s.trimEnd() <span class="comment">// &quot;  abc&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:除了空格键,这两个方法对字符串头部(或尾部)的tab键 , 换行等不可见的空白符号也有效</p>
</blockquote>
<h2 id="实例方法-matchAll"><a href="#实例方法-matchAll" class="headerlink" title="实例方法: matchAll()"></a>实例方法: matchAll()</h2><p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--正则的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/4%E3%80%81%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>


<h1 id="RegExp构造函数"><a href="#RegExp构造函数" class="headerlink" title="RegExp构造函数"></a>RegExp构造函数</h1><p>在ES5中,RegExp构造函数的参数有两种情况</p>
<p>第一种: 参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br></pre></td></tr></table></figure>
<p>第二种: 参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>
<p>但是不允许使用第二个参数添加修饰符,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br></pre></td></tr></table></figure>
<p>ES6中改变了这种行为,如果RegExp构造函数第一个参数是一个正则对象,那么可以使用第二个参数指定修饰符,而且返回的正则表达式会忽略原有的正则表达式的修饰符,只使用新指定的修饰符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">&#x27;i&#x27;</span>).flags</span><br><span class="line"><span class="comment">// &quot;i&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String.prototype.match 调用 RegExp.prototype[Symbol.match]</span></span><br><span class="line"><span class="comment">///String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</span></span><br><span class="line"><span class="comment">//String.prototype.search 调用 RegExp.prototype[Symbol.search]</span></span><br><span class="line"><span class="comment">//String.prototype.split 调用 RegExp.prototype[Symbol.split]</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h1><p>字符串对象共有4个方法,可以使用正则表达式:</p>
<ul>
<li>match()</li>
<li>replace()</li>
<li>search()</li>
<li>split()</li>
</ul>
<p>ES6将这4个方法,在语言内部全部调用RegExp的实例方法,从而做到所有与正则相关的方法,全都定义在RegExp对象上.</p>
<ul>
<li>String.prototype.match 调用 RegExp.prototype[Symbol.match]</li>
<li>String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</li>
<li>String.prototype.search 调用 RegExp.prototype[Symbol.search]</li>
<li>String.prototype.split 调用 RegExp.prototype[Symbol.split]</li>
</ul>
<h1 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h1><p>ES6对正则表达式添加了u修饰符,含义为”Unicode 模式”,用来正确处理大于\uFFFF的Unicode 字符(即会正确处理四个字节的 UTF-16 编码)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^\uD83D/u.test(<span class="string">&#x27;\uD83D\uDC2A&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">/^\uD83D/.test(<span class="string">&#x27;\uD83D\uDC2A&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>加了u修饰符后,ES6会将 \uD83D\uDC2A 识别为一个字符,所以第一行代码为false</p>
<blockquote>
<p>总结:要想识别码点大于oxFFFF的Unicode字符,就需要加上u修饰符</p>
</blockquote>
<p><strong>一旦加上u修饰符号,就会修改下面这些正则表达式的行为:</strong></p>
<ol>
<li>点字符</li>
</ol>
<p>点( . )字符在正则表达式中,含义是除了换行符以外的任意单个字符,对于码点大于oxFFFF的Unicode字符,点字符不能识别,必须加上u修饰符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;𠮷&#x27;</span>;</span><br><span class="line"></span><br><span class="line">/^.$/.test(s) <span class="comment">// false</span></span><br><span class="line">/^.$/u.test(s) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<p>2.Unicode字符表示法</p>
<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 u 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不加u修饰符,正则表达式会认为匹配61个连续的u</span></span><br><span class="line">/\u&#123;<span class="number">61</span>&#125;/.test(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">/\u&#123;<span class="number">61</span>&#125;/u.test(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/\u&#123;20BB7&#125;/u.test(<span class="string">&#x27;𠮷&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>3.量词</p>
<p>使用u修饰符后,所有量词都会正确识别码点大于0xFFFF的Unicode字符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">2</span>&#125;/.test(<span class="string">&#x27;aa&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/a&#123;<span class="number">2</span>&#125;/u.test(<span class="string">&#x27;aa&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/u.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>4.预定义模式</p>
<p>u修饰符也影响到预定义模式(空白字符类), 加了u修饰符,才能正确识别码点大于oxFFFF的Unicode字符</p>
<p>5.i修饰符</p>
<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/704242ba738622b265a23b39a6724a07/0" alt="img">             </p>
<h1 id="RegExp-prototype-unicode-属性"><a href="#RegExp-prototype-unicode-属性" class="headerlink" title="RegExp.prototype.unicode 属性"></a>RegExp.prototype.unicode 属性</h1><p>检查一个正则表达式是否设置了u修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h1><p>ES6添加了y修饰符,叫做”粘连(sticky)”修饰符</p>
<p>y修饰符的作用与g修饰符类似,也是全局匹配,后一次匹配都从上一次匹配成功的下一个位置开始。但是y修饰符确保匹配必须从剩余的第一个位置开始(这也就是”粘连”的涵义)</p>
<h1 id="RegExp-prototype-sticky属性"><a href="#RegExp-prototype-sticky属性" class="headerlink" title="RegExp.prototype.sticky属性"></a>RegExp.prototype.sticky属性</h1><p>检测正则表达式是否设置了y修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="RegExp-prototype-flags属性"><a href="#RegExp-prototype-flags属性" class="headerlink" title="RegExp.prototype.flags属性"></a>RegExp.prototype.flags属性</h1><p>返回正则表达式的修饰符</p>
<h1 id="s修饰符-dotAll模式"><a href="#s修饰符-dotAll模式" class="headerlink" title="s修饰符:dotAll模式"></a>s修饰符:dotAll模式</h1><p>点<code>( . )</code>字符不能匹配的两种情况:</p>
<ol>
<li>四个字节的UTF-16字符</li>
<li>行终止符(表示一行的终结)</li>
</ol>
<ul>
<li><p>U+000A 换行符(\n)</p>
</li>
<li><p>U+000D 回车符(\r)</p>
</li>
<li><p>U+2028 行分隔符（line separator）</p>
</li>
<li><p>U+2029 段分隔符（paragraph separator）</p>
</li>
</ul>
<p>加了s修饰符后,点( . )可以代表任意单个字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/foo.bar/s.test(<span class="string">&#x27;foo\nbar&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>使用<code>dotAll</code>属性检查一个正则表达式是否设置了s修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="Unicode属性类"><a href="#Unicode属性类" class="headerlink" title="Unicode属性类"></a>Unicode属性类</h1><p>新的类的写法:</p>
<ul>
<li>大写的P : <code>\P&#123;...&#125;</code></li>
<li>小写的p : <code>\p&#123;...&#125;</code></li>
</ul>
<p>以上两种写法允许正则表达式匹配符合<code>Unicode</code>某种属性的所有字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Unicode 属性类要指定属性名和属性值。</span></span><br><span class="line">\p&#123;UnicodePropertyName=UnicodePropertyValue&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于某些属性，可以只写属性名，或者只写属性值。</span></span><br><span class="line">\p&#123;UnicodePropertyName&#125;</span><br><span class="line">\p&#123;UnicodePropertyValue&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li>大写P的写法是小写p的反向匹配,即匹配不满足条件的字符</li>
<li>这两种类(写法)只对Unicode有效,所以使用的时候一定要加上u修饰符,不然会报错</li>
</ul>
</blockquote>
<h1 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h1><p>原先获取分组内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">&#x27;1999-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> year = matchObj[<span class="number">1</span>]; <span class="comment">// 1999</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj[<span class="number">2</span>]; <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj[<span class="number">3</span>]; <span class="comment">// 31</span></span><br></pre></td></tr></table></figure>
<p>分组只能通过数字序号引用来获取,一旦组的顺序变了,引用的时候就必须修改序号<br>具名组匹配: 为每个分组指定一个名字<br>用法: 模式的头部添加<code>“问号 + 尖括号 + 组名” (?&lt;year&gt;)</code>;<br>获取: 匹配结果的groups属性上引用组名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">&#x27;1999-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> year = matchObj.groups.year; <span class="comment">// 1999</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj.groups.month; <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj.groups.day; <span class="comment">// 31</span></span><br><span class="line"><span class="comment">//以前的写法在这里也依然有效</span></span><br></pre></td></tr></table></figure>
<p>如果具名组没有匹配,那么对应的groups对象的属性会是<code>undefined</code></p>
<h2 id="使用解构赋值和替换"><a href="#使用解构赋值和替换" class="headerlink" title="使用解构赋值和替换"></a>使用解构赋值和替换</h2><p>使用解构赋值直接从匹配结果上为变量赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">groups</span>: &#123;one, two&#125;&#125; = <span class="regexp">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class="string">&#x27;foo:bar&#x27;</span>);</span><br><span class="line">one  <span class="comment">// foo</span></span><br><span class="line">two  <span class="comment">// bar</span></span><br></pre></td></tr></table></figure>
<p>字符串替换时，使用%&lt;组名&gt;引用具名组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;2015-01-02&#x27;</span>.replace(re, <span class="string">&#x27;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;02/01/2015&#x27;</span></span><br></pre></td></tr></table></figure>
<p>replace的第二个参数也可以是个函数,该函数的参数序列如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;2015-01-02&#x27;</span>.replace(re, (</span><br><span class="line">   matched, <span class="comment">// 整个匹配结果 2015-01-02</span></span><br><span class="line">   capture1, <span class="comment">// 第一个组匹配 2015</span></span><br><span class="line">   capture2, <span class="comment">// 第二个组匹配 01</span></span><br><span class="line">   capture3, <span class="comment">// 第三个组匹配 02</span></span><br><span class="line">   position, <span class="comment">// 匹配开始的位置 0</span></span><br><span class="line">   S, <span class="comment">// 原字符串 2015-01-02</span></span><br><span class="line">   groups <span class="comment">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span><br><span class="line"> ) =&gt; &#123;</span><br><span class="line"> <span class="keyword">let</span> &#123;day, month, year&#125; = groups;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;year&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\k&lt;组名&gt;的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span>;</span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!ab&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>数字引用依然有效(可以同时使用)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数字引用</span></span><br><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span>;</span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!ab&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//混合使用</span></span><br><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$/</span>;</span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc!abc&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc!ab&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h1 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h1><p>用法: 字符串.matchAll(正则表达式)<br>用于一次性取出所有匹配,返回一个遍历器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;test1test2test3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g 修饰符加不加都可以</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> string.matchAll(regex)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;, index: 0, input: &quot;test1test2test3&quot;]</span></span><br><span class="line"><span class="comment">//[&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;, index: 5, input: &quot;test1test2test3&quot;]</span></span><br><span class="line"><span class="comment">//[&quot;test3&quot;, &quot;e&quot;, &quot;st3&quot;, &quot;3&quot;, index: 10, input: &quot;test1test2test3&quot;]</span></span><br></pre></td></tr></table></figure>
<p>遍历器转换为数组:<br>使用…运算符和Array.from()</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--数值的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/5%E3%80%81%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h1><p>ES6提供了新的写法<br>二进制:  前缀使用0b(或0B)表示<br>八进制: 前缀使用0o(或0O)表示</p>
<h1 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite() , Number.isNaN()"></a>Number.isFinite() , Number.isNaN()</h1><h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h2><p>检查一个数值是否有限的(即不是Infinity),如果参数类型不是数值,返回false</p>
<h2 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h2><p>检查一个值是否为<code>NaN</code>,如果参数类型不是<code>NaN</code>,<code>Number.isNaN</code>返回<code>false</code><br>与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别:<br>传统方法先调用Number()将非数值的值转为数值,再进行判断<br><em>而这两个新方法只对数值有效</em></p>
<h1 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt() , Number.parseFloat()"></a>Number.parseInt() , Number.parseFloat()</h1><p>ES6将全局方法<code>parseInt()</code>和<code>parseFloat()</code>,移植到Number对象上,行为完全保持不变</p>
<h1 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h1><p>判断一个数值是否为整数,如果参数不是数值,该方法返回false</p>
<p>注意:<br>由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃,这种情况下,<code>Number.isInteger</code>可能会误判</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">3.0000000000000002</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，</span></span><br><span class="line"><span class="comment">//导致最后的那个2被丢弃了。所以误判为整数</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果对数据精度的要求比较高,不建议使用该方法判断一个数值是否为整数</p>
</blockquote>
<h1 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h1><p>ES6新增的一个极小的常量,实际上是JavaScript能够表示的最小精度<br>根据规格,它表示1 与大于 1 的最小浮点数之间的差。<br>对于64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001,小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON === <span class="built_in">Math</span>.pow(<span class="number">2</span>, -<span class="number">52</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.EPSILON</span><br><span class="line"><span class="comment">// 2.220446049250313e-16</span></span><br><span class="line"><span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>)</span><br><span class="line"><span class="comment">// &quot;0.00000000000000022204&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 能够用来设置”能够接受的误差范围”(暂时还没有搞懂)</p>
</blockquote>
<h1 id="安全整数和Number-isSafeInteger"><a href="#安全整数和Number-isSafeInteger" class="headerlink" title="安全整数和Number.isSafeInteger()"></a>安全整数和Number.isSafeInteger()</h1><p>JavaScript能够准确表示的整数范围在-2^53到2^53之间(不含两个端点),超过这个范围,无法精确表示这个值<br>ES6引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量,用来表示这个范围的上下限.<br><code>Number.isSafeInteger()</code>用来判断一个整数是否在这个范围内</p>
<h1 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h1><p>ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。</p>
<h2 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h2><p>该方法用于去除一个数的小数部分,返回整数部分.<br>规则:<br>对于非数值,<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值<br>对于空值和无法截取整数的值,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">4.1</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">0.1234</span>) <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">&#x27;123.456&#x27;</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">true</span>) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">false</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">NaN</span>);      <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">&#x27;foo&#x27;</span>);    <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.trunc();         <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc = <span class="built_in">Math</span>.trunc  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(x) : <span class="built_in">Math</span>.floor(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h2><p>该方法用来判断一个数到底是正数,负数,还是零.  对于非数值,会先将其转换为数值<br>返回值:</p>
<ul>
<li>参数为正数,返回+1</li>
<li>参数为负数,返回-1</li>
<li>参数为0,返回0</li>
<li>参数为-0,返回-0</li>
<li>其他值,返回<code>NaN</code></li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign = <span class="built_in">Math</span>.sign  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x = +x; <span class="comment">// convert to a number</span></span><br><span class="line">  <span class="keyword">if</span> (x === <span class="number">0</span>  <span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h2><p>该方法用于计算一个数的立方根,  对于非数值,会先使用Number方法将其转换为数值<br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.cbrt = <span class="built_in">Math</span>.cbrt  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.abs(x), <span class="number">1</span>/<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -y : y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Math-clz32"><a href="#Math-clz32" class="headerlink" title="Math.clz32()"></a>Math.clz32()</h2><p>该方法将参数转为32位无符号整数的形式,然后返回这个32位值里面有多少个前导0</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0</span>) <span class="comment">// 32</span></span><br><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1</span>) <span class="comment">// 31</span></span><br><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1000</span>) <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b01000000000000000000000000000000</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b00100000000000000000000000000000</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>对于小数,Math.clz32方法只考虑整数部分</li>
<li>对于空值或其他类型的值,<code>Math.clz32</code>方法会将它们先转为数值,然后再计算</li>
</ul>
<h2 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a>Math.imul()</h2><p>该方法返回两个数以32位带符号整数形式相乘的结果,返回的也是一个32位的带符号整数</p>
<h2 id="Math-fround"><a href="#Math-fround" class="headerlink" title="Math.fround()"></a>Math.fround()</h2><p>该方法返回一个数的32位单精度浮点数形式<br>对于32位单精度格式来说,数值精度是24个二进制位(1 位隐藏位与 23 位有效位),所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。超出这个范围的结果便开始丢失精度</p>
<p>注意:</p>
<ul>
<li>对于<code>NaN</code>和<code>Infinity</code>,该方法返回原值</li>
<li>对于其它类型的非数值,该方法会先将其转为数值,再返回单精度浮点数</li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.fround = <span class="built_in">Math</span>.fround  <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([x])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a>Math.hypot()</h2><p>该方法返回所有参数的平方和的平方根</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>);        <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);     <span class="comment">// 7.0710678118654755</span></span><br><span class="line"><span class="built_in">Math</span>.hypot();            <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="literal">NaN</span>);         <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;foo&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>);   <span class="comment">// 7.0710678118654755</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(-<span class="number">3</span>);          <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>如果参数不是数值,<code>Math.hypot</code>方法会将其转为数值</li>
<li>只要有一个参数无法转为数值,就会返回<code>NaN</code></li>
</ul>
<h2 id="对数的方法"><a href="#对数的方法" class="headerlink" title="对数的方法"></a><strong>对数的方法</strong></h2><h3 id="Math-expm1"><a href="#Math-expm1" class="headerlink" title="Math.expm1()"></a>Math.expm1()</h3><p>该方法返回 ex - 1,即<code>Math.exp(x) - 1</code><br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.expm1 = <span class="built_in">Math</span>.expm1  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x) - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Math-log1p"><a href="#Math-log1p" class="headerlink" title="Math.log1p()"></a>Math.log1p()</h3><p>该方法返回 1 + x 的自然对数,即Math.log(1+x).  如果x小于 -1 ,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">1</span>)  <span class="comment">// 0.6931471805599453</span></span><br><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">0</span>)  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.log1p(-<span class="number">1</span>) <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.log1p(-<span class="number">2</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p = <span class="built_in">Math</span>.log1p  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(<span class="number">1</span> + x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Math-log10"><a href="#Math-log10" class="headerlink" title="Math.log10()"></a>Math.log10()</h3><p>该方法返回10为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">2</span>)      <span class="comment">// 0.3010299956639812</span></span><br><span class="line"><span class="built_in">Math</span>.log10(<span class="number">1</span>)      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.log10(<span class="number">0</span>)      <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.log10(-<span class="number">2</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.log10(<span class="number">100000</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10 = <span class="built_in">Math</span>.log10  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN10;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Math-log2"><a href="#Math-log2" class="headerlink" title="Math.log2()"></a>Math.log2()</h3><p>该方法返回以2为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">3</span>)       <span class="comment">// 1.584962500721156</span></span><br><span class="line"><span class="built_in">Math</span>.log2(<span class="number">2</span>)       <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span>)       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.log2(<span class="number">0</span>)       <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.log2(-<span class="number">2</span>)      <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1024</span>)    <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span> &lt;&lt; <span class="number">29</span>) <span class="comment">// 29</span></span><br></pre></td></tr></table></figure>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2 = <span class="built_in">Math</span>.log2  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="双曲函数方法"><a href="#双曲函数方法" class="headerlink" title="双曲函数方法"></a>双曲函数方法</h2><ul>
<li><code>Math.sinh(x)</code> 返回x的双曲正弦（hyperbolic sine）</li>
<li><code>Math.cosh(x)</code> 返回x的双曲余弦（hyperbolic cosine）</li>
<li><code>Math.tanh(x)</code> 返回x的双曲正切（hyperbolic tangent）</li>
<li><code>Math.asinh(x)</code> 返回x的反双曲正弦（inverse hyperbolic sine）</li>
<li><code>Math.acosh(x)</code> 返回x的反双曲余弦（inverse hyperbolic cosine）</li>
<li><code>Math.atanh(x)</code> 返回x的反双曲正切（inverse hyperbolic tangent）</li>
</ul>
<h1 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h1><p>指数运算符( ** )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<p>该运算符的特点是左结合,即多个指数运算符连用是,是从最左边开始计算的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于 2 ** (3 ** 2)</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="comment">// 512</span></span><br></pre></td></tr></table></figure>
<p>与等号连用( **= )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1.5</span>;</span><br><span class="line">a **= <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 等同于 a = a * a;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">4</span>;</span><br><span class="line">b **= <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 等同于 b = b * b * b;</span></span><br></pre></td></tr></table></figure>
<p>注意:</p>
<p>V8 引擎的指数运算符与<code>Math.pow</code>的实现不相同,对于特别大的运算结果,两者会有细微的差异</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">99</span>, <span class="number">99</span>)</span><br><span class="line"><span class="comment">// 3.697296376497263e+197</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span> ** <span class="number">99</span></span><br><span class="line"><span class="comment">// 3.697296376497268e+197</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--函数的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/6%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许为函数的参数设置默认值,即直接写在参数定义的后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>
<!--more-->

<p>注意:</p>
<ul>
<li>参数变量是默认声明的,不能用<code>let</code>或<code>const</code>再次声明,否则会报错</li>
<li>使用参数默认值时,函数不能有同名参数</li>
</ul>
<h2 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
<p>上面代码只使用了解构赋值默认值,并没有使用函数参数的默认值,所以函数不传参的情况下会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数的参数默认为一个空对象</p>
</blockquote>
<h2 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h2><p>制定了默认值以后,函数的length属性,将返回没有指定默认值的参数的个数,  即指定了默认值后,length属性将失真</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li><p>rest参数也不会计入length属性<br><code>(function(...args) &#123;&#125;).length // 0</code></p>
</li>
<li><p>如果设置了默认值的参数不是尾参数,那么length属性也不再计入后面的参数了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//调用函数f时,默认值指向的是第一个参数x,而不是全局变量x</span></span><br><span class="line"><span class="comment">//即圆括号内形成一个单独的作用域</span></span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<p>即执行一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwIfMissing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Missing parameter&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">mustBeProvided = throwIfMissing()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mustBeProvided;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// Error: Missing parameter</span></span><br></pre></td></tr></table></figure>
<p>另外,可以将参数默认值设为undefined,表明这个参数是可以省略的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">optional = <span class="literal">undefined</span></span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure>
<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>ES6引入rest参数(形式为 …变量名),用来获取函数的多余参数,这样就不需要使用arguments对象了</p>
<p>rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>rest参数之后不能再有其他参数(即只能是最后一个参数),否则会报错</li>
<li>函数的length属性,不包括rest参数</li>
</ul>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES2016中规定,只要函数参数使用了默认值,解构赋值或者扩展运算符,那么函数内部就不能显示设定为严格模式,否则会报错</p>
<h1 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h1><p>函数的name属性,返回该函数的函数名.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo.name <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>如果将一个匿名函数赋值给一个变量,会返回实际的函数名(变量名)</li>
<li>如果将一个具名函数赋值给一个变量,会返回这个具名函数原本的名字</li>
<li>Function构造函数返回的函数实例,name属性的值为anonymous</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>).name <span class="comment">// &quot;anonymous&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>bind返回的函数,name属性值上会加上bound前缀</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">foo.bind(&#123;&#125;).name <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许使用”箭头”(<code>=&gt;</code>)自定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果箭头函数不需要参数或需要多个参数,就是用一个圆括号代表参数部分</p>
<p>如果箭头函数的代码块部分只有一条语句且有返回值,则可以直接省略大括号,直接写返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function">() =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果箭头函数直接返回一个对象,必须在对象外面加上括号,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>如果箭头函数只有一行语句,且不需要返回值,可以采用下面的写法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="keyword">void</span> doesNotReturn();</span><br></pre></td></tr></table></figure>
<p>如果箭头函数的代码块部分多于一条语句,就要使用大括号括起来,并且使用return语句返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>箭头函数有几个使用注意点:</p>
<ul>
<li>函数体内的this对象,就是定义时所在的对象,而不是使用时所在的对象</li>
<li>不可以当作构造函数</li>
<li>不可以使用arguments对象,该对象在函数体内不存在,  可以使用rest参数代替</li>
<li>不可以使用yield命令,因此箭头函数不能用作Generator</li>
</ul>
<p>因为箭头函数内部没有自己的this,导致内部的this就是外层代码块的this</p>
<p>下面三个变量在箭头函数之中也是不存在的,指向外层函数的对应变量:</p>
<ul>
<li><code>arguments</code></li>
<li><code>super</code></li>
<li><code>new.target</code></li>
</ul>
<h2 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h2><p>一.定义对象的方法,且该方法内部包括this<br>    因为对象不构成单独的作用域,所以对象内部的箭头函数的this会指向全局作用域</p>
<p>二.需要动态this的时候,也不应使用箭头函数</p>
<p>三.如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，    而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h2><p>箭头函数的内部,还可以再使用箭头函数</p>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>尾调用就是值某个函数的最后一步是调用另一个函数</p>
<p>以下三种情况,都不属于尾调用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//情况三等同于下面的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>[严格模式下生效]<br>函数调用会在内存形成一个”调用记录”,又称为”调用帧”,保存调用位置和内部变量等信息.</p>
<p>如果在函数A的内部调用函数B,那么在A的调用帧上方,还会形成一个B的调用帧.等到B运行结束,将结果返回到A,B的调用帧才会消失,如果函数B内部还调用函数C,那就还有一个C的调用帧,以此类推.所有的调用帧就形成一个”调用栈”</p>
<p>尾调用由于是函数的最后一步操作,所以不需要保留外层函数的调用帧,因为调用位置,内部变量等信息都不会在用到了,只要直接用内层函数的调用帧,取代外层函数的调用帧就可以了.  </p>
<p>“尾调用优化”,即只保留内层函数的调用帧,如果所有函数都是尾调用,那么完全可以做到每次执行时,调用帧只有一项,这将大大节省内存.</p>
<blockquote>
<p>注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
</blockquote>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>[严格模式下生效]</p>
<p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<p>递归非常消耗内存,因为需要同时保存成千上百个调用帧,很容易发生”栈溢出”错误(stack overflow)</p>
<p>但对于尾递归来说,由于只存在一个调用帧,所以永远不会发生”栈溢出”错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<h2 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h2><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。但是这样做的缺点就是不太直观,第一眼很难看出来</p>
<p><strong>解决方法一:</strong></p>
<p>在尾递归函数之外，再提供一个正常形式的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<p>函数式编程中 柯里化(currying) 的概念:</p>
<p>意思是将多参数的函数转换成单参数的形式</p>
<p><strong>解决方法二:</strong></p>
<p>采用ES6的函数默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结: 递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现</p>
</blockquote>
<h2 id="严格模式-1"><a href="#严格模式-1" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。<br>正常模式下,函数内部有两个变量,可以跟踪函数的调用栈</p>
<ul>
<li><code>func.arguments</code>:返回调用时函数的参数</li>
<li><code>func.caller</code>: 返回调用时当前函数的那个函数</li>
</ul>
<p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restricted</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  restricted.caller;    <span class="comment">// 报错</span></span><br><span class="line">  restricted.arguments; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line">restricted();</span><br></pre></td></tr></table></figure>
<h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>在正常模式下实现尾递归优化</p>
<p>原理: 用“循环”换掉“递归”,减少调用栈</p>
<p><strong>方法一:</strong></p>
<p>蹦床函数(将递归执行转为循环执行) </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    f = f();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接受一个函数f作为参数,只要f执行后返回一个函数,就继续执行,否则返回值</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二:</strong></p>
<p>方法一的蹦床函数并非真正的尾递归优化</p>
<p>下面的才是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tco</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> accumulated = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">accumulator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    accumulated.push(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (!active) &#123;</span><br><span class="line">      active = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span> (accumulated.length) &#123;</span><br><span class="line">        value = f.apply(<span class="built_in">this</span>, accumulated.shift());</span><br><span class="line">      &#125;</span><br><span class="line">      active = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = tco(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 100001</span></span><br></pre></td></tr></table></figure>
<p>上面的代码中,<code>tco</code>函数时尾递归优化的实现,它的奥妙就在于状态变量<code>active</code></p>
<h1 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h1><p>以前不允许最后一个参数后面出现逗号,这样对以后的修改很造成麻烦<br>ES2017 允许函数的最后一个参数有尾逗号</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--数组的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/7%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>扩展运算符(spread)是三个点( … )<br>用来将一个数组转为用逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>
<!--more-->

<p>扩展运算符后面还可以放置表达式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  ...(x &gt; <span class="number">0</span> ? [<span class="string">&#x27;a&#x27;</span>] : []),</span><br><span class="line">  <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>只有函数调用时,扩展运算符才可以放在圆括号中,否则会报错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((...[<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果扩展运算符后面是一个空数组,则不产生任何效果</li>
</ul>
<h2 id="替代函数的apply方法"><a href="#替代函数的apply方法" class="headerlink" title="替代函数的apply方法"></a>替代函数的apply方法</h2><p>apply方法的作用是改变this的指向,然后再调用该函数:</p>
<p>第一个参数是this所要指向的那个对象,</p>
<p>第二个参数是一个数组,该数组的所有成员会依次作为参数,传入原函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.apply(<span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure>
<h2 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h2><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>数组是复合的数据类型,直接复制的话,只是复制了指向底层数据结构的指针,而不是克隆一个全新的数组</p>
<p>使用扩展运算符赋值数组:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure>
<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br></pre></td></tr></table></figure>
<p>上面的两种方法都是浅拷贝,如果修改了原数组的成员,会同步反映到新数组.</p>
<p>“浅拷贝”，指的是如果数组成员包括复合类型的值（比如对象），则新数组拷贝的是该值的引用。</p>
<h3 id="与解构赋值结合"><a href="#与解构赋值结合" class="headerlink" title="与解构赋值结合"></a>与解构赋值结合</h3><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first  <span class="comment">// &quot;foo&quot;</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:如果将扩展运算符用于数组赋值,只能放在参数的最后一位,否则会报错</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>扩展运算符还可以将字符串转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure>
<p>使用扩展运算符能够正确识别四个字节的Unicode字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>.length <span class="comment">// 4</span></span><br><span class="line">[...<span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>].length <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h3 id="实现了Iterator接口的对象"><a href="#实现了Iterator接口的对象" class="headerlink" title="实现了Iterator接口的对象"></a>实现了Iterator接口的对象</h3><p>任何定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//querySelectorAll方法返回的是一个NodeList对象(类似数组的对象),但是</span></span><br><span class="line"><span class="comment">//NodeList对象实现了Iterator</span></span><br><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure>
<h3 id="Map-和-Set-结构-Generator函数"><a href="#Map-和-Set-结构-Generator函数" class="headerlink" title="Map 和 Set 结构,Generator函数"></a>Map 和 Set 结构,Generator函数</h3><p>扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:如果对没有Iterator接口的对象使用扩展运算符,将会报错</p>
</blockquote>
<h1 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h1><p>该方法用于将两类对象转为真正的数组:</p>
<ul>
<li>类似数组的对象（array-like object）</li>
</ul>
<p>所谓类似数组的对象,本质特征只有一点,即必须有length属性</p>
<ul>
<li>可遍历（<code>iterable</code>）的对象（包括 ES6 新增的数据结构 <code>Set</code> 和 <code>Map</code>）</li>
</ul>
<p>实际应用中,常见的类似数组的对象:</p>
<ul>
<li>DOM操作返回的<code>NodeList</code>集合</li>
<li>函数内部arguments对象</li>
</ul>
<p>注意:</p>
<ul>
<li>只要是部署了Iterator接口的数据机构,<code>Array.from</code>都能将其转为数组</li>
<li>如果参数是一个真正的数组,<code>Array.from</code>会返回一个一模一样的新数组</li>
<li>没有部署该方法的浏览器,可以用<code>Array.prototype.slice</code>方法替代</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toArray = (<span class="function">() =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].slice.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>
<p><code>Array.from</code>还可以接受第二个参数,作用类似于数组的map方法,用来对每个元素进行处理,将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>
<p>如果map函数里面用到了this关键字,还可以传入<code>Array.from</code>的第三个参数,用来绑定this</p>
<p><code>Array.from()</code>可以将各种值转为真正的数组,并且还可以提供map功能.这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;jack&#x27;, &#x27;jack&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/1161aee7a561498dd7738319df182162/0" alt="img">             </p>
<h1 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h1><p>该方法用于将一组值转换为数组<br><code>Array.of()</code>总是返回参数值组成的数组,如果没有参数,就返回一个空数组</p>
<h1 id="数组实例的-copyWithin"><a href="#数组实例的-copyWithin" class="headerlink" title="数组实例的 copyWithin()"></a>数组实例的 copyWithin()</h1><p>该方法在当前数组内部,将指定位置的成员复制到其他位置(会覆盖原有成员),然后返回当前数组(使用这个方法,会修改当前数组)</p>
<p>接受的三个参数:</p>
<ul>
<li>target(必需):从该位置开始替换数据.  如果为负值,表示倒数</li>
<li>start(可选): 从该位置开始读取数据,默认为0.  如果为负值,表示倒数</li>
<li>end(可选):  到该位置前停止读取数据.    默认等于数组长度,  如果为负值,表示倒数</li>
</ul>
<blockquote>
<p>注意: 三个参数都应该是数值, 如果不是,会自动转为数值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</p>
<h1 id="数组实例的find-和-findIndex"><a href="#数组实例的find-和-findIndex" class="headerlink" title="数组实例的find() 和 findIndex()"></a>数组实例的find() 和 findIndex()</h1><p>数组实例的find方法用于找出一个符合条件的数组成员<br>数组实例的<code>findIndex</code>方法与<code>find</code>方法非常类似,返回第一个符合条件的数组成员的位置,如果所有成员都不符合条件,则返回 -1 </p>
<p>参数:  </p>
<ul>
<li>第一个参数:一个回调函数,所有数组成员一次执行该回调函数,直到找出第一个返回值位true的成员,然后返回该成员.  如果没有符合条件的成员,则返回undefined.</li>
</ul>
<p>回调函数可以接受三个参数:</p>
<ul>
<li><p><code>value</code>: 当前的值</p>
</li>
<li><p><code>index</code>: 当前的位置</p>
</li>
<li><p><code>arr</code>: 原数组</p>
</li>
<li><p>第二个参数: 用来绑定回调函数的<code>this</code>对象</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v &gt; <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span><br></pre></td></tr></table></figure>
<p>注意: 这两个方法都可以发现<code>NaN</code>,弥补了数组的<code>indexOf</code>方法的不足</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>上面代码中,<code>indexOf</code>无法识别数组的<code>NaN</code>成员,但是<code>findIndex</code>方法可以借助<code>O</code>bject.is`方法做到</p>
<h1 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h1><p>fill方法使用给定值,填充一个数组.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>
<p>参数:</p>
<ul>
<li>第一个参数:  需要填充的值(如果只有改参数,数组中所有的元素都会被该值覆盖)</li>
<li>第二个参数: 填充的起始位置</li>
<li>第三个参数: 填充的结束位置</li>
</ul>
<blockquote>
<p>注意:如果填充的类型为对象,那么被赋值的是同一个内存地址的对象,而不是深拷贝对象</p>
</blockquote>
<h1 id="数组实例的entries-keys-和-values"><a href="#数组实例的entries-keys-和-values" class="headerlink" title="数组实例的entries() , keys() 和 values()"></a>数组实例的entries() , keys() 和 values()</h1><p>这三个方法都是用来遍历数组的:</p>
<ul>
<li>keys(): 是对键名的遍历</li>
<li>values(): 是对键值的遍历</li>
<li>entries() : 是对键值对的遍历</li>
</ul>
<p>它们都返回一个遍历器对象,可以用for…of循环进行遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果不适用for…of循环,可以手动调用遍历器对象的next方法,进行遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, &#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, &#x27;b&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h1><p>该方法检查某个数组是否包含给定的值,返回一个布尔值</p>
<p>参数:</p>
<ul>
<li>第一个参数: 要搜索的值</li>
<li>第二个参数: 搜索的起始位置X,  默认为0, 如果为负数,则表示从右往左数 |X| 个位置(从零开始),搜索顺序还是从左到右,如果这时它大于数组长度,则会重置为从0开始</li>
</ul>
<p>没有该方法之前,我们通常使用数组的<code>indexOf</code>方法,检查是否包含某个值,但是该方法有两个缺点:</p>
<ul>
<li>不够语义化(返回的是参数值第一个出现位置,还要去比较是否不等于-1)</li>
<li>由于内部使用严格相等运算符进行判断,这会导致对<code>NaN</code>的误判</li>
</ul>
<p>但是<code>includes</code>不会对<code>NaN</code>有误判<br>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = (<span class="function">() =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], <span class="string">&#x27;baz&#x27;</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>
<h1 id="数组实例的-flat-flatMap"><a href="#数组实例的-flat-flatMap" class="headerlink" title="数组实例的 flat(), flatMap()"></a>数组实例的 flat(), flatMap()</h1><h2 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h2><p>该方法用于将嵌套的数组”拉平”,变成一维数组,返回一个新数组,对原数据没有影响</p>
<p><strong>参数:</strong></p>
<ul>
<li>一个整数:  表示想要拉平的层数(多层的嵌套数组)</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数</li>
<li>如果原数组有空位,flat()方法会跳过空位</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//跳过空位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h2><p>该方法对原数组的每个成员执行一个函数(相当于执行<code>Array.prototype.map()</code>),然后对返回值组成的数组执行<code>flat()</code>方法,返回一个新数组,不改变原数组</p>
<p><strong>该方法的参数:</strong></p>
<ul>
<li>第一个参数: 遍历函数</li>
<li>第二个参数: 用来绑定遍历函数里面的this对象</li>
</ul>
<p><strong>遍历函数可以接受的三个参数:</strong></p>
<ul>
<li>第一个参数: 当前数组成员</li>
<li>第二个参数: 当前数组成员的位置</li>
<li>第三个参数: 原数组</li>
</ul>
<blockquote>
<p>注意:<code>flatMap()</code>只能展开一层数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [[x * <span class="number">2</span>]])</span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br></pre></td></tr></table></figure>
<h1 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h1><p>数组的空位指: 数组的某一个位置没有任何值  (比如Array构造函数返回的数组都是空位)</p>
<blockquote>
<p>注意:  空位不是undefined , 一个位置的值等于undefined,依然是有值的 . 空位没有任何值,in运算符可以说明这一点.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>ES5对空位的处理很不一致,大多数情况下会忽略空位:</p>
<ul>
<li><code>forEach()</code>,<code>filter()</code>, <code>reduce()</code>, <code>every()</code> 和<code>some()</code>都会跳过空位。</li>
<li><code>map()</code>会跳过空位，但会保留这个值</li>
<li><code>join()</code>和<code>toString()</code>会将空位视为<code>undefined</code>，而<code>undefined</code>和<code>null</code>会被处理成空字符串。</li>
</ul>
<p>ES6则是明确规定将空位转为<code>undefined</code></p>
<ul>
<li><code>Array.from</code>方法会将数组的空位转为<code>undefined</code></li>
<li>扩展运算符( … )会将空位转为<code>undefined</code></li>
<li><code>copyWithin()</code>会连空位一起拷贝</li>
<li><code>fill()</code>会将空位视为正常的数组位置</li>
<li><code>for...of</code> 循环也会遍历空位</li>
<li><code>entries()  keys() values()  find()和findIndex会将空位处理成undefined</code></li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--函数的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/8%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许为函数的参数设置默认值,即直接写在参数定义的后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>
<!--more-->

<p>注意:</p>
<ul>
<li>参数变量是默认声明的,不能用<code>let</code>或<code>const</code>再次声明,否则会报错</li>
<li>使用参数默认值时,函数不能有同名参数</li>
</ul>
<h2 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
<p>上面代码只使用了解构赋值默认值,并没有使用函数参数的默认值,所以函数不传参的情况下会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数的参数默认为一个空对象</p>
</blockquote>
<h2 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h2><p>制定了默认值以后,函数的length属性,将返回没有指定默认值的参数的个数,  即指定了默认值后,length属性将失真</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li><p>rest参数也不会计入length属性<br><code>(function(...args) &#123;&#125;).length // 0</code></p>
</li>
<li><p>如果设置了默认值的参数不是尾参数,那么length属性也不再计入后面的参数了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//调用函数f时,默认值指向的是第一个参数x,而不是全局变量x</span></span><br><span class="line"><span class="comment">//即圆括号内形成一个单独的作用域</span></span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<p>即执行一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwIfMissing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Missing parameter&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">mustBeProvided = throwIfMissing()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mustBeProvided;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// Error: Missing parameter</span></span><br></pre></td></tr></table></figure>
<p>另外,可以将参数默认值设为undefined,表明这个参数是可以省略的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">optional = <span class="literal">undefined</span></span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure>
<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>ES6引入rest参数(形式为 …变量名),用来获取函数的多余参数,这样就不需要使用arguments对象了</p>
<p>rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>rest参数之后不能再有其他参数(即只能是最后一个参数),否则会报错</li>
<li>函数的length属性,不包括rest参数</li>
</ul>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES2016中规定,只要函数参数使用了默认值,解构赋值或者扩展运算符,那么函数内部就不能显示设定为严格模式,否则会报错</p>
<h1 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h1><p>函数的name属性,返回该函数的函数名.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo.name <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>如果将一个匿名函数赋值给一个变量,会返回实际的函数名(变量名)</li>
<li>如果将一个具名函数赋值给一个变量,会返回这个具名函数原本的名字</li>
<li>Function构造函数返回的函数实例,name属性的值为anonymous</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="built_in">Function</span>).name <span class="comment">// &quot;anonymous&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>bind返回的函数,name属性值上会加上bound前缀</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">foo.bind(&#123;&#125;).name <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).bind(&#123;&#125;).name <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许使用”箭头”(<code>=&gt;</code>)自定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果箭头函数不需要参数或需要多个参数,就是用一个圆括号代表参数部分</p>
<p>如果箭头函数的代码块部分只有一条语句且有返回值,则可以直接省略大括号,直接写返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function">() =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果箭头函数直接返回一个对象,必须在对象外面加上括号,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>如果箭头函数只有一行语句,且不需要返回值,可以采用下面的写法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="keyword">void</span> doesNotReturn();</span><br></pre></td></tr></table></figure>
<p>如果箭头函数的代码块部分多于一条语句,就要使用大括号括起来,并且使用return语句返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>箭头函数有几个使用注意点:</p>
<ul>
<li>函数体内的this对象,就是定义时所在的对象,而不是使用时所在的对象</li>
<li>不可以当作构造函数</li>
<li>不可以使用arguments对象,该对象在函数体内不存在,  可以使用rest参数代替</li>
<li>不可以使用yield命令,因此箭头函数不能用作Generator</li>
</ul>
<p>因为箭头函数内部没有自己的this,导致内部的this就是外层代码块的this</p>
<p>下面三个变量在箭头函数之中也是不存在的,指向外层函数的对应变量:</p>
<ul>
<li><code>arguments</code></li>
<li><code>super</code></li>
<li><code>new.target</code></li>
</ul>
<h2 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h2><p>一.定义对象的方法,且该方法内部包括this<br>    因为对象不构成单独的作用域,所以对象内部的箭头函数的this会指向全局作用域</p>
<p>二.需要动态this的时候,也不应使用箭头函数</p>
<p>三.如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，    而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h2><p>箭头函数的内部,还可以再使用箭头函数</p>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>尾调用就是值某个函数的最后一步是调用另一个函数</p>
<p>以下三种情况,都不属于尾调用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//情况三等同于下面的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>[严格模式下生效]<br>函数调用会在内存形成一个”调用记录”,又称为”调用帧”,保存调用位置和内部变量等信息.</p>
<p>如果在函数A的内部调用函数B,那么在A的调用帧上方,还会形成一个B的调用帧.等到B运行结束,将结果返回到A,B的调用帧才会消失,如果函数B内部还调用函数C,那就还有一个C的调用帧,以此类推.所有的调用帧就形成一个”调用栈”</p>
<p>尾调用由于是函数的最后一步操作,所以不需要保留外层函数的调用帧,因为调用位置,内部变量等信息都不会在用到了,只要直接用内层函数的调用帧,取代外层函数的调用帧就可以了.  </p>
<p>“尾调用优化”,即只保留内层函数的调用帧,如果所有函数都是尾调用,那么完全可以做到每次执行时,调用帧只有一项,这将大大节省内存.</p>
<blockquote>
<p>注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
</blockquote>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>[严格模式下生效]</p>
<p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<p>递归非常消耗内存,因为需要同时保存成千上百个调用帧,很容易发生”栈溢出”错误(stack overflow)</p>
<p>但对于尾递归来说,由于只存在一个调用帧,所以永远不会发生”栈溢出”错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<h2 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h2><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。但是这样做的缺点就是不太直观,第一眼很难看出来</p>
<p><strong>解决方法一:</strong></p>
<p>在尾递归函数之外，再提供一个正常形式的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<p>函数式编程中 柯里化(currying) 的概念:</p>
<p>意思是将多参数的函数转换成单参数的形式</p>
<p><strong>解决方法二:</strong></p>
<p>采用ES6的函数默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结: 递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现</p>
</blockquote>
<h2 id="严格模式-1"><a href="#严格模式-1" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。<br>正常模式下,函数内部有两个变量,可以跟踪函数的调用栈</p>
<ul>
<li><code>func.arguments</code>:返回调用时函数的参数</li>
<li><code>func.caller</code>: 返回调用时当前函数的那个函数</li>
</ul>
<p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restricted</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  restricted.caller;    <span class="comment">// 报错</span></span><br><span class="line">  restricted.arguments; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line">restricted();</span><br></pre></td></tr></table></figure>
<h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>在正常模式下实现尾递归优化</p>
<p>原理: 用“循环”换掉“递归”,减少调用栈</p>
<p><strong>方法一:</strong></p>
<p>蹦床函数(将递归执行转为循环执行) </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    f = f();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接受一个函数f作为参数,只要f执行后返回一个函数,就继续执行,否则返回值</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二:</strong></p>
<p>方法一的蹦床函数并非真正的尾递归优化</p>
<p>下面的才是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tco</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> accumulated = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">accumulator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    accumulated.push(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (!active) &#123;</span><br><span class="line">      active = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span> (accumulated.length) &#123;</span><br><span class="line">        value = f.apply(<span class="built_in">this</span>, accumulated.shift());</span><br><span class="line">      &#125;</span><br><span class="line">      active = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = tco(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 100001</span></span><br></pre></td></tr></table></figure>
<p>上面的代码中,<code>tco</code>函数时尾递归优化的实现,它的奥妙就在于状态变量<code>active</code></p>
<h1 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h1><p>以前不允许最后一个参数后面出现逗号,这样对以后的修改很造成麻烦<br>ES2017 允许函数的最后一个参数有尾逗号</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript --Math</title>
    <url>/%E5%89%8D%E7%AB%AF/JavaScript/Math.html</url>
    <content><![CDATA[<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>Math对象提供以下一些只读的数学常数。</p>
<ul>
<li><code>Math.E</code>：常数e。</li>
<li><code>Math.LN2</code>：2的自然对数。</li>
<li><code>Math.LN10</code>：10的自然对数。</li>
<li><code>Math.LOG2E</code>：以2为底的e的对数。</li>
<li><code>Math.LOG10E</code>：以10为底的e的对数。</li>
<li><code>Math.PI</code>：常数Pi。</li>
<li><code>Math.SQRT1_2</code>：0.5的平方根。</li>
<li><code>Math.SQRT2</code>：2的平方根。</li>
</ul>
<hr>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Math对象提供以下一些数学方法。</p>
<ul>
<li><code>Math.abs()</code>：绝对值</li>
<li><code>Math.ceil()</code>：向上取整</li>
<li><code>Math.floor()</code>：向下取整</li>
<li><code>Math.max()</code>：最大值</li>
<li><code>Math.min()</code>：最小值</li>
<li><code>Math.pow()</code>：指数运算</li>
<li><code>Math.sqrt()</code>：平方根</li>
<li><code>Math.log()</code>：自然对数</li>
<li><code>Math.exp()</code>：e的指数</li>
<li><code>Math.round()</code>：四舍五入</li>
<li><code>Math.random()</code>：随机数</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript防抖与节流</title>
    <url>/%E5%89%8D%E7%AB%AF/JavaScript/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81.html</url>
    <content><![CDATA[<p>在JavaScript中，当一个事件频繁的触发(例如mousemove)时，会导致性能的损耗、页面的卡顿，为了解决这一问题，我们可以使用节流策略，即限制事件的触发频率。</p>
<a id="more"></a>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>当持续触发事件的时候，保证一段时间内，只调用一次事件处理函数</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- JSX简介</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/1%E3%80%81JSX%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<p>React 使用 JSX 来替代常规的 JavaScript。</p>
<p>JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。</p>
<p>我们不需要一定使用 JSX，但它有以下优点：</p>
<ul>
<li>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。</li>
</ul>
<ul>
<li>它是类型安全的，在编译过程中就能发现错误。</li>
<li>使用 JSX 编写模板更加简单快速。</li>
</ul>
<a id="more"></a>

<p>例如:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式</p>
</blockquote>
<h2 id="在JSX中嵌入表达式"><a href="#在JSX中嵌入表达式" class="headerlink" title="在JSX中嵌入表达式"></a>在JSX中嵌入表达式</h2><p>在JSX语法中,你可以在大括号内放置任何有效的<code>JavaScript表达式</code>。例如，<code>2 + 2</code>，<code>user.firstName</code> 或 <code>formatName(user)</code> 都是有效的 JavaScript 表达式。</p>
<p>JSX中使用变量：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh Perez&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>JSX中调用函数:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">&#x27; &#x27;</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    Hello, &#123;formatName(user)&#125;!</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="JSX也是一个表达式"><a href="#JSX也是一个表达式" class="headerlink" title="JSX也是一个表达式"></a>JSX也是一个表达式</h2><p>可以在<code>if</code>语句和<code>for</code>循环的代码块中使用JSX,将JSX赋值给变量,把JSX当作参数传入,以及从函数中返回JSX。<br>例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGreeting</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="标签属性中使用JSX"><a href="#标签属性中使用JSX" class="headerlink" title="标签属性中使用JSX"></a>标签属性中使用JSX</h2><p>可以使用大括号,在属性值中插入一个JavaScript表达式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>React DOM 使用 <code>camelCase</code>（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。</p>
</blockquote>
<h2 id="使用-JSX-指定子元素"><a href="#使用-JSX-指定子元素" class="headerlink" title="使用 JSX 指定子元素"></a>使用 JSX 指定子元素</h2><p>假如一个标签里面没有内容，你可以使用 <code>/&gt;</code> 来闭合标签，就像 XML 语法一样：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>JSX标签里能够包含很多子元素</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="JSX表示对象"><a href="#JSX表示对象" class="headerlink" title="JSX表示对象"></a>JSX表示对象</h2><p>Babel 会把 JSX 转译成一个名为 <code>React.createElement()</code> 函数调用。以下两种示例代码完全等效：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><p><em>元素是构成 React 应用的最小砖块。</em></p>
<p>想要将一个React元素渲染到根DOM节点中，只需要把他们一起传入<code>ReactDOM.render()</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>


<h3 id="更新已渲染的元素"><a href="#更新已渲染的元素" class="headerlink" title="更新已渲染的元素"></a>更新已渲染的元素</h3><p>React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p>
<p>根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>。</p>
<p>一个计时器的例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">  ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>React 只更新它需要更新的部分，React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- 组件&amp;Props</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/2%E3%80%81%E7%BB%84%E4%BB%B6&amp;Props.html</url>
    <content><![CDATA[<p>组件可以扩展HTML元素，封装可重用的代码。<br>组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。</p>
<a id="more"></a>

<h2 id="函数组件与class组件"><a href="#函数组件与class组件" class="headerlink" title="函数组件与class组件"></a>函数组件与class组件</h2><p>定义组件最简单的方式就是编写 JavaScript 函数：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该函数是一个有效的函数，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”。</p>
</blockquote>
<p>使用<code>class</code>定义组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h2><p>React 元素也可以是用户自定义的组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）转换为单个对象传递给组件，这个对象被称之为 “props”。</p>
<p>例如，这段代码会在页面上渲染 “Hello, Sara”：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong>组件名称必须以大写字母开头</p>
</blockquote>
<h2 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h2><p>组件可以在其输出中引用其他组件。这就可以让我们用同一组件来抽象出任意层次的细节。按钮，表单，对话框，甚至整个屏幕的内容：在 React 应用程序中，这些通常都会以组件的形式表示。</p>
<p>例如，我们可以创建一个可以多次渲染 <code>Welcome</code> 组件的 <code>App</code> 组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">&quot;Sara&quot;</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">&quot;Cahal&quot;</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">&quot;Edite&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;App /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="Props的只读性"><a href="#Props的只读性" class="headerlink" title="Props的只读性"></a>Props的只读性</h2><p>组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props。</p>
<p><strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</strong></p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- State&amp;生命周期</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/3%E3%80%81State&amp;%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</url>
    <content><![CDATA[<p>State用来定义组件内部的状态，可以被任意修改。</p>
<a id="more"></a>

<h2 id="向class组件中添加局部的state："><a href="#向class组件中添加局部的state：" class="headerlink" title="向class组件中添加局部的state："></a>向class组件中添加局部的state：</h2><p>添加一个class构造函数，然后在该函数中为<code>this.state</code>赋初值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="built_in">this</span>.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>通过以下方式将<code>props</code>传递到父类的构造函数中:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>(props);</span><br><span class="line">   <span class="built_in">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>React元素中使用<code>this.props</code>访问<code>Props</code>属性</p>
</blockquote>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a><code>componentDidMount()</code></h3><p>该方法会在组件已经被渲染到DOM中后运行。</p>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a><code>componentWillUnmount()</code></h3><p>该方法会在组件被删除的时候运行。</p>
<h3 id="render"><a href="#render" class="headerlink" title="render()"></a><code>render()</code></h3><p>在组件初始渲染的时候执行</p>
<h2 id="正确地使用State"><a href="#正确地使用State" class="headerlink" title="正确地使用State"></a>正确地使用State</h2><h3 id="不要直接修改State"><a href="#不要直接修改State" class="headerlink" title="不要直接修改State"></a>不要直接修改State</h3><p>而是应该使用 <code>setState()</code>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方</p>
</blockquote>
<h3 id="State的更新可能是异步的"><a href="#State的更新可能是异步的" class="headerlink" title="State的更新可能是异步的"></a>State的更新可能是异步的</h3><p>因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。例如，此代码可能会无法更新计数器：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="built_in">this</span>.state.counter + <span class="built_in">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>要解决这个问题，可以让 <code>setState()</code> 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面使用了箭头函数,使用普通的函数也同样可以</p>
</blockquote>
<h2 id="数据是向下流动的"><a href="#数据是向下流动的" class="headerlink" title="数据是向下流动的"></a>数据是向下流动的</h2><p>组件可以把它的state作为props向下传递到它的子组件中<br>React中的数据流是单向的,任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- 事件处理</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/4%E3%80%81%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.html</url>
    <content><![CDATA[<a id="more"></a>


<p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:</p>
<ul>
<li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li>
<li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li>
</ul>
<p>React中定义事件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class="line">  Activate Lasers</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>


<p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code> 。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>e</code> 是一个合成事件。React 根据 <a href="https://www.w3.org/TR/DOM-Level-3-Events/">W3C 规范</a>来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- 条件渲染</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/5%E3%80%81%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93.html</url>
    <content><![CDATA[<a id="more"></a>

<p>在 React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。</p>
<p>React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 或者<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件运算符</a>去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。</p>
<p>例如创建一个 <code>Greeting</code> 组件，它会根据用户是否登录来决定显示哪一个组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// Try changing to isLoggedIn=&#123;true&#125;:</span></span><br><span class="line">  &lt;Greeting isLoggedIn=&#123;<span class="literal">false</span>&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h2><p>使用变量来储存元素。 它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.handleLoginClick = <span class="built_in">this</span>.handleLoginClick.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.handleLogoutClick = <span class="built_in">this</span>.handleLogoutClick.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleLoginClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleLogoutClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="built_in">this</span>.state.isLoggedIn;</span><br><span class="line">    <span class="keyword">let</span> button;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;LoginControl /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="与运算符"><a href="#与运算符" class="headerlink" title="与运算符"></a>与运算符</h2><p>通过花括号包裹代码，你可以在 JSX 中嵌入任何表达式。这也包括 JavaScript 中的逻辑与 (&amp;&amp;) 运算符。它可以很方便地进行元素的条件渲染。</p>
<p>例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mailbox</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.unreadMessages;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">      &#123;unreadMessages.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">          You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Re: React&#x27;</span>, <span class="string">&#x27;Re:Re: React&#x27;</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Mailbox unreadMessages=&#123;messages&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为在 JavaScript 中，<code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p>
</blockquote>
<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>另一种内联条件渲染的方法是使用 JavaScript 中的三目运算符 <code>condition ? true : false</code>。<br>例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="built_in">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class="string">&#x27;currently&#x27;</span> : <span class="string">&#x27;not&#x27;</span>&#125;&lt;/b&gt; logged <span class="keyword">in</span>.</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用于较为复杂的表达式中，虽然看起来不是很直观：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="built_in">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;isLoggedIn ? (</span><br><span class="line">        &lt;LogoutButton onClick=&#123;<span class="built_in">this</span>.handleLogoutClick&#125; /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;LoginButton onClick=&#123;<span class="built_in">this</span>.handleLoginClick&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a>阻止组件渲染</h2><p>若想阻止组件渲染,可以让<code>render</code>方法直接返回<code>null</code>,这样就不会进行任何渲染。<br>例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;warning&quot;</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">showWarning</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleToggleClick = <span class="built_in">this</span>.handleToggleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleToggleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      showWarning: !state.showWarning</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;WarningBanner warn=&#123;<span class="built_in">this</span>.state.showWarning&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.handleToggleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="built_in">this</span>.state.showWarning ? <span class="string">&#x27;Hide&#x27;</span> : <span class="string">&#x27;Show&#x27;</span>&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Page /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- 列表&amp;Key</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/6%E3%80%81%E5%88%97%E8%A1%A8&amp;Key.html</url>
    <content><![CDATA[<p>React中的列表是利用<code>map()</code>方法进行遍历数组来创建元素,且每个元素必须要有key属性,用以区分判断哪些元素发生了改变。</p>
<a id="more"></a>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>通过使用 <code>&#123;&#125;</code> 在 JSX 内构建一个元素集合。利用<code>map()</code>方法。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：创建一个元素时，必须包括一个特殊的<code>key</code>属性。key 帮助 React 识别哪些元素改变了，比如被添加或删除。</p>
</blockquote>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">    &#123;number&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。</p>
<p>数组元素中使用的 key 在其兄弟节点之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的 key 值</p>
</blockquote>
<h2 id="在JSX中嵌入map"><a href="#在JSX中嵌入map" class="headerlink" title="在JSX中嵌入map()"></a>在JSX中嵌入map()</h2><p>JSX 允许在大括号中<a href="https://zh-hans.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx">嵌入任何表达式</a>，所以我们可以内联 <code>map()</code> 返回的结果：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">                  value=&#123;number&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React -- 使用React</title>
    <url>/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8React.html</url>
    <content><![CDATA[<p><code>React</code>是一个用于构建用户界面的<code>JavaScript</code>库。它使用JSX来替代常规的JavaScript</p>
<a id="more"></a>

<h1 id="创建新的React应用"><a href="#创建新的React应用" class="headerlink" title="创建新的React应用"></a>创建新的React应用</h1><p>官网推荐的工具链：</p>
<ul>
<li>学习React或创建一个新的单页应用，使用<code>Create React App</code></li>
<li>用Node.js构建服务端渲染的网站，试试<code>Next.js</code></li>
<li>构建面向内容的静态网站，试试 <a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#gatsby">Gatsby</a>。</li>
</ul>
<h2 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h2><p>使用<code>Create React App</code>创建一个新的单页应用或拿来学习<code>React</code>。<br>创建项目:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h2 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h2><p><a href="https://nextjs.org/">Next.js</a> 是一个流行的、轻量级的框架，用于配合 React 打造<strong>静态化和服务端渲染应用</strong>。</p>
<h2 id="Gatsby"><a href="#Gatsby" class="headerlink" title="Gatsby"></a>Gatsby</h2><p><a href="https://www.gatsbyjs.org/">Gatsby</a> 是用 React 创建<strong>静态网站</strong>的最佳方式。它让你能使用 React 组件，但输出预渲染的 HTML 和 CSS 以保证最快的加载速度。</p>
<h1 id="Hello-World应用"><a href="#Hello-World应用" class="headerlink" title="Hello World应用"></a>Hello World应用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bds&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span>	</span><br><span class="line"><span class="javascript">	ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;bds&quot;</span>));</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面使用react的方式只适合于学习用</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --安装Sass及常用命令</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/1%E3%80%81%E5%AE%89%E8%A3%85Sass%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>参考网页:<a href="https://www.sass.hk/install/">Sass中文网</a></p>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p><a href="https://pan.baidu.com/s/1RVGu6Ba2vm7XdWT52efVYQ">windows版网盘下载地址</a>，提取码：<code>nkzg</code>。<br>其他系统下载地址：<a href="http://www.ruby-lang.org/zh_cn/downloads/">ruby中文官网</a></p>
<p>windows版安装的时候记得勾选``Add Ruby executables to your PATH`添加到系统环境变量。</p>
<p>安装完成后需测试安装有没有成功,运行<code>CMD</code>输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br><span class="line">&#x2F;&#x2F;如安装成功会打印</span><br><span class="line">ruby 2.6.4p104 (2019-08-28 revision 67798) [x64-mingw32]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除替换原gem源</span><br><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.com&#x2F; --remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line">&#x2F;&#x2F;打印是否替换成功</span><br><span class="line">gem sources -l</span><br><span class="line">https:&#x2F;&#x2F;gems.ruby-china.com</span><br><span class="line"># 确保只有 gems.ruby-china.com</span><br></pre></td></tr></table></figure>
<h2 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装如下</span><br><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass -v</span><br><span class="line">#Ruby Sass 3.7.4</span><br><span class="line"></span><br><span class="line">compass -v</span><br><span class="line">#Compass 1.0.3 (Polaris)</span><br><span class="line">#Copyright (c) 2008-2020 Chris Eppstein</span><br><span class="line">#Released under the MIT License.</span><br><span class="line">#Compass is charityware.</span><br><span class="line">#Please make a tax deductable donation for a worthy cause: http:&#x2F;&#x2F;umdf.org&#x2F;compass</span><br></pre></td></tr></table></figure>


<h2 id="创建sass工程"><a href="#创建sass工程" class="headerlink" title="创建sass工程"></a>创建sass工程</h2><p>使用<code>compass create 目录名</code>命令创建一个<code>sass</code>工程</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>编译某个sass文件：</strong><code>sass &lt;sass file&gt; &lt;css file&gt; --style [nested | expanded | compact | compressed]</code><br><strong>监视某个sass文件：</strong><code>sass --watch &lt;sass file&gt;:&lt;css file&gt; --style [nested | expanded | compact | compressed]</code><br><strong>监视文件夹：</strong><code>sass --watch &lt;sass fold&gt;:&lt;css fold&gt; --style [nested | expanded | compact | compressed]</code><br><strong>编译sass文件：</strong> <code>compass compile --style [nested | expanded | compact | compressed]</code><br><strong>监视文件夹：</strong> <code>compass watch --style [nested | expanded | compact | compressed]</code></p>
<blockquote>
<p><code>--style</code>为输出风格，一共有四种：</p>
<ul>
<li><code>nested</code> :  结尾的大括号跟在分号后面<br><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1580195555376.png" alt="1580195555376"></li>
<li><code>expanded</code>: 输出风格为:<br><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1580195627089.png" alt="1580195627089"></li>
<li><code>compact</code> : 样式显示在一行(没有压缩)<br><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1580195745121.png" alt="1580195745121"></li>
<li><code>compressed</code> : 样式显示在一行(经过压缩)<br><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1580195804125.png" alt="1580195804125"></li>
</ul>
</blockquote>
<h2 id="config-rb文件"><a href="#config-rb文件" class="headerlink" title="config.rb文件"></a>config.rb文件</h2><p>在使用命令创建工程的时候，会在项目目录下自动创建一个<code>config.rb</code>文件。这个文件里包含一些配置，例如<code>css</code>文件目录，<code>sass</code>文件目录等等。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;compass/import-once/activate&#x27;</span></span><br><span class="line"></span><br><span class="line">http_path = <span class="string">&quot;/&quot;</span></span><br><span class="line">css_dir = <span class="string">&quot;stylesheets&quot;</span></span><br><span class="line">sass_dir = <span class="string">&quot;sass&quot;</span></span><br><span class="line">images_dir = <span class="string">&quot;images&quot;</span></span><br><span class="line">javascripts_dir = <span class="string">&quot;javascripts&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输出风格</span></span><br><span class="line">output_style = <span class="symbol">:expanded</span></span><br><span class="line"><span class="comment"># 是否使用绝对路径</span></span><br><span class="line">relative_assets = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用注释</span></span><br><span class="line">line_comments = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>进阶用法</strong></p>
<p>通过使用环境变量来动态的指定输出风格</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">environment = <span class="symbol">:development</span></span><br><span class="line">output_style = (environment == <span class="symbol">:development</span>) ? <span class="symbol">:expanded</span> : <span class="symbol">:nested</span></span><br></pre></td></tr></table></figure>


<h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><p><strong>行注释：</strong> <code>//</code><br><strong>块注释：</strong><code>/**/</code></p>
<h2 id="中文注释支持"><a href="#中文注释支持" class="headerlink" title="中文注释支持"></a>中文注释支持</h2><p>找到<code>ruby</code>的安装路径，例如：<code>E:\Ruby27-x64\lib\ruby\gems\2.7.0\gems\sass-3.4.25\lib\sass</code>，然后找到<code>engine.rb</code>文件，添加下列配置：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Encoding.default_external = Encoding.find(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --选择器嵌套</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/2%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8%E5%B5%8C%E5%A5%97.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h2><p>选择器嵌套可以简化后代选择器的书写，它允许我们将拥有相同父选择器的选择器写在一起。例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="selector-class">.head</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.content</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.footer</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的编译后为以下形式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.head</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:red;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:green; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><p>在<code>css</code>中有一些用 “ <strong>-</strong> ” 分隔的属性，它们往往都是中横线前半部分相同，而后半部分不同，书写起来会有重复。但是在<code>sass</code>中我们可以使用属性嵌套来解决上述问题，具体使用如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:&#123;</span><br><span class="line">        color:red;</span><br><span class="line">        size:<span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="父选择器引用-—-amp"><a href="#父选择器引用-—-amp" class="headerlink" title="父选择器引用 — &amp;"></a>父选择器引用 — &amp;</h2><p>当我们想在选择器嵌套中引用父选择器的时候，可以使用 <code>&amp;</code> 操作符。使用如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="selector-class">.header</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">        &amp; <span class="selector-class">.top</span>&#123;     <span class="comment">//这里的 &amp; 表示 div .header</span></span><br><span class="line">            <span class="attribute">color</span>:red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.header</span> <span class="selector-class">.top</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="at-root跳出嵌套"><a href="#at-root跳出嵌套" class="headerlink" title="@at-root跳出嵌套"></a>@at-root跳出嵌套</h2><p>顾名思义，使用<code>@at-root</code>可以跳出当前的选择器嵌套。例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">    <span class="keyword">@at-root</span> .header&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>默认<code>@at-root</code>只会跳出选择器嵌套，而不能跳出<code>@media</code>和<code>@support</code>，如果要跳出这两种，则需要使用<code>@at-root(without:...)</code>或<code>@at-root(with:...)</code>。</p>
<ul>
<li><p><code>@at-root(without:media support all rule)</code> ：表示允许跳出哪些规则</p>
<p><code>media</code> : 表示<code>media</code></p>
<p><code>support</code> : 表示<code>support</code></p>
<p><code>all</code> : 表示所有</p>
<p><code>rule</code> : 表示常规<code>css</code>规则</p>
</li>
<li><p><code>@at-root(with:media support all rule)</code> : 表示不允许跳出哪些规则</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --Sass变量</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/3%E3%80%81sass%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义一个变量(以<strong>$</strong>号开头)：<code>$name:green</code><br>使用定义好的变量：<code>color:$name</code></p>
<blockquote>
<p>变量也可以用在属性选择器上：<code>#&#123;变量名&#125;</code><br>例如:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable">$className</span>:main;</span><br><span class="line">&gt;.#&#123;<span class="variable">$className</span>&#125;&#123;</span><br><span class="line">   <span class="attribute">color</span>:red;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p><code>sass</code>中的局部变量仅能在<code>&#123; &#125;</code>(变量定义时所在的双括号)内部访问。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="variable">$color</span>:red;      <span class="comment">//局部变量,只能在当前大括号内访问</span></span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将局部变量变为全局变量，可以加上<code>!global</code>标识符：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="variable">$color</span>:red !global;  <span class="comment">//全局变量,当前文件内都可以访问</span></span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量在整个<code>scss</code>文件内部都可以访问到。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>:red;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="variable">$color</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><p>为一个变量定义默认值可以使用<code>! default</code>标识符:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>:red;       <span class="comment">//重写默认值,改为red</span></span><br><span class="line"><span class="variable">$color</span>:green !default;   <span class="comment">//默认值为green</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多值变量"><a href="#多值变量" class="headerlink" title="多值变量"></a>多值变量</h2><h3 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h3><p>我们可以为一个变量赋多个值，通过<code>nth()</code>函数读取指定值。</p>
<p><code>nth(name,index)</code>函数有两个参数:</p>
<ul>
<li><code>name</code> : 变量名称</li>
<li><code>index</code> : 变量值的位置(<strong>注意是重1开始的</strong>)</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$paddings</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="comment">//等价于 $paddings:(10px 5px 20px 40px);</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="variable">$paddings</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:nth(<span class="variable">$paddings</span>,<span class="number">1</span>);   <span class="comment">//左内边距为10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用法二-—-列表"><a href="#用法二-—-列表" class="headerlink" title="用法二 — 列表"></a>用法二 — 列表</h3><p>列表就是 Sass 的数组。列表是一个一维的数据结构，用于保存任意类型的数值（包括列表，从而产生嵌套列表)</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$paddings</span>:(red,green,yellow,black);</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:nth(<span class="variable">$paddings</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">background-color</span>:nth(<span class="variable">$paddings</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h3><table>
<thead>
<tr>
<th>append(<em>list</em>, <em>value</em>, [<em>separator</em>])</th>
<th>将单个值 <em>value</em> 添加到列表尾部。<em>separator</em> 是分隔符，默认会自动侦测，或者指定为逗号或空格。        <strong>实例:</strong>append((a b c), d) 结果: a b c d append((a b c), (d), comma)      结果: a, b, c, d</th>
</tr>
</thead>
<tbody><tr>
<td>index(<em>list</em>, <em>value</em>)</td>
<td>返回元素 <em>value</em> 在列表中的索引位置。       <strong>实例:</strong> index(a b c, b) 结果: 2 index(a b c, f) 结果: null</td>
</tr>
<tr>
<td>is-bracketed(<em>list</em>)</td>
<td>判断列表中是否有中括号       <strong>实例:</strong> is-bracketed([a b c]) 结果: true  is-bracketed(a b c) 结果:      false</td>
</tr>
<tr>
<td>join(<em>list1</em>, <em>list2</em>, [<em>separator, bracketed</em>])</td>
<td>合并两列表，将列表 <em>list2</em> 添加到列表 <em>list1</em> 的末尾。<em>separator</em>     是分隔符，默认会自动侦测，或者指定为逗号或空格。 <em>bracketed</em> 默认会自动侦测是否有中括号，可以设置为 true 或 false。            <strong>实例:</strong> join(a b c, d e f) 结果: a b c d e f join((a b c), (d e f),      comma) 结果: a, b, c, d, e, f join(a b c, d e f, $bracketed: true) 结果:      [a b c d e f]</td>
</tr>
<tr>
<td>length(<em>list</em>)</td>
<td>返回列表的长度       <strong>实例:</strong> length(a b c) 结果: 3</td>
</tr>
<tr>
<td>list-separator(<em>list</em>)</td>
<td>返回一列表的分隔符类型。可以是空格或逗号。       <strong>实例:</strong> list-separator(a b c) 结果: “space” list-separator(a, b, c)      结果: “comma”</td>
</tr>
<tr>
<td>nth(<em>list</em>, <em>n</em>)</td>
<td>获取第 <em>n</em> 项的值。       <strong>实例:</strong> nth(a b c, 3) 结果: c</td>
</tr>
<tr>
<td>set-nth(<em>list</em>, <em>n</em>, <em>value</em>)</td>
<td>设置列表第 <em>n</em> 项的值为 <em>value</em>。            <strong>实例:</strong> set-nth(a b c, 2, x) 结果: a x c</td>
</tr>
<tr>
<td>zip(<em>lists</em>)</td>
<td>将多个列表按照以相同索引值为一组，重新组成一个新的多维度列表。       <strong>实例:</strong> zip(1px 2px 3px, solid dashed dotted, red green blue) 结果: 1px      solid red, 2px dashed green, 3px dotted blue</td>
</tr>
</tbody></table>
<h2 id="maps映射"><a href="#maps映射" class="headerlink" title="maps映射"></a>maps映射</h2><p><code>maps</code>允许我们一次定义多个变量,并通过<code>map-get()</code>函数获取指定变量的值。</p>
<p>格式：<code>$name:(key:value,....)</code></p>
<p><code>map-get(map,key)</code>函数有两个参数：</p>
<ul>
<li><code>map</code>: 指定哪个<code>map</code>映射</li>
<li><code>key</code> : <code>map</code>中的<code>key</code></li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$colors</span>:(color:red,borderColor:green);</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:map-get(<span class="variable">$colors</span>,color);</span><br><span class="line">    <span class="attribute">border-color</span>:map-get(<span class="variable">$colors</span>,borderColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="有关maps的其它函数"><a href="#有关maps的其它函数" class="headerlink" title="有关maps的其它函数"></a>有关maps的其它函数</h3><h4 id="map-has-key-map-key"><a href="#map-has-key-map-key" class="headerlink" title="map-has-key(map,key)"></a>map-has-key(map,key)</h4><p><strong>作用：</strong>判断<code>map</code>是否有对应的<code>key</code><br><strong>实例：</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font-sizes</span>: (<span class="string">&quot;small&quot;</span>: <span class="number">12px</span>, <span class="string">&quot;normal&quot;</span>: <span class="number">18px</span>, <span class="string">&quot;large&quot;</span>: <span class="number">24px</span>) </span><br><span class="line">map-has-key(<span class="variable">$font-sizes</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">//结果: false</span><br></pre></td></tr></table></figure>
<h4 id="map-keys-map"><a href="#map-keys-map" class="headerlink" title="map-keys(map)"></a>map-keys(map)</h4>]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --数据类型和运算</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/4%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>sass</code>支持以下6中主要类型:</p>
<ul>
<li>数字，<code>1, 2, 13, 10px</code></li>
<li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li>
<li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li>
<li>布尔型，<code>true, false</code></li>
<li>空值，<code>null</code></li>
<li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li>
<li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2);</code></li>
</ul>
<p>代码实例:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数字变量</span></span><br><span class="line"><span class="variable">$n1</span>:<span class="number">1</span>;</span><br><span class="line"><span class="variable">$n2</span>:<span class="number">1.2</span>;</span><br><span class="line"><span class="variable">$n3</span>:<span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义字符串</span></span><br><span class="line"><span class="variable">$s1</span>:<span class="string">&#x27;example&#x27;</span>;</span><br><span class="line"><span class="variable">$s2</span>:<span class="string">&quot;example&quot;</span>;</span><br><span class="line"><span class="variable">$s3</span>:example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义颜色</span></span><br><span class="line"><span class="variable">$c1</span>:blue;</span><br><span class="line"><span class="variable">$c2</span>:<span class="number">#04a3f9</span>;</span><br><span class="line"><span class="variable">$c3</span>:rgba(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义布尔型</span></span><br><span class="line"><span class="variable">$b1</span>:false;</span><br><span class="line"><span class="variable">$b2</span>:true;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义空值</span></span><br><span class="line"><span class="variable">$e1</span>:null;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="variable">$a1</span>:<span class="number">10</span> <span class="number">20</span> <span class="number">5</span> <span class="number">15</span>,blue,<span class="number">15px</span>;</span><br></pre></td></tr></table></figure>


<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p><code>sass</code>支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)。<br>关系运算 <code>&lt;, &gt;, &lt;=, &gt;=</code> 也可用于数字运算，相等运算 <code>==, !=</code> 可用于所有数据类型。</p>
<h3 id="颜色值运算"><a href="#颜色值运算" class="headerlink" title="颜色值运算"></a>颜色值运算</h3><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>计算 <code>01 + 04 = 05</code> <code>02 + 05 = 07</code> <code>03 + 06 = 09</code>，然后编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数字与颜色值之间也可以进行算数运算，同样也是分段计算的</p>
</blockquote>
<h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p><code>+</code> 可用于连接字符串，如果有引号字符串（位于 <code>+</code> 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 <code>+</code> 左侧）连接有引号字符串，运算结果则没有引号。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Foo &quot;</span> + Bar;</span><br><span class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">&quot;serif&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Foo Bar&quot;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="插值语句"><a href="#插值语句" class="headerlink" title="插值语句 #{ }"></a>插值语句 #{ }</h2><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器或属性名中使用变量：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue; &#125;</span><br></pre></td></tr></table></figure>
<p><code>#&#123;&#125;</code>里还可以进行一些运算，例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --继承</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/5%E3%80%81%E7%BB%A7%E6%89%BF.html</url>
    <content><![CDATA[<p><code>sass</code>中的继承使用<code>@extend</code>标识符，一次可以继承一个或多个样式。</p>
<a id="more"></a>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>可以一次继承一个或多个样式。例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> .alert;</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.warn</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> .alert, .title;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span>, <span class="selector-class">.success</span>, <span class="selector-class">.warn</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span>, <span class="selector-class">.warn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承的作用域"><a href="#继承的作用域" class="headerlink" title="继承的作用域"></a>继承的作用域</h2><p>继承在指令中是有作用域问题的，继承是无法使在指令如<code>@media</code>之外的选择器继承的，要是想要继承就只能在写指令中。</p>
<h2 id="占位符-—"><a href="#占位符-—" class="headerlink" title="占位符 — %"></a>占位符 — %</h2><p>占位符可以使样式直接添加到继承的样式中，例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%alert&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">%<span class="selector-tag">title</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> %alert;</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.warn</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> %alert, %title;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.success</span>, <span class="selector-class">.warn</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --函数与调试</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/6%E3%80%81%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>详情查看<a href="https://www.runoob.com/sass/sass-functions.html">菜鸟教程</a></p>
<a id="more"></a>

<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>自定义函数需要使用<code>@function</code>定义函数，通过<code>@return</code>指令返回数据。例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> double(<span class="variable">$width</span>)&#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="variable">$width</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:double(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试指令可以在编译<code>sass</code>时定义控制台的输出信息，共有三个指定，分别是：<code>@debug</code>、<code>@warn</code>和<code>@error</code>。</p>
<ul>
<li><code>@debug</code>: 输出<code>sass</code>表达式的值或文本。</li>
<li><code>@warn</code>：用来输出警告信息</li>
<li><code>@error</code>：用来输出错误信息</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --控制指令</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/7%E3%80%81%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h2><p><code>sass</code>中的条件控制指令用法同<code>JavaScript</code>中的<code>if</code>语句用法大致一样。例如：</p>
<a id="more"></a>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cond</span>:<span class="number">14px</span>;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="keyword">@if</span> <span class="variable">$cond</span> &lt; <span class="number">0px</span>&#123;</span><br><span class="line">		<span class="keyword">@error</span> <span class="string">&#x27;this is availavle&#x27;</span>;</span><br><span class="line">	&#125;<span class="keyword">@else</span> if <span class="variable">$cond</span> &gt; <span class="number">100px</span>&#123;</span><br><span class="line">		<span class="keyword">@warn</span> <span class="string">&#x27;the value is too large&#x27;</span>;</span><br><span class="line">	&#125;<span class="keyword">@else</span>&#123;</span><br><span class="line">		<span class="attribute">margin-top</span>:<span class="variable">$cond</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h2><p><code>@for</code> 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。<br>它有两种写法:</p>
<ul>
<li><code>@for $var from &lt;start&gt; through &lt;end&gt;</code> : <em>条件范围包含 <start> 与 <end> 的值</em></li>
<li><code>@for $var from &lt;start&gt; to &lt;end&gt;</code> : <em>条件范围只包含 <start> 的值不包含 <end> 的值</em></li>
</ul>
<blockquote>
<p><code>$var</code> 可以是任何变量；<code>&lt;start&gt;</code> 和 <code>&lt;end&gt;</code> 必须是整数值。</p>
</blockquote>
<p>代码实例:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h2><p><code>@each</code>可以用来遍历一个值列表【例如:<code>a,b,c</code>或(12,23,34)】<br>指令的格式是 <code>$var in &lt;list&gt;</code>, <code>$var</code> 可以是任何变量名，比如 <code>$length</code> 或者 <code>$name</code>，而 <code>&lt;list&gt;</code> 是一连串的值，也就是值列表。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure>
<h3 id="高级用法一-同时遍历多个列表"><a href="#高级用法一-同时遍历多个列表" class="headerlink" title="高级用法一: 同时遍历多个列表"></a>高级用法一: 同时遍历多个列表</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$className</span>,<span class="variable">$width</span>,<span class="variable">$color</span> in (h1,h2),(<span class="number">12px</span>,<span class="number">10px</span>),(blue,red)&#123;</span><br><span class="line">    .#&#123;<span class="variable">$className</span>&#125;-<span class="attribute">icon</span>&#123;</span><br><span class="line">    	<span class="attribute">width</span>:<span class="variable">$width</span>;</span><br><span class="line">        <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.h1-icon</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2-icon</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高级用法二-遍历拉列表的key和value"><a href="#高级用法二-遍历拉列表的key和value" class="headerlink" title="高级用法二: 遍历拉列表的key和value"></a>高级用法二: 遍历拉列表的key和value</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>,<span class="variable">$color</span> in (h1:blue,h2:red)&#123;</span><br><span class="line">    .#&#123;<span class="variable">$name</span>&#125;-<span class="attribute">icon</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.h1-icon</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.h2-icon</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h2><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。类似于<code>JavaScript</code>中的<code>while</code>语句。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass --选择器嵌套</title>
    <url>/%E5%89%8D%E7%AB%AF/Sass/8%E3%80%81Mixin.html</url>
    <content><![CDATA[<p>混合指令<code>mixin</code>是可以重用的一组CSS声明。<code>mixin</code>有助于减少重复代码，只需声明一次，就可在文件中引用。它有点类似于变量，但与变量不同的它可以定义一个样式片段，还可以像函数那样定义参数。</p>
<a id="more"></a>

<h2 id="定义mixin"><a href="#定义mixin" class="headerlink" title="定义mixin"></a>定义mixin</h2><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> cont&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    size:<span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用mixin"><a href="#引用mixin" class="headerlink" title="引用mixin"></a>引用mixin</h2><p>引用<code>mixin</code>需要使用<code>@include</code>指令，例如引用上面例子中的混合指令：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="keyword">@include</span> cont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    size:<span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数用于给混合指令中的样式设定变量，并且赋值使用。在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> cont(<span class="variable">$color</span>:red,<span class="variable">$size</span>:<span class="number">13px</span>)&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">    size:<span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="keyword">@include</span> cont(green,<span class="number">15px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数变量后面跟一个冒号可以设定参数默认值</p>
</blockquote>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">    size:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="传递多值参数"><a href="#传递多值参数" class="headerlink" title="传递多值参数"></a>传递多值参数</h2><p>传递多值参数需要对参数进行 <code>...</code> 运算，例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> cont(<span class="variable">$shadow</span>...)&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="variable">$shadow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="keyword">@include</span>(<span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">#555</span>,<span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">#555</span>,<span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="传递内容"><a href="#传递内容" class="headerlink" title="传递内容"></a>传递内容</h2><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  * <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  <span class="selector-id">#logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(/logo.gif);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译为</span></span><br><span class="line"></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(/logo.gif);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="指令简写"><a href="#指令简写" class="headerlink" title="指令简写"></a>指令简写</h2><p>为便于书写，<code>@mixin</code> 可以用 <code>=</code> 表示，而 <code>@include</code> 可以用 <code>+</code> 表示</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 安装与使用</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/0%E3%80%81TypeScript%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<p><code>TypeScript</code>是由微软开发的一款开源的编程语言。它是<code>JavaScript</code>的超级，扩展了<code>JavaScript</code>的语法，遵循最新的ES6、ES5规范。</p>
<p><code>TypeScript</code>更像后端<code>java</code>、<code>C#</code>这样的面向对象语言可以让<code>js</code>开发大型企业项目。</p>
<h2 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g typescript     <span class="comment">//安装命令</span></span><br><span class="line">tsc helloworld.ts      <span class="comment">//编译命令</span></span><br></pre></td></tr></table></figure>
<h2 id="使用Vscode开发工具自动编译"><a href="#使用Vscode开发工具自动编译" class="headerlink" title="使用Vscode开发工具自动编译"></a>使用Vscode开发工具自动编译</h2><p>在项目的根目录下使用下面的命令生成配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改生成文件中的 <code>&quot;outDir&quot;</code>选项,将输出路径改为你想要的</p>
</blockquote>
<p>在<code>vscode</code>工具中点击 任务 –&gt; 运行任务,然后点击<code>tsc:监视-tsconfig.json</code>,然后就可以自动生成代码了</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 数据类型</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/1%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<p>typescript中为了使编写的代码更规范，更有利于维护，增加了类型校验，在typescript中主要给我们提供了以下数据类型</p>
<ul>
<li>布尔类型(boolean)</li>
<li>数字类型(number)</li>
<li>字符串类型(string)</li>
<li>数组类型(array)</li>
<li>元组类型(tuple)</li>
<li>任意类型(any)</li>
<li>null 和 undefined</li>
<li>void类型</li>
<li>never类型</li>
</ul>
<a id="more"></a>

<h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>ts规定定义变量时必须制定类型:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag:<span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="number">123</span>;    <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>定义字符串、数字类型与上面的一样</p>
</blockquote>
<h3 id="定义数组类型"><a href="#定义数组类型" class="headerlink" title="定义数组类型"></a>定义数组类型</h3><p>第一种：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];        <span class="comment">//定义数字类型的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p>第二种(数组泛型):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];        <span class="comment">//定义数字类型的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p>第三种(用接口表示数组):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>NumberArray</code> 表示：只要索引的类型是数字时，那么值的类型必须是数字。这种方式定义起来比较麻烦，所以不常用。</p>
</blockquote>
<h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</p>
<p>定义一对值分别为 <code>string</code> 和 <code>number</code> 的元组：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">25</span>];</span><br></pre></td></tr></table></figure>
<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">tom[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">tom[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">tom[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>也可以只赋值其中一项：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">&#x27;Tom&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Property &#x27;1&#x27; is missing in type &#x27;[string]&#x27; but required in type &#x27;[string, number]&#x27;.</span></span><br></pre></td></tr></table></figure>








<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure>
<p>默认情况下，从<code>0</code>开始为元素编号。 你也可以手动的指定成员的数值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;<span class="string">&#x27;Red&#x27;</span> = <span class="number">1</span>, Green=<span class="number">2</span>, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Red;              <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"><span class="built_in">console</span>.log(c);          <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义</span><br><span class="line">enum 枚举名&#123;</span><br><span class="line">	标识符[&#x3D;整型常数],</span><br><span class="line">	标识符[&#x3D;整型常数],</span><br><span class="line">	.....</span><br><span class="line">	标识符[&#x3D;整型常数],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><p>任意值（Any）用来表示允许赋值为任意类型。</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBox:<span class="built_in">any</span> = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">oBox.style.color = <span class="string">&#x27;red&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</p>
</blockquote>
<h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义多个类型</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span>;</span><br><span class="line">num = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">//123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><p><code>typescript</code>中表示没有任何类型,一般用于定义方法的时候没有返回值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果一个方法的返回值为数字,可以改为<code>function run():number&#123;&#125;</code></p>
</blockquote>
<h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><p>never类型是其他类型(包括<code>null</code>和<code>undefined</code>的子类型,表示的是那些永不存在的值的类型。</p>
<p><code>never</code>类型是任何类型的子类型,也可以赋值给任何类型;但是没有任何类型可以赋值给<code>never类型</code>(除了<code>never</code>本身之外)</p>
<h2 id="对象的类型-–-接口"><a href="#对象的类型-–-接口" class="headerlink" title="对象的类型 – 接口"></a>对象的类型 – 接口</h2><p>在<code>typescript</code>中,我们使用接口(<code>interface</code>)来定义对象的类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>Person</code>接口约束了<code>tom</code>对象,<code>tom</code>对象里的属性必须和接口中的保持一致</p>
</blockquote>
<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;    <span class="comment">//可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong></p>
</blockquote>
<h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</p>
</blockquote>
<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种。联合类型使用 <code>|</code> 分隔每个类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let myFavoriteNumber: string | number;</span><br><span class="line">myFavoriteNumber &#x3D; &#39;seven&#39;;</span><br><span class="line">myFavoriteNumber &#x3D; 7;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 函数</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/2%E3%80%81%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<p><code>typescript</code>为<code>JavaScript</code>函数添加了额外的功能:</p>
<ul>
<li>指定返回值类型</li>
<li>指定传参的类型</li>
<li>可选参数和默认参数</li>
<li>剩余参数</li>
<li>重载</li>
</ul>
<a id="more"></a>

<h2 id="指定返回值类型"><a href="#指定返回值类型" class="headerlink" title="指定返回值类型"></a>指定返回值类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getInfo());  <span class="comment">//123</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码定义了一个返回值类型为数字的函数</p>
</blockquote>
<h2 id="指定传参的类型"><a href="#指定传参的类型" class="headerlink" title="指定传参的类型"></a>指定传参的类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">num1:<span class="built_in">number</span>,num2:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getInfo(<span class="number">1</span>,<span class="number">4</span>));  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p><code>JavaScript</code>里面的方法实参和形参可以不一样,但是<code>typescript</code>中必须一样,如果不一样就必须配置<strong>可选参数(在参数后面紧跟一个问号)</strong>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span>,age?:<span class="built_in">number</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- 年龄保密`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getInfo(<span class="number">1</span>,<span class="number">4</span>));  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>可选参数需要写在最后面</strong></p>
</blockquote>
<p><code>ES6</code>和<code>typescript</code>中都可以设置<strong>默认参数</strong>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span>=<span class="number">20</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getInfo(<span class="number">1</span>,<span class="number">4</span>));  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码给<code>age</code>设置了默认参数20</p>
</blockquote>
<h2 id="用接口定义函数的形状"><a href="#用接口定义函数的形状" class="headerlink" title="用接口定义函数的形状"></a>用接口定义函数的形状</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (source: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>当你并不知道会有多少参数传递进来,可以使用ES6中的点运算符。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">name:<span class="built_in">string</span>,...result:<span class="built_in">number</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;result.length;i++)&#123;</span><br><span class="line">        sum+=result[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;sum&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="string">&#x27;加法运算&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));  <span class="comment">// 加法运算 --- 11</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>剩余参数要写在最后面</strong></p>
</blockquote>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p><code>java</code>中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。<br><code>typescript</code>中的重载：通过为同一个函数提供多个函数类型定义来实现重载。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">str:<span class="built_in">any</span></span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span> + str;   </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的年龄是:&#x27;</span> + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getInfo(<span class="string">&#x27;张三&#x27;</span>));      <span class="comment">//我叫张三</span></span><br><span class="line"><span class="built_in">console</span>.log(getInfo(<span class="number">12</span>));      <span class="comment">//我的年龄是:12</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 函数</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/3%E3%80%81%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80.html</url>
    <content><![CDATA[<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>
<a id="more"></a>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;类型&gt;值</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">值 <span class="keyword">as</span> 类型</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</p>
</blockquote>
<h2 id="用于创建对象"><a href="#用于创建对象" class="headerlink" title="用于创建对象"></a>用于创建对象</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Shape&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 类</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/4%E3%80%81%E7%B1%BB.html</url>
    <content><![CDATA[<p><code>typescript</code>中的类扩展了ES6中的类，在其基础上扩展了以下语法：</p>
<ul>
<li>访问修饰符</li>
<li>静态属性</li>
<li>抽象类</li>
</ul>
<a id="more"></a>

<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p><code>typescript</code>提供了下列修饰符:</p>
<ul>
<li><code>public</code>：公共的（类中的成员默认为<code>public</code>）</li>
<li><code>private</code>：私有的（不能在声明它的类的外部访问）</li>
<li><code>protected</code>：受保护的（<code>protected</code>修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问）</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">theName: <span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = theName; </span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">&quot;Cat&quot;</span>,<span class="number">12</span>).age; <span class="comment">// 错误: &#x27;age&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure>
<h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><p>使用<code>readonly</code>关键字可以将属性设置为只读的。 <strong>只读属性必须在声明时或构造函数里被初始化</strong>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Octopus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> Octopus(<span class="string">&quot;Man with the 8 strong legs&quot;</span>);</span><br><span class="line">dad.name = <span class="string">&quot;Man with the 3-piece suit&quot;</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure>

<p>readonly修饰符也可以用在参数上</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Octopus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">readonly</span> numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">readonly</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>public</code>、<code>private</code>、<code>protected</code>同样可以用在参数上</p>
</blockquote>
<p><code>readonly</code> VS <code>const</code><br>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用<br><code>const</code>，若做为属性则使用<code>readonly</code>。</p>
<h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p><code>typescript</code>中通过使用<code>static</code>来定义静态属性:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bike</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> origin:<span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。<br><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;roaming the earch...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 接口</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/5%E3%80%81%E6%8E%A5%E5%8F%A3.html</url>
    <content><![CDATA[<p>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。接口之定义了方法，但没有实现，具体的实现有继承它的类来完成。</p>
<p><code>typescript</code>中的接口主要有以下:</p>
<ul>
<li>属性类接口</li>
<li>函数类型接口</li>
<li>可索引接口</li>
<li>类类型接口</li>
</ul>
<a id="more"></a>

<h2 id="属性类接口"><a href="#属性类接口" class="headerlink" title="属性类接口"></a>属性类接口</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类型检查器会查看<code>printLabel</code>的调用。<code>printLabel</code>有一个参数，并要求这个对象参数有一个名为<code>label</code>类型为<code>string</code>的属性。</p>
</blockquote>
<p>使用属性接口改写上面的例子:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;      <span class="comment">//可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;<span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span>&#125;;   <span class="comment">//这样写只要包含必须要有的属性即可</span></span><br><span class="line">printLabel(myObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line">printLabel(&#123;<span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span>&#125;);     <span class="comment">//这样写对象中的属性必须和接口中的保持一致</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>直接将对象传给函数和将对象赋值给变量后再传入是不一样：</p>
<ul>
<li>直接传对象给函数：对象中的属性必须跟接口中的保持一致</li>
<li>将对象赋值给变量后再传入：对象中可以含有不存在接口中的属性</li>
</ul>
</blockquote>
<p>解决上面直接传对象给函数必须和接口中的属性保持一致的问题：添加一个可索引的类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;      <span class="comment">//可选属性</span></span><br><span class="line">  [propName:<span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    <span class="keyword">readonly</span> x: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">readonly</span> y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>


<h2 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h2><p>函数类型接口就是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">&quot;121234234&quot;</span>,<span class="string">&quot;12&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>mySearch</code>方法里的参数名可以不跟接口中的保持一致,但是顺序要一致。</p>
</blockquote>
<p>函数可以省去参数类型的定义和返回类型的定义：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source, subString</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">&quot;121234234&quot;</span>,<span class="string">&quot;12&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>


<h2 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h2><p>可索引类型具有一个<em>索引签名</em>，它描述了对象索引的类型，还有相应的索引返回值类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数组的约束</span></span><br><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//对对象的约束</span></span><br><span class="line"><span class="keyword">interface</span> obj &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h2><p>对类的约束，跟抽象类有点类似。用法与C#或Java里的接口的基本一样</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal&#123;</span><br><span class="line">    name:<span class="built_in">string</span>;</span><br><span class="line">    eat(str:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name:<span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params">aName:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(aName + <span class="string">&#x27;吃肉&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.eat(<span class="string">&quot;小黑&quot;</span>);   <span class="comment">//小黑吃肉</span></span><br></pre></td></tr></table></figure>


<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><p>和类一样，接口也可以相互继承。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 泛型</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/6%E3%80%81%E6%B3%9B%E5%9E%8B.html</url>
    <content><![CDATA[<p>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。                 </p>
<p>在像C#和Java这样的语言中，可以使用<code>泛型</code>来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。        </p>
<p>通俗理解：泛型就是解决  类  接口   方法的复用性、以及对不特定数据类型的支持。</p>
<a id="more"></a>

<h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello world!&quot;</span>));     <span class="comment">//hello world!</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>T就表示泛型,它会在调用函数的时候确认类型。</p>
</blockquote>
<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> fn&lt;T&gt;&#123;</span><br><span class="line">    &lt;T&gt;(str:T):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b:fn&lt;<span class="built_in">string</span>&gt; = hello;</span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="string">&quot;hello world!&quot;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 声明文件</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/7%E3%80%81%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 内置对象</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/8%E3%80%81%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html</url>
    <content><![CDATA[<p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p>
<p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p>
<a id="more"></a>

<h2 id="ECMAScript的内置对象"><a href="#ECMAScript的内置对象" class="headerlink" title="ECMAScript的内置对象"></a>ECMAScript的内置对象</h2><p>ECMAScript 标准提供的内置对象有：</p>
<p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p>
<p>我们可以在 TypeScript 中将变量定义为这些类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error occurred&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br></pre></td></tr></table></figure>
<p>更过的内置对象可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">MDN文档</a>。</p>
<h2 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h2><p>DOM 和 BOM 提供的内置对象有：</p>
<p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p>
<p>TypeScript 中会经常用到这些类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript -- 类型别名</title>
    <url>/%E5%89%8D%E7%AB%AF/TypeScript/9%E3%80%81%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D.html</url>
    <content><![CDATA[<p>类型别名用来给一个类型起个新名字。</p>
<a id="more"></a>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>使用<code>type</code>创建类型别名:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类型别名常用于联合类型。</p>
</blockquote>
<h2 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h2><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;scroll&#x27;</span> | <span class="string">&#x27;mousemove&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;hello&#x27;</span>), <span class="string">&#x27;scroll&#x27;</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;world&#x27;</span>), <span class="string">&#x27;dbclick&#x27;</span>); <span class="comment">// 报错，event 不能为 &#x27;dbclick&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>，它只能取三种字符串中的一种。</p>
</blockquote>
<p>注意，<strong>类型别名与字符串字面量类型都是使用</strong> <code>type</code> <strong>进行定义。</strong></p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>css高度塌陷解决方案</title>
    <url>/%E5%89%8D%E7%AB%AF/css/%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="什么是高度塌陷"><a href="#什么是高度塌陷" class="headerlink" title="什么是高度塌陷"></a>什么是高度塌陷</h2><p>也就是子元素多高，父元素就多高。但是当为子元素设置浮动以后，子元素会完全脱离文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。  由于父元素的高度塌陷了，则父元素下的所有元素都会向上移动，这样将会导致页面布局混乱。</p>
<p>所以在开发中一定要避免出现高度塌陷的问题,我们可以将父元素的高度写死，以避免塌陷的问题出现， 但是一旦高度写死，父元素的高度将不能自动适应子元素的高度，所以这种方案是不推荐使用的。</p>
<h2 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 高度塌陷的解决方案一</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">                border: 10px red solid;</span><br><span class="line">                /*</span><br><span class="line">                 * 根据W3C的标准，在页面中元素都一个隐含的属性叫做Block Formatting Context</span><br><span class="line">                 *     简称BFC，该属性可以设置打开或者关闭，默认是关闭的。</span><br><span class="line">                 * 当开启元素的BFC以后，元素将会具有如下的特性：</span><br><span class="line">                 *     1.父元素的垂直外边距不会和子元素重叠    </span><br><span class="line">                 *     2.开启BFC的元素不会被浮动元素所覆盖</span><br><span class="line">                 *     3.开启BFC的元素可以包含浮动的子元素</span><br><span class="line">                 * </span><br><span class="line">                 * 如何开启元素的BFC</span><br><span class="line">                 *     1.设置元素浮动</span><br><span class="line">                 *         - 使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失</span><br><span class="line">                 *             而且使用这种方式也会导致下边的元素上移，不能解决问题</span><br><span class="line">                 *     2.设置元素绝对定位</span><br><span class="line">                 *     3.设置元素为inline-block</span><br><span class="line">                 *         - 可以解决问题，但是会导致宽度丢失，不推荐使用这种方式</span><br><span class="line">                 *     4.将元素的overflow设置为一个非visible的值</span><br><span class="line">                 *     </span><br><span class="line">                 * 推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式。    </span><br><span class="line">                 */</span><br><span class="line">                </span><br><span class="line"><span class="css">                <span class="comment">/*overflow: hidden;*/</span></span></span><br><span class="line">                </span><br><span class="line">                /*</span><br><span class="line">                 *但是在IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。</span><br><span class="line">                 * 在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，</span><br><span class="line">                 * 该属性的作用和BFC类似，所在IE6浏览器可以通过开hasLayout来解决该问题</span><br><span class="line">                 * 开启方式很多，我们直接使用一种副作用最小的：</span><br><span class="line">                 *     直接将元素的zoom设置为1即可</span><br><span class="line">                 * </span><br><span class="line">                 */</span><br><span class="line">                /*</span><br><span class="line">                 * zoom表示放大的意思，后边跟着一个数值，写几就将元素放大几倍</span><br><span class="line"><span class="css">                 * <span class="selector-tag">zoom</span><span class="selector-pseudo">:1</span>表示不放大元素，但是通过该样式可以开启<span class="selector-tag">hasLayout</span></span></span><br><span class="line">                 * zoom这个样式，只在IE中支持，其他浏览器都不支持</span><br><span class="line">                 */</span><br><span class="line"><span class="css">                <span class="selector-tag">zoom</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">                overflow: hidden;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: blue;</span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line">                 height: 100px;</span><br><span class="line">                 background-color: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">                border: 1px solid red;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: blue;</span><br><span class="line">                </span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">            /*</span><br><span class="line">             * 解决高度塌陷方案二：</span><br><span class="line">             *     可以直接在高度塌陷的父元素的最后，添加一个空白的div，</span><br><span class="line">             *     由于这个div并没有浮动，所以他是可以撑开父元素的高度的，</span><br><span class="line">             *     然后在对其进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，</span><br><span class="line">             *     基本没有副作用</span><br><span class="line">             * </span><br><span class="line">             * 使用这种方式虽然可以解决问题，但是会在页面中添加多余的结构。</span><br><span class="line">             */</span><br><span class="line"><span class="css">            <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line">                clear: both;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">                border: 1px solid red;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: blue;</span><br><span class="line">                </span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*通过after伪类，选中box1的后边*/</span></span></span><br><span class="line">            /*</span><br><span class="line">             * 可以通过after伪类向元素的最后添加一个空白的块元素，然后对其清除浮动，</span><br><span class="line">             *     这样做和添加一个div的原理一样，可以达到一个相同的效果，</span><br><span class="line">             *     而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用</span><br><span class="line">             */</span><br><span class="line"><span class="css">            <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*添加一个内容*/</span></span></span><br><span class="line">                content: &quot;&quot;;</span><br><span class="line"><span class="css">                <span class="comment">/*转换为一个块元素*/</span></span></span><br><span class="line">                display: block;</span><br><span class="line"><span class="css">                <span class="comment">/*清除两侧的浮动*/</span></span></span><br><span class="line">                clear: both;</span><br><span class="line">            &#125;</span><br><span class="line">            /*</span><br><span class="line">             * 在IE6中不支持after伪类,</span><br><span class="line">             *     所以在IE6中还需要使用hasLayout来处理</span><br><span class="line">             */</span><br><span class="line"><span class="css">            <span class="selector-class">.clearfix</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">zoom</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app 踩坑记录</title>
    <url>/%E5%89%8D%E7%AB%AF/uni-app/%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="uni-app中的事件"><a href="#uni-app中的事件" class="headerlink" title="uni-app中的事件"></a>uni-app中的事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 事件映射表，左侧为 WEB 事件，右侧为 &#96;&#96;uni-app&#96;&#96; 对应事件</span><br><span class="line">&#123;</span><br><span class="line">    click: &#39;tap&#39;,</span><br><span class="line">    touchstart: &#39;touchstart&#39;,</span><br><span class="line">    touchmove: &#39;touchmove&#39;,</span><br><span class="line">    touchcancel: &#39;touchcancel&#39;,</span><br><span class="line">    touchend: &#39;touchend&#39;,</span><br><span class="line">    tap: &#39;tap&#39;,</span><br><span class="line">    longtap: &#39;longtap&#39;, &#x2F;&#x2F;推荐使用longpress代替</span><br><span class="line">    input: &#39;input&#39;,</span><br><span class="line">    change: &#39;change&#39;,</span><br><span class="line">    submit: &#39;submit&#39;,</span><br><span class="line">    blur: &#39;blur&#39;,</span><br><span class="line">    focus: &#39;focus&#39;,</span><br><span class="line">    reset: &#39;reset&#39;,</span><br><span class="line">    confirm: &#39;confirm&#39;,</span><br><span class="line">    columnchange: &#39;columnchange&#39;,</span><br><span class="line">    linechange: &#39;linechange&#39;,</span><br><span class="line">    error: &#39;error&#39;,</span><br><span class="line">    scrolltoupper: &#39;scrolltoupper&#39;,</span><br><span class="line">    scrolltolower: &#39;scrolltolower&#39;,</span><br><span class="line">    scroll: &#39;scroll&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="uni-app中的组件通信"><a href="#uni-app中的组件通信" class="headerlink" title="uni-app中的组件通信"></a>uni-app中的组件通信</h2><h3 id="页面通信"><a href="#页面通信" class="headerlink" title="页面通信"></a>页面通信</h3><ol>
<li>通过<code>uni.$emit(&quot;事件名&quot;,val)</code>创建事件</li>
<li>在<code>onLoad</code>函数内使用<code>uni.$on(&quot;事件名&quot;,function(val)&#123;&#125;)</code>监听事件</li>
</ol>
<h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p>与<code>vue</code>保持一致</p>
<hr>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>uni-app中只能获取dom信息,不可以操作dom</p>
<p><a href="https://uniapp.dcloud.io/api/ui/nodes-info">官方文档</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>vue SSR</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vue-SSR.html</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>服务端渲染指的是将<code>Vue</code>组件渲染为服务端的HTML字符串，再返回给浏览器。服务端渲染的<code>Vue</code>应用程序也可以被认为是“同构”或“通用”。</p>
<h2 id="SPA项目为什么需要SSR"><a href="#SPA项目为什么需要SSR" class="headerlink" title="SPA项目为什么需要SSR"></a>SPA项目为什么需要SSR</h2><p>加载首屏的时候需要下载许多资源,这导致了首屏白屏时间过长，影响用户体验。此外，由于使用JS渲染页面，不利于浏览器抓取页面内容。</p>
<h2 id="SSR的好处"><a href="#SSR的好处" class="headerlink" title="SSR的好处"></a>SSR的好处</h2><ul>
<li>更快的内容到达时间，减少首页白屏时间</li>
<li>更好的SEO</li>
</ul>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建vue-cli项目</span></span><br><span class="line">vue create ssr</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install koa koa-router vue-server-renderer --save</span><br></pre></td></tr></table></figure>
<p>构建步骤:</p>
<p><img src="https://cloud.githubusercontent.com/assets/499550/17607895/786a415a-5fee-11e6-9c11-45a2cfdf085c.png" alt="架构"></p>
<h3 id="webpack源码结构"><a href="#webpack源码结构" class="headerlink" title="webpack源码结构"></a>webpack源码结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── components</span><br><span class="line">│   ├── Foo.vue</span><br><span class="line">│   ├── Bar.vue</span><br><span class="line">│   └── Baz.vue</span><br><span class="line">├── App.vue</span><br><span class="line">├── main.js # 通用 入口</span><br><span class="line">├── entry-client.js # 仅运行于浏览器</span><br><span class="line">└── entry-server.js # 仅运行于服务器</span><br></pre></td></tr></table></figure>
<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> router = createRouter();</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        router,</span><br><span class="line">        render:<span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; app, router &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> applyLeave <span class="keyword">from</span> <span class="string">&#x27;./home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./login&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    routes: [</span><br><span class="line">      login,</span><br><span class="line">      applyLeave,</span><br><span class="line">      &#123;</span><br><span class="line">        path:<span class="string">&quot;/*&quot;</span>,</span><br><span class="line">        redirect:<span class="string">&quot;/login&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="entry-client-js"><a href="#entry-client-js" class="headerlink" title="entry-client.js"></a>entry-client.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂载、激活APP</span></span><br><span class="line"><span class="keyword">import</span> createApp <span class="keyword">from</span> <span class="string">&#x27;./main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, router &#125; = createApp();</span><br><span class="line">router.onReady(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    app.$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="entry-server-js"><a href="#entry-server-js" class="headerlink" title="entry-server.js"></a>entry-server.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染首屏</span></span><br><span class="line"><span class="keyword">import</span> createApp <span class="keyword">from</span> <span class="string">&#x27;./main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, router&#125; = createApp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入首屏</span></span><br><span class="line">        router.push(context.url);</span><br><span class="line">        router.onReady(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            resolve(app);</span><br><span class="line">        &#125;,reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h3><p>依赖安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack-node-externals lodash.merge -D</span><br></pre></td></tr></table></figure>


<p>项目根目录下新建<code>vue.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueSSRServerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer/server-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueSSRClientPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer/client-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;lodash.merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> TARGET_NODE = process.env.WEBPACK_TARGET === <span class="string">&#x27;node&#x27;</span></span><br><span class="line"><span class="keyword">const</span> target = TARGET_NODE ? <span class="string">&quot;server&quot;</span> : <span class="string">&quot;client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    css:&#123;</span><br><span class="line">        extract:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//outputDir:&#x27;./dist/&#x27; + target,</span></span><br><span class="line">    configureWebpack:<span class="function">()=&gt;</span>(&#123;</span><br><span class="line">        <span class="comment">// 将entry指向应用程序的server/client文件</span></span><br><span class="line">        entry: <span class="string">`./src/entry-<span class="subst">$&#123;target&#125;</span>.js`</span>,</span><br><span class="line">        <span class="comment">// 对 bundle renderer 提供source map 支持</span></span><br><span class="line">        devtool:<span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">        <span class="comment">// 这允许webpack 以 Node 适用方式处理动态导入(dynamic import)</span></span><br><span class="line">        <span class="comment">// 并且还会在编译Vue组件时告知`vue-loader` 输送面向服务器代码(server-oriented code)</span></span><br><span class="line">        target:TARGET_NODE ? <span class="string">&#x27;node&#x27;</span> : <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">        node: TARGET_NODE ? <span class="literal">undefined</span> : <span class="literal">false</span>,</span><br><span class="line">        output:&#123;</span><br><span class="line">            <span class="comment">// 此处告知server bundle 使用Node风格导出模块</span></span><br><span class="line">            libraryTarget:TARGET_NODE ? <span class="string">&quot;commonjs2&quot;</span> : <span class="literal">undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 外置化应用程序依赖模块, 可以使用服务器构建速度更快,并生成较小的bundle文件</span></span><br><span class="line">        externals:TARGET_NODE</span><br><span class="line">            ? nodeExternals(&#123;</span><br><span class="line">                <span class="comment">// 不要外置化webpack 需要处理的依赖模块</span></span><br><span class="line">                <span class="comment">// 可以在这里添加更多的文件类型. 例如,未处理的 *.vue 原始文件</span></span><br><span class="line">                <span class="comment">// 你还应该将修改 `global` (例如polyfill)的依赖模块列入白名单</span></span><br><span class="line">                whitelist:[<span class="regexp">/\.css$/</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">            :<span class="literal">undefined</span>,</span><br><span class="line">            optimization:&#123;</span><br><span class="line">                splitChunks:<span class="literal">undefined</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 这是将服务器的整个输出构建为单个JSON文件的插件</span></span><br><span class="line">            <span class="comment">// 服务器默认文件名为`vue-ssr-server-bundle.json`</span></span><br><span class="line">            plugins:[TARGET_NODE ? <span class="keyword">new</span> VueSSRServerPlugin() : <span class="keyword">new</span> VueSSRClientPlugin()]</span><br><span class="line">    &#125;),</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        config.module</span><br><span class="line">            .rule(<span class="string">&quot;vue&quot;</span>)</span><br><span class="line">            .use(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line">            .tap(<span class="function"><span class="params">options</span>=&gt;</span>&#123;</span><br><span class="line">                merge(options,&#123;</span><br><span class="line">                    optimizeSSR:<span class="literal">false</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h3><p>安装依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i cross-env -D</span><br></pre></td></tr></table></figure>
<p>定义创建脚本,<code>package.json</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;build:client&quot;:&quot;vue-cli-service build&quot;,</span><br><span class="line">    &quot;build:server&quot;:&quot;cross-env WEBPACK_TARGET=node vue-cli-service build --mode server&quot;,</span><br><span class="line">    &quot;build&quot;:&quot;npm run build:server &amp;&amp; move dist\\vue-ssr-server-bundle.json bundle &amp;&amp; npm run build:client &amp;&amp; move bundle dist\\vue-ssr-server-bundle.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;createBundleRenderer&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="comment">// 服务端的包</span></span><br><span class="line"><span class="keyword">const</span> serverBundle = <span class="built_in">require</span>(<span class="string">&#x27;./dist/server/vue-ssr-server-bundle.json&#x27;</span>);</span><br><span class="line"><span class="comment">// 客户端的清单</span></span><br><span class="line"><span class="keyword">const</span> clientManifest = <span class="built_in">require</span>(<span class="string">&#x27;./dist/client/vue-ssr-client-manifest.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = createBundleRenderer(serverBundle,&#123;</span><br><span class="line">    runInNewContext:<span class="literal">false</span>,</span><br><span class="line">    template: fs.readFileSync(path.resolve(__dirname+<span class="string">&#x27;/public/index.temp.html&#x27;</span>),<span class="string">&#x27;utf-8&#x27;</span>),        <span class="comment">//宿主模板文件</span></span><br><span class="line">    clientManifest</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件处理静态文件请求</span></span><br><span class="line">app.use(<span class="keyword">static</span>(<span class="string">&#x27;./dist/client&#x27;</span>,&#123;<span class="attr">index</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由处理交给vue</span></span><br><span class="line">router.get(<span class="string">&#x27;*&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 创建上下文信息</span></span><br><span class="line">    <span class="keyword">const</span> context = &#123;</span><br><span class="line">        url:ctx.req.url,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> html = <span class="keyword">await</span> renderer.renderToString(context);</span><br><span class="line">        <span class="built_in">console</span>.log(html);</span><br><span class="line">        ctx.body = html;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        ctx.res.status = <span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">8081</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;渲染服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="ssr中遇到的问题"><a href="#ssr中遇到的问题" class="headerlink" title="ssr中遇到的问题"></a>ssr中遇到的问题</h2><h3 id="事件监听失效"><a href="#事件监听失效" class="headerlink" title="事件监听失效"></a>事件监听失效</h3><h3 id="页面加载过程还是很慢"><a href="#页面加载过程还是很慢" class="headerlink" title="页面加载过程还是很慢"></a>页面加载过程还是很慢</h3>]]></content>
      <categories>
        <category>前端学习</category>
        <category>SSR</category>
      </categories>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3中配置eslint</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vue-cli3%E4%B8%AD%E9%85%8D%E7%BD%AEeslint.html</url>
    <content><![CDATA[<a id="more"></a>
<blockquote>
<p>ESLint 可以通过 .eslintrc 或 package.json 中的 eslintConfig 字段来配置。</p>
</blockquote>
<p>在<code>rules</code>属性里配置规则<br>格式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rules:&#123;</span><br><span class="line">    &quot;规则名&quot;:[规则值,规则配置]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>规则值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;off&quot;或者0    &#x2F;&#x2F;关闭规则关闭</span><br><span class="line">&quot;warn&quot;或者1    &#x2F;&#x2F;在打开的规则作为警告（不影响退出代码）</span><br><span class="line">&quot;error&quot;或者2    &#x2F;&#x2F;把规则作为一个错误（退出代码触发时为1）</span><br></pre></td></tr></table></figure>
<p>规则配置参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;no-alert&quot;: 0,&#x2F;&#x2F;禁止使用alert confirm prompt</span><br><span class="line">&quot;no-array-constructor&quot;: 2,&#x2F;&#x2F;禁止使用数组构造器</span><br><span class="line">&quot;no-bitwise&quot;: 0,&#x2F;&#x2F;禁止使用按位运算符</span><br><span class="line">&quot;no-caller&quot;: 1,&#x2F;&#x2F;禁止使用arguments.caller或arguments.callee</span><br><span class="line">&quot;no-catch-shadow&quot;: 2,&#x2F;&#x2F;禁止catch子句参数与外部作用域变量同名</span><br><span class="line">&quot;no-class-assign&quot;: 2,&#x2F;&#x2F;禁止给类赋值</span><br><span class="line">&quot;no-cond-assign&quot;: 2,&#x2F;&#x2F;禁止在条件表达式中使用赋值语句</span><br><span class="line">&quot;no-console&quot;: 2,&#x2F;&#x2F;禁止使用console</span><br><span class="line">&quot;no-const-assign&quot;: 2,&#x2F;&#x2F;禁止修改const声明的变量</span><br><span class="line">&quot;no-constant-condition&quot;: 2,&#x2F;&#x2F;禁止在条件中使用常量表达式 if(true) if(1)</span><br><span class="line">&quot;no-continue&quot;: 0,&#x2F;&#x2F;禁止使用continue</span><br><span class="line">&quot;no-control-regex&quot;: 2,&#x2F;&#x2F;禁止在正则表达式中使用控制字符</span><br><span class="line">&quot;no-debugger&quot;: 2,&#x2F;&#x2F;禁止使用debugger</span><br><span class="line">&quot;no-delete-var&quot;: 2,&#x2F;&#x2F;不能对var声明的变量使用delete操作符</span><br><span class="line">&quot;no-div-regex&quot;: 1,&#x2F;&#x2F;不能使用看起来像除法的正则表达式&#x2F;&#x3D;foo&#x2F;</span><br><span class="line">&quot;no-dupe-keys&quot;: 2,&#x2F;&#x2F;在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span><br><span class="line">&quot;no-dupe-args&quot;: 2,&#x2F;&#x2F;函数参数不能重复</span><br><span class="line">&quot;no-duplicate-case&quot;: 2,&#x2F;&#x2F;switch中的case标签不能重复</span><br><span class="line">&quot;no-else-return&quot;: 2,&#x2F;&#x2F;如果if语句里面有return,后面不能跟else语句</span><br><span class="line">&quot;no-empty&quot;: 2,&#x2F;&#x2F;块语句中的内容不能为空</span><br><span class="line">&quot;no-empty-character-class&quot;: 2,&#x2F;&#x2F;正则表达式中的[]内容不能为空</span><br><span class="line">&quot;no-empty-label&quot;: 2,&#x2F;&#x2F;禁止使用空label</span><br><span class="line">&quot;no-eq-null&quot;: 2,&#x2F;&#x2F;禁止对null使用&#x3D;&#x3D;或!&#x3D;运算符</span><br><span class="line">&quot;no-eval&quot;: 1,&#x2F;&#x2F;禁止使用eval</span><br><span class="line">&quot;no-ex-assign&quot;: 2,&#x2F;&#x2F;禁止给catch语句中的异常参数赋值</span><br><span class="line">&quot;no-extend-native&quot;: 2,&#x2F;&#x2F;禁止扩展native对象</span><br><span class="line">&quot;no-extra-bind&quot;: 2,&#x2F;&#x2F;禁止不必要的函数绑定</span><br><span class="line">&quot;no-extra-boolean-cast&quot;: 2,&#x2F;&#x2F;禁止不必要的bool转换</span><br><span class="line">&quot;no-extra-parens&quot;: 2,&#x2F;&#x2F;禁止非必要的括号</span><br><span class="line">&quot;no-extra-semi&quot;: 2,&#x2F;&#x2F;禁止多余的冒号</span><br><span class="line">&quot;no-fallthrough&quot;: 1,&#x2F;&#x2F;禁止switch穿透</span><br><span class="line">&quot;no-floating-decimal&quot;: 2,&#x2F;&#x2F;禁止省略浮点数中的0 .5 3.</span><br><span class="line">&quot;no-func-assign&quot;: 2,&#x2F;&#x2F;禁止重复的函数声明</span><br><span class="line">&quot;no-implicit-coercion&quot;: 1,&#x2F;&#x2F;禁止隐式转换</span><br><span class="line">&quot;no-implied-eval&quot;: 2,&#x2F;&#x2F;禁止使用隐式eval</span><br><span class="line">&quot;no-inline-comments&quot;: 0,&#x2F;&#x2F;禁止行内备注</span><br><span class="line">&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],&#x2F;&#x2F;禁止在块语句中使用声明（变量或函数）</span><br><span class="line">&quot;no-invalid-regexp&quot;: 2,&#x2F;&#x2F;禁止无效的正则表达式</span><br><span class="line">&quot;no-invalid-this&quot;: 2,&#x2F;&#x2F;禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">&quot;no-irregular-whitespace&quot;: 2,&#x2F;&#x2F;不能有不规则的空格</span><br><span class="line">&quot;no-iterator&quot;: 2,&#x2F;&#x2F;禁止使用__iterator__ 属性</span><br><span class="line">&quot;no-label-var&quot;: 2,&#x2F;&#x2F;label名不能与var声明的变量名相同</span><br><span class="line">&quot;no-labels&quot;: 2,&#x2F;&#x2F;禁止标签声明</span><br><span class="line">&quot;no-lone-blocks&quot;: 2,&#x2F;&#x2F;禁止不必要的嵌套块</span><br><span class="line">&quot;no-lonely-if&quot;: 2,&#x2F;&#x2F;禁止else语句内只有if语句</span><br><span class="line">&quot;no-loop-func&quot;: 1,&#x2F;&#x2F;禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><br><span class="line">&quot;no-mixed-requires&quot;: [0, false],&#x2F;&#x2F;声明时不能混用声明类型</span><br><span class="line">&quot;no-mixed-spaces-and-tabs&quot;: [2, false],&#x2F;&#x2F;禁止混用tab和空格</span><br><span class="line">&quot;linebreak-style&quot;: [0, &quot;windows&quot;],&#x2F;&#x2F;换行风格</span><br><span class="line">&quot;no-multi-spaces&quot;: 1,&#x2F;&#x2F;不能用多余的空格</span><br><span class="line">&quot;no-multi-str&quot;: 2,&#x2F;&#x2F;字符串不能用\换行</span><br><span class="line">&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],&#x2F;&#x2F;空行最多不能超过2行</span><br><span class="line">&quot;no-native-reassign&quot;: 2,&#x2F;&#x2F;不能重写native对象</span><br><span class="line">&quot;no-negated-in-lhs&quot;: 2,&#x2F;&#x2F;in 操作符的左边不能有!</span><br><span class="line">&quot;no-nested-ternary&quot;: 0,&#x2F;&#x2F;禁止使用嵌套的三目运算</span><br><span class="line">&quot;no-new&quot;: 1,&#x2F;&#x2F;禁止在使用new构造一个实例后不赋值</span><br><span class="line">&quot;no-new-func&quot;: 1,&#x2F;&#x2F;禁止使用new Function</span><br><span class="line">&quot;no-new-object&quot;: 2,&#x2F;&#x2F;禁止使用new Object()</span><br><span class="line">&quot;no-new-require&quot;: 2,&#x2F;&#x2F;禁止使用new require</span><br><span class="line">&quot;no-new-wrappers&quot;: 2,&#x2F;&#x2F;禁止使用new创建包装实例，new String new Boolean new Number</span><br><span class="line">&quot;no-obj-calls&quot;: 2,&#x2F;&#x2F;不能调用内置的全局对象，比如Math() JSON()</span><br><span class="line">&quot;no-octal&quot;: 2,&#x2F;&#x2F;禁止使用八进制数字</span><br><span class="line">&quot;no-octal-escape&quot;: 2,&#x2F;&#x2F;禁止使用八进制转义序列</span><br><span class="line">&quot;no-param-reassign&quot;: 2,&#x2F;&#x2F;禁止给参数重新赋值</span><br><span class="line">&quot;no-path-concat&quot;: 0,&#x2F;&#x2F;node中不能使用__dirname或__filename做路径拼接</span><br><span class="line">&quot;no-plusplus&quot;: 0,&#x2F;&#x2F;禁止使用++，--</span><br><span class="line">&quot;no-process-env&quot;: 0,&#x2F;&#x2F;禁止使用process.env</span><br><span class="line">&quot;no-process-exit&quot;: 0,&#x2F;&#x2F;禁止使用process.exit()</span><br><span class="line">&quot;no-proto&quot;: 2,&#x2F;&#x2F;禁止使用__proto__属性</span><br><span class="line">&quot;no-redeclare&quot;: 2,&#x2F;&#x2F;禁止重复声明变量</span><br><span class="line">&quot;no-regex-spaces&quot;: 2,&#x2F;&#x2F;禁止在正则表达式字面量中使用多个空格 &#x2F;foo bar&#x2F;</span><br><span class="line">&quot;no-restricted-modules&quot;: 0,&#x2F;&#x2F;如果禁用了指定模块，使用就会报错</span><br><span class="line">&quot;no-return-assign&quot;: 1,&#x2F;&#x2F;return 语句中不能有赋值表达式</span><br><span class="line">&quot;no-script-url&quot;: 0,&#x2F;&#x2F;禁止使用javascript:void(0)</span><br><span class="line">&quot;no-self-compare&quot;: 2,&#x2F;&#x2F;不能比较自身</span><br><span class="line">&quot;no-sequences&quot;: 0,&#x2F;&#x2F;禁止使用逗号运算符</span><br><span class="line">&quot;no-shadow&quot;: 2,&#x2F;&#x2F;外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><br><span class="line">&quot;no-shadow-restricted-names&quot;: 2,&#x2F;&#x2F;严格模式中规定的限制标识符不能作为声明时的变量名使用</span><br><span class="line">&quot;no-spaced-func&quot;: 2,&#x2F;&#x2F;函数调用时 函数名与()之间不能有空格</span><br><span class="line">&quot;no-sparse-arrays&quot;: 2,&#x2F;&#x2F;禁止稀疏数组， [1,,2]</span><br><span class="line">&quot;no-sync&quot;: 0,&#x2F;&#x2F;nodejs 禁止同步方法</span><br><span class="line">&quot;no-ternary&quot;: 0,&#x2F;&#x2F;禁止使用三目运算符</span><br><span class="line">&quot;no-trailing-spaces&quot;: 1,&#x2F;&#x2F;一行结束后面不要有空格</span><br><span class="line">&quot;no-this-before-super&quot;: 0,&#x2F;&#x2F;在调用super()之前不能使用this或super</span><br><span class="line">&quot;no-throw-literal&quot;: 2,&#x2F;&#x2F;禁止抛出字面量错误 throw &quot;error&quot;;</span><br><span class="line">&quot;no-undef&quot;: 1,&#x2F;&#x2F;不能有未定义的变量</span><br><span class="line">&quot;no-undef-init&quot;: 2,&#x2F;&#x2F;变量初始化时不能直接给它赋值为undefined</span><br><span class="line">&quot;no-undefined&quot;: 2,&#x2F;&#x2F;不能使用undefined</span><br><span class="line">&quot;no-unexpected-multiline&quot;: 2,&#x2F;&#x2F;避免多行表达式</span><br><span class="line">&quot;no-underscore-dangle&quot;: 1,&#x2F;&#x2F;标识符不能以_开头或结尾</span><br><span class="line">&quot;no-unneeded-ternary&quot;: 2,&#x2F;&#x2F;禁止不必要的嵌套 var isYes &#x3D; answer &#x3D;&#x3D;&#x3D; 1 ? true : false;</span><br><span class="line">&quot;no-unreachable&quot;: 2,&#x2F;&#x2F;不能有无法执行的代码</span><br><span class="line">&quot;no-unused-expressions&quot;: 2,&#x2F;&#x2F;禁止无用的表达式</span><br><span class="line">&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],&#x2F;&#x2F;不能有声明后未被使用的变量或参数</span><br><span class="line">&quot;no-use-before-define&quot;: 2,&#x2F;&#x2F;未定义前不能使用</span><br><span class="line">&quot;no-useless-call&quot;: 2,&#x2F;&#x2F;禁止不必要的call和apply</span><br><span class="line">&quot;no-void&quot;: 2,&#x2F;&#x2F;禁用void操作符</span><br><span class="line">&quot;no-var&quot;: 0,&#x2F;&#x2F;禁用var，用let和const代替</span><br><span class="line">&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],&#x2F;&#x2F;不能有警告备注</span><br><span class="line">&quot;no-with&quot;: 2,&#x2F;&#x2F;禁用with</span><br><span class="line"></span><br><span class="line">&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],&#x2F;&#x2F;是否允许非空数组里面有多余的空格</span><br><span class="line">&quot;arrow-parens&quot;: 0,&#x2F;&#x2F;箭头函数用小括号括起来</span><br><span class="line">&quot;arrow-spacing&quot;: 0,&#x2F;&#x2F;&#x3D;&gt;的前&#x2F;后括号</span><br><span class="line">&quot;accessor-pairs&quot;: 0,&#x2F;&#x2F;在对象中使用getter&#x2F;setter</span><br><span class="line">&quot;block-scoped-var&quot;: 0,&#x2F;&#x2F;块语句中使用var</span><br><span class="line">&quot;brace-style&quot;: [1, &quot;1tbs&quot;],&#x2F;&#x2F;大括号风格</span><br><span class="line">&quot;callback-return&quot;: 1,&#x2F;&#x2F;避免多次调用回调什么的</span><br><span class="line">&quot;camelcase&quot;: 2,&#x2F;&#x2F;强制驼峰法命名</span><br><span class="line">&quot;comma-dangle&quot;: [2, &quot;never&quot;],&#x2F;&#x2F;对象字面量项尾不能有逗号</span><br><span class="line">&quot;comma-spacing&quot;: 0,&#x2F;&#x2F;逗号前后的空格</span><br><span class="line">&quot;comma-style&quot;: [2, &quot;last&quot;],&#x2F;&#x2F;逗号风格，换行时在行首还是行尾</span><br><span class="line">&quot;complexity&quot;: [0, 11],&#x2F;&#x2F;循环复杂度</span><br><span class="line">&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;是否允许计算后的键名什么的</span><br><span class="line">&quot;consistent-return&quot;: 0,&#x2F;&#x2F;return 后面是否允许省略</span><br><span class="line">&quot;consistent-this&quot;: [2, &quot;that&quot;],&#x2F;&#x2F;this别名</span><br><span class="line">&quot;constructor-super&quot;: 0,&#x2F;&#x2F;非派生类不能调用super，派生类必须调用super</span><br><span class="line">&quot;curly&quot;: [2, &quot;all&quot;],&#x2F;&#x2F;必须使用 if()&#123;&#125; 中的&#123;&#125;</span><br><span class="line">&quot;default-case&quot;: 2,&#x2F;&#x2F;switch语句最后必须有default</span><br><span class="line">&quot;dot-location&quot;: 0,&#x2F;&#x2F;对象访问符的位置，换行的时候在行首还是行尾</span><br><span class="line">&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],&#x2F;&#x2F;避免不必要的方括号</span><br><span class="line">&quot;eol-last&quot;: 0,&#x2F;&#x2F;文件以单一的换行符结束</span><br><span class="line">&quot;eqeqeq&quot;: 2,&#x2F;&#x2F;必须使用全等</span><br><span class="line">&quot;func-names&quot;: 0,&#x2F;&#x2F;函数表达式必须有名字</span><br><span class="line">&quot;func-style&quot;: [0, &quot;declaration&quot;],&#x2F;&#x2F;函数风格，规定只能使用函数声明&#x2F;函数表达式</span><br><span class="line">&quot;generator-star-spacing&quot;: 0,&#x2F;&#x2F;生成器函数*的前后空格</span><br><span class="line">&quot;guard-for-in&quot;: 0,&#x2F;&#x2F;for in循环要用if语句过滤</span><br><span class="line">&quot;handle-callback-err&quot;: 0,&#x2F;&#x2F;nodejs 处理错误</span><br><span class="line">&quot;id-length&quot;: 0,&#x2F;&#x2F;变量名长度</span><br><span class="line">&quot;indent&quot;: [2, 4],&#x2F;&#x2F;缩进风格</span><br><span class="line">&quot;init-declarations&quot;: 0,&#x2F;&#x2F;声明时必须赋初值</span><br><span class="line">&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],&#x2F;&#x2F;对象字面量中冒号的前后空格</span><br><span class="line">&quot;lines-around-comment&quot;: 0,&#x2F;&#x2F;行前&#x2F;行后备注</span><br><span class="line">&quot;max-depth&quot;: [0, 4],&#x2F;&#x2F;嵌套块深度</span><br><span class="line">&quot;max-len&quot;: [0, 80, 4],&#x2F;&#x2F;字符串最大长度</span><br><span class="line">&quot;max-nested-callbacks&quot;: [0, 2],&#x2F;&#x2F;回调嵌套深度</span><br><span class="line">&quot;max-params&quot;: [0, 3],&#x2F;&#x2F;函数最多只能有3个参数</span><br><span class="line">&quot;max-statements&quot;: [0, 10],&#x2F;&#x2F;函数内最多有几个声明</span><br><span class="line">&quot;new-cap&quot;: 2,&#x2F;&#x2F;函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><br><span class="line">&quot;new-parens&quot;: 2,&#x2F;&#x2F;new时必须加小括号</span><br><span class="line">&quot;newline-after-var&quot;: 2,&#x2F;&#x2F;变量声明后是否需要空一行</span><br><span class="line">&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;大括号内是否允许不必要的空格</span><br><span class="line">&quot;object-shorthand&quot;: 0,&#x2F;&#x2F;强制对象字面量缩写语法</span><br><span class="line">&quot;one-var&quot;: 1,&#x2F;&#x2F;连续声明</span><br><span class="line">&quot;operator-assignment&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;赋值运算符 +&#x3D; -&#x3D;什么的</span><br><span class="line">&quot;operator-linebreak&quot;: [2, &quot;after&quot;],&#x2F;&#x2F;换行时运算符在行尾还是行首</span><br><span class="line">&quot;padded-blocks&quot;: 0,&#x2F;&#x2F;块语句内行首行尾是否要空行</span><br><span class="line">&quot;prefer-const&quot;: 0,&#x2F;&#x2F;首选const</span><br><span class="line">&quot;prefer-spread&quot;: 0,&#x2F;&#x2F;首选展开运算</span><br><span class="line">&quot;prefer-reflect&quot;: 0,&#x2F;&#x2F;首选Reflect的方法</span><br><span class="line">&quot;quotes&quot;: [1, &quot;single&quot;],&#x2F;&#x2F;引号类型 &#96;&#96; &quot;&quot; &#39;&#39;</span><br><span class="line">&quot;quote-props&quot;:[2, &quot;always&quot;],&#x2F;&#x2F;对象字面量中的属性名是否强制双引号</span><br><span class="line">&quot;radix&quot;: 2,&#x2F;&#x2F;parseInt必须指定第二个参数</span><br><span class="line">&quot;id-match&quot;: 0,&#x2F;&#x2F;命名检测</span><br><span class="line">&quot;require-yield&quot;: 0,&#x2F;&#x2F;生成器函数必须有yield</span><br><span class="line">&quot;semi&quot;: [2, &quot;always&quot;],&#x2F;&#x2F;语句强制分号结尾</span><br><span class="line">&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],&#x2F;&#x2F;分号前后空格</span><br><span class="line">&quot;sort-vars&quot;: 0,&#x2F;&#x2F;变量声明时排序</span><br><span class="line">&quot;space-after-keywords&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;关键字后面是否要空一格</span><br><span class="line">&quot;space-before-blocks&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;函数定义时括号前面要不要有空格</span><br><span class="line">&quot;space-in-parens&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;小括号里面要不要有空格</span><br><span class="line">&quot;space-infix-ops&quot;: 0,&#x2F;&#x2F;中缀操作符周围要不要有空格</span><br><span class="line">&quot;space-return-throw-case&quot;: 2,&#x2F;&#x2F;return throw case后面要不要加空格</span><br><span class="line">&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],&#x2F;&#x2F;一元运算符的前&#x2F;后要不要加空格</span><br><span class="line">&quot;spaced-comment&quot;: 0,&#x2F;&#x2F;注释风格要不要有空格什么的</span><br><span class="line">&quot;strict&quot;: 2,&#x2F;&#x2F;使用严格模式</span><br><span class="line">&quot;use-isnan&quot;: 2,&#x2F;&#x2F;禁止比较时使用NaN，只能用isNaN()</span><br><span class="line">&quot;valid-jsdoc&quot;: 0,&#x2F;&#x2F;jsdoc规则</span><br><span class="line">&quot;valid-typeof&quot;: 2,&#x2F;&#x2F;必须使用合法的typeof的值</span><br><span class="line">&quot;vars-on-top&quot;: 2,&#x2F;&#x2F;var必须放在作用域顶部</span><br><span class="line">&quot;wrap-iife&quot;: [2, &quot;inside&quot;],&#x2F;&#x2F;立即执行函数表达式的小括号风格</span><br><span class="line">&quot;wrap-regex&quot;: 0,&#x2F;&#x2F;正则表达式字面量用小括号包起来</span><br><span class="line">&quot;yoda&quot;: [2, &quot;never&quot;]&#x2F;&#x2F;禁止尤达条件</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>vue-cli</category>
      </categories>
      <tags>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack构建vue项目</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vue-webpack.html</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;安装webpack</span><br><span class="line">npm install webpack@^4 webpack-cli webpack-dev-server -D</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;安装loader</span><br><span class="line">npm i css-loader style-loader -D</span><br><span class="line">npm install -D vue-loader vue-template-compiler</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;babel-loader转换js代码</span><br><span class="line">npm install -D babel-loader @babel&#x2F;core @babel&#x2F;preset-env</span><br><span class="line">npm install @babel&#x2F;plugin-transform-runtime --save-dev</span><br><span class="line">npm install @babel&#x2F;runtime --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;安装插件</span><br><span class="line">&#x2F;&#x2F;mini-css-extract-plugin : 抽离css文件</span><br><span class="line">&#x2F;&#x2F;optimize-css-assets-webpack-plugin : 压缩css代码</span><br><span class="line">&#x2F;&#x2F;clean-webpack-plugin : 清空dist目录</span><br><span class="line">npm install html-webpack-plugin clean-webpack-plugin mini-css-extract-plugin optimize-css-assets-webpack-plugin -D</span><br><span class="line">npm install vue vue-router -S</span><br></pre></td></tr></table></figure>
<p>项目目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--src</span><br><span class="line">  |--components</span><br><span class="line">  |--router</span><br><span class="line">  |--view</span><br><span class="line">  |--App.vue</span><br><span class="line">  |--main.js</span><br><span class="line">  |--index.html</span><br><span class="line">|--package.json</span><br><span class="line">|--webpack.config.js</span><br></pre></td></tr></table></figure>
<p><code>package.json</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-vue&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.base.js&quot;,</span><br><span class="line">    &quot;start&quot;:&quot;webpack-dev-server --config webpack.base.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel&#x2F;core&quot;: &quot;^7.8.4&quot;,</span><br><span class="line">    &quot;@babel&#x2F;plugin-transform-runtime&quot;: &quot;^7.8.3&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-env&quot;: &quot;^7.8.4&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.4.2&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^1.1.3&quot;,</span><br><span class="line">    &quot;vue-loader&quot;: &quot;^15.9.0&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.41.6&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.11&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.10.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel&#x2F;runtime&quot;: &quot;^7.8.4&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.11&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^3.1.6&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>webpack.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCss = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    entry:<span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// filename:isProd?&#x27;[name].[hash:8].js&#x27;:&#x27;./js/[name].js&#x27;</span></span><br><span class="line">        filename:<span class="string">&#x27;js/[name].js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool:<span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:path.join(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        compress:<span class="literal">true</span>,</span><br><span class="line">        open:<span class="literal">true</span>,</span><br><span class="line">        port:<span class="number">8777</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title:<span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">            filename:<span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            template:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            minify:&#123;</span><br><span class="line">                removeAttributeQuotes:<span class="literal">true</span>,</span><br><span class="line">                collapseWhitespace:<span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            hash:<span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;<span class="attr">filename</span>:<span class="string">&#x27;css/main.css&#x27;</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCss(),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,use:[<span class="string">&#x27;vue-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude:<span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use:[&#123;</span><br><span class="line">                    loader:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">                        plugins: [<span class="string">&#x27;@babel/transform-runtime&#x27;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>vue-cli</category>
      </categories>
      <tags>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3学习</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vue3%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>==Vue3中依旧支持vue2中<code>option API</code>==</p>
</blockquote>
<h2 id="使用vite创建一个vue3项目"><a href="#使用vite创建一个vue3项目" class="headerlink" title="使用vite创建一个vue3项目"></a>使用vite创建一个vue3项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h2 id="vue-cli创建vue3项目"><a href="#vue-cli创建vue3项目" class="headerlink" title="vue-cli创建vue3项目"></a>vue-cli创建vue3项目</h2><p>升级Vue-cli4.5</p>
<p>先删除本地的vue-cli，然后再重新安装。</p>
<p><code>npm i -g @vue/cli@next</code></p>
<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul>
<li><code>Composition API</code></li>
<li><code>Teleport</code></li>
<li><code>Fragments</code></li>
<li><code>Emits Component Option</code></li>
<li><code>createRenderer API</code> 用于创建自定义渲染器</li>
</ul>
<h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><p><code>Composition API</code>为<code>vue</code>应用提供更好的逻辑复用和代码组织。</p>
<p><strong>使用感受：</strong>将vue2中的<code>option API</code>(<code>data,methods,computed</code>等<code>options</code>)通过import的方式引入，这就是vue3的<code>Composition API</code></p>
<blockquote>
<p><code>Composition API</code>可以和<code>option API</code>同时使用(<code>Composition API</code>会注入到<code>option API</code>中)</p>
</blockquote>
<h3 id="1-响应式数据reactive和ref"><a href="#1-响应式数据reactive和ref" class="headerlink" title="1.响应式数据reactive和ref"></a>1.响应式数据<code>reactive</code>和<code>ref</code></h3><blockquote>
<p>vue2中的响应式数据是通过defineProperty来实现的。<br>  vue3中响应式数据是通过ES6的proxy来实现的。</p>
</blockquote>
<p>在vue2中，我们创建响应式的数据是通过<code>data</code>函数<code>return</code>一个对象。</p>
<p>在vue3中引入一个<code>reactive</code>函数或<code>ref</code>函数来创建响应式数据。</p>
<ul>
<li><code>reactive</code>监听复杂类型的变化，其参数必须是一个对象(json/array)</li>
<li><code>ref</code>监听某个变量的变化(可以是一个对象、数字、字符等等)</li>
</ul>
<blockquote>
<p>ref注意点：</p>
<ul>
<li>在vue（==template标签内==）中使用ref的值不用通过.value获取,例如在双括号中使用</li>
<li>在js中使用ref的值必须通过.value获取</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.doubleCounter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, onMounted, onUnmounted, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line">      counter:1,</span><br><span class="line"><span class="javascript">      doubleCounter:computed(<span class="function">()=&gt;</span>data.counter*<span class="number">2</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    /* </span><br><span class="line">    ref的本质：</span><br><span class="line">    ref本质还是reactive</span><br><span class="line">    当我们给ref函数传递一个值后，ref函数底层会自动将ref转换成reactive</span><br><span class="line">    ref(xx)  -&gt;   reactive(&#123;value:xx&#125;)</span><br><span class="line">    所以我们在js中想要获取或更改ref的值，需要加上.value</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> msg2 = ref(<span class="string">&quot;some message&quot;</span>);</span></span><br><span class="line"><span class="javascript">    msg2.value = <span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">        data.counter++;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    onUnmounted(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;data,msg2&#125;;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>setup函数是组合API的入口函数</p>
</blockquote>
<p><strong>ref引用DOM元素的用法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line">      counter:1,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个与DOM中ref的value同名的ref对象，传入的数据为null。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> desc = ref(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">    desc.value.textContent = <span class="string">&quot;hello&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;data,desc&#125;;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-1-递归监听"><a href="#1-1-递归监听" class="headerlink" title="1.1 递归监听"></a>1.1 递归监听</h4><p>默认情况下，通过ref和reactive创建的响应式数据都是递归监听的（如果数据存在多层嵌套，reactive会将每层都包装成一个proxy对象），如果数据量比较大，就会非常消耗性能。可以使用shallowRef与shallowReactive</p>
<h4 id="1-2-shallowRef与shallowReactive"><a href="#1-2-shallowRef与shallowReactive" class="headerlink" title="1.2 shallowRef与shallowReactive"></a>1.2 shallowRef与shallowReactive</h4><p>shallowReactive只会把顶层的对象包装成proxy对象</p>
<p>shallowRef只会监听.value的变化（==这是因为Ref的本质就是一个reactive，ref(xx) -&gt; reactive(value:xx)==）</p>
<blockquote>
<p>应用场景：</p>
<ol>
<li>一般情况下只使用ref和reactive即可。</li>
<li>只有在需要监听的数据量比较大的时候，才使用shallowRef或shallowReactive</li>
</ol>
</blockquote>
<blockquote>
<p>shallowReactive创建的数据只会对顶层数据的修改做出响应</p>
</blockquote>
<blockquote>
<p>如果我们修改了shallowRef创建的数据(深层数据),想要界面做出响应，需要使用<code>triggerRef</code>函数</p>
</blockquote>
<h5 id="1-3-triggerRef"><a href="#1-3-triggerRef" class="headerlink" title="1.3 triggerRef"></a>1.3 triggerRef</h5><p>使用方法：在修改了shallowRef的深层数据后，调用triggerRef函数，传入被修改的shallowRef对象;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; shallowRef,triggerRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> test = shallowRef(&#123;</span></span><br><span class="line"><span class="javascript">          father:<span class="string">&quot;bb&quot;</span>,</span></span><br><span class="line">          child:&#123;</span><br><span class="line"><span class="javascript">            name:<span class="string">&quot;hh&quot;</span>,</span></span><br><span class="line">            hobby:&#123;</span><br><span class="line"><span class="javascript">              game:<span class="string">&quot;cs&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        test.value.child.name=<span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line">        triggerRef(test);</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;data,msg2&#125;;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Vue3只提供了triggerRef方法，没有提供triggerReactive方法，所以如果是reactive类型的数据，那么是无法主动触发界面更新的。</p>
</blockquote>
<h4 id="1-4-toRefs"><a href="#1-4-toRefs" class="headerlink" title="1.4 toRefs()"></a>1.4 toRefs()</h4><p>该方法用来将数据转换成一个ref对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  counter:<span class="number">1</span>,</span><br><span class="line">  doubleCounter:computed(<span class="function">()=&gt;</span>data.counter*<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> toRefs(data):</span><br><span class="line"><span class="comment">// 在template标签内可以直接使用counter，doubleCounter，不需要以data.counter的形式了。</span></span><br></pre></td></tr></table></figure>
<h3 id="Telport-传送门"><a href="#Telport-传送门" class="headerlink" title="Telport(传送门)"></a>Telport(传送门)</h3><h3 id="vue3中的方法"><a href="#vue3中的方法" class="headerlink" title="vue3中的方法"></a>vue3中的方法</h3><p>在vue3中如果想定义了点击事件的方法，我们可以直接在setup函数中定义方法，然后return方法名即可。</p>
<h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><h4 id="setup执行时机"><a href="#setup执行时机" class="headerlink" title="setup执行时机"></a>setup执行时机</h4><p><code>setup</code>函数在<code>beforeCreate</code>周期函数和<code>Created</code>周期函数之间执行。</p>
<p><code>beforeCreate</code>:表示组件刚刚被创建出来，组件的data和methods还没有初始化好。</p>
<p><code>Created</code>:表示组件刚刚被创建出来，并且组件的data和methods已经初始化好。</p>
<h4 id="setup注意点"><a href="#setup注意点" class="headerlink" title="setup注意点"></a>setup注意点</h4><ul>
<li>由于在执行setup函数的时候，还没有执行Created生命周期方法，所以在setup函数中，是无法使用data和methods</li>
<li>由于setup函数中不能使用data和methods，所以setup函数中不能使用this(打印this的结果为undefined)</li>
<li>setup函数只能是同步的。</li>
</ul>
<h4 id="setup函数内部可调用的生命周期挂钩"><a href="#setup函数内部可调用的生命周期挂钩" class="headerlink" title="setup函数内部可调用的生命周期挂钩"></a>setup函数内部可调用的生命周期挂钩</h4><ul>
<li><code>onBeforeMount</code>    </li>
<li><code>onMounted</code></li>
<li><code>onBeforeUpdate</code></li>
<li><code>onUpdated</code></li>
<li><code>onBeforeUnmount</code></li>
<li><code>onUnmounted</code></li>
<li><code>onErrorCaptured</code></li>
<li><code>onRenderTracked</code></li>
<li><code>onRenderTriggered</code></li>
</ul>
<p>这些函数在调用的时候接受一个回调，该回调将在组件调用该挂钩的时候执行。</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Toolbox安装与配置</title>
    <url>/%E5%90%8E%E7%AB%AF/docker/Docker%20Toolbox%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<a id="more"></a>

<p>Docker在Windows上使用有两种方式，一是利用VirtualBox建立linux虚拟机，在linux虚拟机中安装docker服务端和客户端，二是利用Windows的Hyper-v虚拟化技术，直接在Windows上安装docker服务端和客户端。WIndows7不支持Hyper-v，所以只能采用Docker<br>Toolbox的方式使用Docker。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/">国内阿里云镜像下载地址</a></p>
<p>1.下载最新版本后双击</p>
<p><img src="http://friendk.cn/docker/docker_install_1.png" alt="1588851194493"></p>
<p>2.下一步</p>
<p><img src="http://friendk.cn/docker/docker_install_2.png" alt="1588852760012"></p>
<blockquote>
<p>注意安装路径不能有中文</p>
</blockquote>
<p><img src="http://friendk.cn/docker/docker_install_3.png" alt="1588851267648"></p>
<blockquote>
<p>选择<code>Full installation</code></p>
</blockquote>
<p>3.下一步</p>
<p><img src="http://friendk.cn/docker/docker_install_4.png" alt="1588851336775"></p>
<p>4.安装完成后会有以下三个图标</p>
<p><img src="http://friendk.cn/docker/docker_install_5.png" alt="1588851476993"></p>
<p>第一个是命令行形式Docker终端<br>第二个是虚拟机<br>第三个是图形化的docker</p>
<h2 id="Docker-Quickstart-Terminal-无法打开"><a href="#Docker-Quickstart-Terminal-无法打开" class="headerlink" title="Docker Quickstart Terminal 无法打开"></a>Docker Quickstart Terminal 无法打开</h2><p><code>Docker Quickstart Terminal</code>双击后出现下面的提示:<br><img src="http://friendk.cn/docker/docker_install_6.png" alt="1588852871491"></p>
<p>解决办法:<br>右键图标查看属性，修改目标处的bash.exe（<strong>需要本地安装有git</strong>）实际路径。<br><img src="http://friendk.cn/docker/docker_install_7.png" alt="1588852056405"></p>
<h2 id="启动docker命令行一直下载最新的boot2docker"><a href="#启动docker命令行一直下载最新的boot2docker" class="headerlink" title="启动docker命令行一直下载最新的boot2docker"></a>启动docker命令行一直下载最新的boot2docker</h2><p><img src="http://friendk.cn/docker/docker_install_8.png" alt="1588853405739"></p>
<blockquote>
<p>这是因为没有找到默认的boot2docker镜像的原因，提示正在下载，但是github的下载速度大家都懂的</p>
</blockquote>
<p>其实<code>DockerToolbox</code>的安装目录中已经有boot2docker了<br><img src="http://friendk.cn/docker/docker_install_9.png" alt="1588853749179"></p>
<p>把它复制到<code>C:\user\administrator\.docker\machine\cache</code>目录下,若此时再次启动docker命令行还是会从<code>github</code>上下载最新的boot2docker,这时我们只需断网就可跳过这个步骤了.</p>
<h2 id="更改虚拟磁盘存储位置"><a href="#更改虚拟磁盘存储位置" class="headerlink" title="更改虚拟磁盘存储位置"></a>更改虚拟磁盘存储位置</h2><p> 虚拟机的默认存储位置是C:\Users\Administrator.docker\machine\machines ，后期docke镜像文件会不断增加，为了给系统盘减负，最好将磁盘移动到其他位置。</p>
<p>1.在命令行中输入<code>docker-machine stop default</code>,停止<code>default</code>虚拟机<br>2.在VirtualBox的 【管理】==》 【虚拟介质管理】中移动虚拟硬盘<br><img src="http://friendk.cn/docker/docker_install_10.png" alt="1588854596467"></p>
<h2 id="更改镜像仓库地址"><a href="#更改镜像仓库地址" class="headerlink" title="更改镜像仓库地址"></a>更改镜像仓库地址</h2><p>docker默认的镜像仓库地址是<a href="https://hub.docker.com/，但国内的下载速度太过缓慢，最好使用国内镜像，比如阿里云。">https://hub.docker.com/，但国内的下载速度太过缓慢，最好使用国内镜像，比如阿里云。</a></p>
<p><img src="http://friendk.cn/docker/docker_install_11.png" alt="1588854847528"></p>
<p>在powershell或cmd中通过 【docker-machine ssh default】命令登录虚拟机（或使用设置好的XShell连接），执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sed -i &quot;s|EXTRA_ARGS&#x3D;&#39;|EXTRA_ARGS&#x3D;&#39;--registry-mirror&#x3D;加速地址 |g&quot; &#x2F;var&#x2F;lib&#x2F;boot2docker&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>然后重启default </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;docker-machine restart &#96;&#96;default&#96;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/%E5%90%8E%E7%AB%AF/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>docker命令参数选项中:<br>“-“开头的 : 参数值跟在参数选项后面(中间要有空格),例如:<code>docker ps -n 5</code><br>“–”开头的 : 参数跟在等号后面,例如:<code>docker run --net=&quot;none&quot; image</code></p>
</blockquote>
<hr>
<h2 id="virtualBox挂载共享文件夹"><a href="#virtualBox挂载共享文件夹" class="headerlink" title="virtualBox挂载共享文件夹"></a>virtualBox挂载共享文件夹</h2><ol>
<li>虚拟机右键设置–&gt; 共享文件夹 –&gt;选择文件夹位置(自动挂载勾上)</li>
<li>连接虚拟机进行挂载(自动挂载貌似不生效) <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;dockerShare</span><br><span class="line">sudo chmod 777 &#x2F;dockerShare</span><br><span class="line">sudo mount -t vboxsf sharefolder（VB上设置的共享文件夹名称）  &#x2F;mysharefolder（虚拟机下的挂载目录）</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="docker-machine管理主机"><a href="#docker-machine管理主机" class="headerlink" title="docker-machine管理主机"></a>docker-machine管理主机</h2><blockquote>
<p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine ls    &#x2F;&#x2F;列出所有可用的主机</span><br><span class="line"></span><br><span class="line">&#x2F;*创建主机test(并配置了镜像加速)*&#x2F;</span><br><span class="line">docker-machine create --engine-registry-mirror&#x3D;https:&#x2F;&#x2F;4j6g8027.mirror.aliyuncs.com -d virtualbox test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看主机的IP地址</span><br><span class="line">docker-machine ip test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动机器</span><br><span class="line">docker-machine start test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;停止机器</span><br><span class="line">docker-machine stop test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;进入机器</span><br><span class="line">docker-machine ssh test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除机器</span><br><span class="line">docker-machine rm test</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><blockquote>
<p>login/logout  登录/登出仓库 <br><br>pull  从仓库中拉取镜像<br><br>push  上传镜像<br><br>search  从仓库中搜索镜像<br></p>
</blockquote>
<hr>
<h4 id="登录-登出仓库"><a href="#登录-登出仓库" class="headerlink" title="登录/登出仓库"></a>登录/登出仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*如果未指定仓库地址,则默认为Docker Hub*&#x2F;</span><br><span class="line">docker login -u 用户名 -p 密码 [仓库地址]</span><br><span class="line">&#x2F;&#x2F;仓库地址:registry.cn-hangzhou.aliyuncs.com(阿里云)</span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><blockquote>
<p>需要先登录仓库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull [OPTIONS] [仓库的网络地址]:TAG</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明：</p>
<ul>
<li>-a :拉取所有 tagged 镜像</li>
<li>–disable-content-trust :忽略镜像的校验,默认开启</li>
</ul>
<hr>
<h4 id="上传镜像至仓库"><a href="#上传镜像至仓库" class="headerlink" title="上传镜像至仓库"></a>上传镜像至仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push [OPTIONS] [仓库的网络地址]:TAG</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明：</p>
<ul>
<li>–disable-content-trust :忽略镜像的校验,默认开启</li>
</ul>
<hr>
<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><blockquote>
<p>从DOcker Hub中查找镜像</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure>
<blockquote>
<p>TERM为要查找的镜像名</p>
</blockquote>
<p>OPTIONS说明：</p>
<ul>
<li>-a :拉取所有 tagged 镜像</li>
<li>–disable-content-trust :忽略镜像的校验,++默认开启++</li>
</ul>
<hr>
<h3 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h3><h4 id="docker-images-列出本地镜像"><a href="#docker-images-列出本地镜像" class="headerlink" title="docker images:列出本地镜像"></a>docker images:列出本地镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images [OPTIONS] [镜像名[:TAG]]</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明：</p>
<ul>
<li>-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li>
<li>–digests :显示镜像的摘要信息；</li>
<li>-f :显示满足条件的镜像；</li>
<li>–format :指定返回值的模板文件；</li>
<li>–no-trunc :显示完整的镜像信息；</li>
<li>-q :只显示镜像ID。</li>
</ul>
<hr>
<h4 id="docker-rmi-删除镜像-一个或多个"><a href="#docker-rmi-删除镜像-一个或多个" class="headerlink" title="docker rmi:删除镜像(一个或多个)"></a>docker rmi:删除镜像(一个或多个)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE1 IMAGE2...</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明：</p>
<ul>
<li>-f :强制删除；</li>
<li>–no-prune :不移除该镜像的过程镜像，默认移除；</li>
</ul>
<hr>
<h4 id="docker-tag-标记本地镜像-将其归入某一仓库"><a href="#docker-tag-标记本地镜像-将其归入某一仓库" class="headerlink" title="docker tag:标记本地镜像,将其归入某一仓库"></a>docker tag:标记本地镜像,将其归入某一仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag [IMAGE:TAG | IMAGEID] [仓库网络地址]:TAG</span><br><span class="line">&#x2F;&#x2F;示例</span><br><span class="line">docker tag [IMAGEID] registry.cn-hangzhou.aliyuncs.com&#x2F;qian_duan&#x2F;development_bsd:[镜像版本号]</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="docker-build-使用Dockerfile创建镜像"><a href="#docker-build-使用Dockerfile创建镜像" class="headerlink" title="docker build:使用Dockerfile创建镜像"></a>docker build:使用Dockerfile创建镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] [PATH | URL]</span><br><span class="line">&#x2F;&#x2F;示例</span><br><span class="line">docker build -t mynode:v1 .    &#x2F;&#x2F; &quot;.&quot;表示当前文件夹</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明(常用的几个)：</p>
<ul>
<li>-m :设置内存最大值；</li>
<li>–file :指定要使用的Dockerfile路径(默认是当前路径下)；</li>
<li>–pull :尝试去更新镜像的新版本；</li>
<li>-q :安静模式，成功后只输出镜像ID；</li>
<li>–rm :默认为true,设置镜像成功后删除临时容器(Dockerfile的每一行指令都会创建一个临时的容器)；</li>
<li>-t: 镜像的名字及tag，通常name:tag或者name格式,例如:<code>-t NAME:TAG</code>；</li>
</ul>
<blockquote>
<p>[PATH | URL]说明:给出命令执行的上下文,上下文可以是构建执行所在的本地路径,也可以是远程URL</p>
</blockquote>
<hr>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="容器生命周期命令"><a href="#容器生命周期命令" class="headerlink" title="容器生命周期命令"></a>容器生命周期命令</h3><hr>
<h4 id="docker-run-创建一个新的容器并执行一个命令"><a href="#docker-run-创建一个新的容器并执行一个命令" class="headerlink" title="docker run:创建一个新的容器并执行一个命令"></a>docker run:创建一个新的容器并执行一个命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND]</span><br><span class="line">&#x2F;&#x2F;[COMMAND] 表示linux命令</span><br><span class="line">&#x2F;&#x2F;比如: &#96;&#x2F;bin&#x2F;bash&#96;,用来解释执行命令</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明(常用的几个)：</p>
<ul>
<li>-d: 后台运行容器，并返回容器ID；</li>
<li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li>
<li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li>–name=”nginx-lb”: 为容器指定一个名称；</li>
<li>–link=[]: 添加链接到另一个容器；</li>
<li>–expose=[]: 开放一个端口或一组端口； </li>
<li>-P : 将所有公开的端口发布到随机端口;</li>
<li>-p : 指定端口或IP进行映射,例如:<code>-p 8080:80</code>;</li>
<li>-v : 给容器挂载存储卷，挂载到容器的某个目录<blockquote>
<p>例如:<code>-v /data:/data</code>,将主机的目录/data映射到容器的/data</p>
</blockquote>
</li>
<li>–net : 容器网络设置,<code>--net=&quot;bridge&quot;</code><blockquote>
<p>bridge 使用docker daemon指定的网桥<br>  host    //容器使用主机的网络<br>  container:NAME_or_ID<br>  none 容器使用自己的网络（类似–net=bridge），但是不进行配置</p>
</blockquote>
</li>
<li>-w(–workdir=””) : 指定容器的工作目录,<code>-w /workspace</code> </li>
</ul>
<hr>
<h4 id="start-stop-restart命令"><a href="#start-stop-restart命令" class="headerlink" title="start/stop/restart命令"></a>start/stop/restart命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start&#x2F;stop&#x2F;restart 容器名字</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="docker-rm-删除一个或少个容器"><a href="#docker-rm-删除一个或少个容器" class="headerlink" title="docker rm : 删除一个或少个容器"></a>docker rm : 删除一个或少个容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明(常用的几个)：</p>
<ul>
<li>-f :通过SIGKILL信号强制删除一个运行中的容器</li>
<li>-l :移除容器间的网络连接，而非容器本身</li>
<li>-v :-v 删除与容器关联的卷</li>
</ul>
<hr>
<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="docker-ps-列出容器"><a href="#docker-ps-列出容器" class="headerlink" title="docker ps : 列出容器"></a>docker ps : 列出容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure>
<p>OPTIONS说明：</p>
<ul>
<li>-a :显示所有的容器，包括未运行的。</li>
<li>-f :根据条件过滤显示的内容。</li>
<li>–format :指定返回值的模板文件。</li>
<li>-l :显示最近创建的容器。</li>
<li>-n :列出最近创建的n个容器。</li>
<li>–no-trunc :不截断输出。</li>
<li>-q :静默模式，只显示容器编号。</li>
<li>-s :显示总的文件大小。</li>
</ul>
<hr>
<h4 id="docker-attach-连接到正在运行中的容器"><a href="#docker-attach-连接到正在运行中的容器" class="headerlink" title="docker attach :连接到正在运行中的容器"></a>docker attach :连接到正在运行中的容器</h4><blockquote>
<p>要连接的容器必须正在运行 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker attach CONTAINER</span><br><span class="line"># Ctrl + D 退出容器(容器会关闭)</span><br><span class="line"></span><br><span class="line">docker exec -it 容器[ID&#x2F;name] &#x2F;bin&#x2F;bash </span><br><span class="line">#exit 退出容器(退出会关闭容器)</span><br><span class="line"># Ctrl + P + Q 正常退出,不关闭容器</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="docker上传镜像到阿里云"><a href="#docker上传镜像到阿里云" class="headerlink" title="docker上传镜像到阿里云"></a>docker上传镜像到阿里云</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;登录阿里云仓库</span><br><span class="line">sudo docker login --username&#x3D;[阿里云账号] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com&#x2F;qian_duan&#x2F;development_bsd:[镜像版本号]</span><br><span class="line">sudo docker push registry.cn-hangzhou.aliyuncs.com&#x2F;qian_duan&#x2F;development_bsd:[镜像版本号]</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/5959832-6f6da734cfba4769.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt=""></p>
<blockquote>
<p>参考资料: <br><br><a href="https://www.runoob.com/docker/docker-machine.html">菜鸟教程</a> <br><br><a href="https://www.w3cschool.cn/docker/docker-command-manual.html">w3cschool</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 -- koa2简介</title>
    <url>/%E5%90%8E%E7%AB%AF/koa2/koa2%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<p><a href="https://www.koajs.com.cn/#introduction"><code>koa</code>中文官网</a></p>
<p><code>koa</code> 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 <code>koa</code>编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。<code>koa</code>不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要想使用<code>koa2</code>,<code>Node.js</code>版本需要高于V7.6。因为node.js 7.6版本开始全面支持<code>async/await</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install koa -S</span><br></pre></td></tr></table></figure>


<h2 id="创建一个koa项目"><a href="#创建一个koa项目" class="headerlink" title="创建一个koa项目"></a>创建一个koa项目</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>文件夹内打开命令行窗口,输入: <code>npm init</code></p>
<h3 id="安装koa"><a href="#安装koa" class="headerlink" title="安装koa"></a>安装koa</h3><p><code>npm install koa -S</code></p>
<h3 id="创建app-js"><a href="#创建app-js" class="headerlink" title="创建app.js:"></a>创建app.js:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">     ctx.body = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行输入<code>node app.js</code>启动服务,在浏览器中输入<code>localhost:2425</code>查看效果</p>
</blockquote>
<p><strong>注意使用<code>koa</code>需要你掌握以下语法：</strong></p>
<ul>
<li><code>Promise</code></li>
<li><code>async和await</code></li>
</ul>
<h2 id="koa应用生成器"><a href="#koa应用生成器" class="headerlink" title="koa应用生成器"></a>koa应用生成器</h2><p>全局安装：<code>npm install koa-generator -g</code><br>创建项目:    <code>koa koa_demo</code><br>安装依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd koa_demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>启动项目:    <code>npm start</code></p>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>koa2</category>
      </categories>
      <tags>
        <tag>koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 -- koa2中间件</title>
    <url>/%E5%90%8E%E7%AB%AF/koa2/%E4%B8%AD%E9%97%B4%E4%BB%B6.html</url>
    <content><![CDATA[<p>中间件是匹配路由之前或者匹配路由完成做的一系列的操作，我们就可以把它叫做中间件。</p>
<p><code>express</code>中间件(Middleware)是一个函数，它可以访问请求对象（request object(req)），响应对象（response object(res)），和web应用中处理请求-响应循环流程中的中间件，一般被命名为next的变量。在koa中中间件和express的优点类似。</p>
<p>中间件的功能包括：</p>
<ul>
<li>执行任何代码。</li>
<li>修改请求和响应对象</li>
<li>终结请求-响应循环</li>
<li>调用堆栈中的下一个中间件</li>
</ul>
<a id="more"></a>

<p>中间件和路由的执行顺序:<br>先执行中间件,匹配到路由后执行路由操作,路由执行完后继续执行中间件</p>
<h2 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h2><p>使用<code>app.use</code>编写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="comment">//应用级中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由,如果不写next,这个路由被匹配到了就不会继续向下匹配</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">app.use(&#x27;/path&#x27;,async (ctx,next)=&gt;&#123;&#125;);</span></span><br><span class="line"><span class="comment">第一个参数不写默认匹配任何路由</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//匹配路由之前打印日期</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">await</span> next();        <span class="comment">//当前路由匹配完成后继续向下匹配</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>


<h2 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="comment">// 路由级中间件</span></span><br><span class="line"><span class="comment">// 匹配到home路由以后继续向下匹配路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;路由级中间件&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;).get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>




<h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> next();    <span class="comment">//继续匹配路由,匹配完成后执行下面的代码</span></span><br><span class="line">    <span class="keyword">if</span>(ctx.status == <span class="number">404</span>)&#123;</span><br><span class="line">        ctx.status = <span class="number">404</span>;</span><br><span class="line">        ctx.body = <span class="string">&quot;这是一个404页面&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;).get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>




<h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><h3 id="koa-bodyparser中间件"><a href="#koa-bodyparser中间件" class="headerlink" title="koa-bodyparser中间件"></a>koa-bodyparser中间件</h3><p>安装: <code>npm install koa-bodyparser -S</code></p>
<p>引入中间件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line">app.use(bodyParser());</span><br></pre></td></tr></table></figure>
<p>使用中间件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/doPost&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">	ctx.body = ctx.request.body; <span class="comment">//获取表单提交的数据</span></span><br><span class="line">&#125;);</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<h3 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h3><p><code>koa-static</code>静态资源中间件用来处理静态资源的请求,例如js文件,图片,css文件等等。</p>
<p>安装: <code>npm install koa-static -S</code><br>引入和配置中间件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="comment">//http:localhost:2425/css/basic.css</span></span><br><span class="line"><span class="comment">//访问上面的地址会先去static目录找,如果能找到对应的文件,就返回,找不到就next()</span></span><br><span class="line">app.use(<span class="keyword">static</span>(<span class="string">&#x27;static&#x27;</span>));   <span class="comment">//可以配置多个</span></span><br><span class="line">app.use(<span class="keyword">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<p>其他的引入方法见:<a href="https://www.npmjs.com/package/koa-static">官网</a></p>
<h3 id="跨域访问中间件"><a href="#跨域访问中间件" class="headerlink" title="跨域访问中间件"></a>跨域访问中间件</h3><p>安装：<code>npm install koa2-cors -S</code></p>
<p>引入和配置中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa2-cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端学习</category>
        <category>koa2</category>
      </categories>
      <tags>
        <tag>koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 -- koa2路由</title>
    <url>/%E5%90%8E%E7%AB%AF/koa2/%E8%B7%AF%E7%94%B1.html</url>
    <content><![CDATA[<p>路由（Routing）是一个URI（或者叫做路径）和一个特定的HTTP方法（GET、POST等）组成，涉及应用如何响应客户端对某个网站节点的访问。</p>
<p>通俗的讲：路由就是根据不同的URL地址，加载不同的页面实现不同的功能。</p>
<p>Koa中的路由需要安装对应的<code>koa-router</code>路由模块来实现。<a href="https://www.npmjs.com/package/koa-router">npm官网</a></p>
<p><strong>注意:</strong>路由的异步回调函数中如果调用了异步函数一定使用await,否则可能会得不到你想要的值<br>这是因为当调用了异步函数之后,接下来的代码还是会继续执行的,所以会出现还没有拿到异步函数的返回值,路由的异步回调就已经结束了。</p>
<a id="more"></a>

<h2 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install koa-router -S</span><br></pre></td></tr></table></figure>
<p><strong>引入</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)(); <span class="comment">//引入并实例化</span></span><br></pre></td></tr></table></figure>
<h2 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">ctx是上下文context,包含了request和response等信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> 异步</span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;).get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); <span class="comment">/* 作用: 这是官方文档的推荐用法,router.allowedMethods()用在路由配置router.routes()之后</span></span><br><span class="line"><span class="comment">    ,所以在当所有路由中间件调用完后,此时根据ctx.status设置response响应头*/</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最新版本访问上下文context对象是通过传参形式的,但是旧版本是直接在回调函数内部使用this访问的(所以旧版本不能使用箭头函数)</p>
</blockquote>
<p>关于上下文对象context可以查看<a href="https://www.koajs.com.cn/#context">官网</a></p>
<h2 id="koa-router配置"><a href="#koa-router配置" class="headerlink" title="koa-router配置"></a>koa-router配置</h2><h3 id="设置路由前缀"><a href="#设置路由前缀" class="headerlink" title="设置路由前缀"></a>设置路由前缀</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    prefix: <span class="string">&#x27;/users&#x27;</span>           <span class="comment">//设置路由前缀为/users, </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用下面方式设置</span></span><br><span class="line">router.prefix(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line"><span class="comment">//访问路径为/users/add</span></span><br><span class="line">router.get(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br></pre></td></tr></table></figure>
<h3 id="使用给定中间件-router-use"><a href="#使用给定中间件-router-use" class="headerlink" title="使用给定中间件:router.use()"></a>使用给定中间件:router.use()</h3><p>使用<code>router.use([path],middleware)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// session middleware will run before authorize</span></span><br><span class="line">router</span><br><span class="line">  .use(session())</span><br><span class="line">  .use(authorize());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//特定路由使用中间件</span></span><br><span class="line">router.use(<span class="string">&#x27;/users&#x27;</span>, userAuth());</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 多个路由使用中间件</span></span><br><span class="line">router.use([<span class="string">&#x27;/users&#x27;</span>, <span class="string">&#x27;/admin&#x27;</span>], userAuth());</span><br><span class="line"> </span><br><span class="line">app.use(router.routes());</span><br></pre></td></tr></table></figure>
<h3 id="命名路由-router-url"><a href="#命名路由-router-url" class="headerlink" title="命名路由:router.url()"></a>命名路由:router.url()</h3><p>使用<code>router.url(name,params,[options],[options.query])</code>可以很方便的命名一个路由。<br>参数:</p>
<ul>
<li>name: 命名路由名字</li>
<li>params:网址参数,即动态路由参数</li>
<li>options: 选项参数</li>
<li>options.query: 查询选项</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;/users/:id&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">router.url(<span class="string">&#x27;user&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3&quot;</span></span><br><span class="line"> </span><br><span class="line">router.url(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3&quot;</span></span><br><span class="line"> </span><br><span class="line">router.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// redirect to named route</span></span><br><span class="line">  ctx.redirect(ctx.router.url(<span class="string">&#x27;sign-in&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">router.url(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">query</span>: &#123; <span class="attr">limit</span>: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3?limit=1&quot;</span></span><br><span class="line"> </span><br><span class="line">router.url(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">query</span>: <span class="string">&quot;limit=1&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3?limit=1&quot;</span></span><br></pre></td></tr></table></figure>




<h2 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a>路由传值</h2><h3 id="get路由传值"><a href="#get路由传值" class="headerlink" title="get路由传值"></a>get路由传值</h3><p>在koa2中GET传值通过<code>request</code>接收的方法有两种：<code>query</code>和<code>querystring</code><br><code>query</code>:返回的是格式化好的参数对象<br><code>querystring</code>:返回的是请求字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// http:localhost:2425/news?id=1</span></span><br><span class="line">router.get(<span class="string">&#x27;/news&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> request = ctx.request;   <span class="comment">//获取koa的request请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接从上下文对象中获取</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query);  <span class="comment">//获取请求参数, 值为一个对象,&#123;id:1&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.querystring);  <span class="comment">//获取请求参数, 值为一个字符串,id=1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从request中获取</span></span><br><span class="line">    <span class="built_in">console</span>.log(request.query);  <span class="comment">//获取请求参数, 值为一个对象,&#123;id:1&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(request.querystring);  <span class="comment">//获取请求参数, 值为一个字符串,id=1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面两种获取的方式是等价的</span></span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<h3 id="post路由传值"><a href="#post路由传值" class="headerlink" title="post路由传值"></a>post路由传值</h3><p>需要安装koa-bodyparser中间件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install  koa-bodyparser -S</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/doPost&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">	ctx.body = ctx.request.body; <span class="comment">//获取表单提交的数据</span></span><br><span class="line">&#125;);</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>


<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由里面可以传入多个值:例如 /news/:id1/:id2/:id3....</span></span><br><span class="line"><span class="comment">// http:localhost:2425/news/food/apple</span></span><br><span class="line">router.get(<span class="string">&#x27;/news:aid/:cid&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取动态路由的传值</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params); <span class="comment">// &#123;aid:&#x27;food&#x27;,cid:&#x27;apple&#x27;&#125;</span></span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<h2 id="设置和获取cookie"><a href="#设置和获取cookie" class="headerlink" title="设置和获取cookie"></a>设置和获取cookie</h2><p>使用上下文<code>context</code>对象来设置和获取cookie</p>
<h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><p><code>ctx.cookies.get(name, [options])</code><br>获得 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数：</p>
<ul>
<li><code>signed</code> 如果为 true，表示请求时 cookie 需要进行签名。</li>
</ul>
<h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><p><code>ctx.cookies.set(name, value, [options])</code><br>设置 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数：</p>
<ul>
<li><code>maxAge</code> 一个数字，表示 Date.now()到期的毫秒数</li>
<li><code>signed</code> 是否要做签名</li>
<li><code>expires</code> cookie有效期</li>
<li><code>path</code>cookie 的路径，默认为 <code>/&#39;</code></li>
<li><code>domain</code> cookie 的域</li>
<li><code>secure</code> false 表示 cookie 通过 HTTP 协议发送，true 表示 cookie 通过 HTTPS 发送。</li>
<li><code>httpOnly</code> true 表示 cookie 只能通过 HTTP 协议发送</li>
<li><code>overwrite</code> 一个布尔值，表示是否覆盖以前设置的同名的Cookie（默认为false）。 如果为true，在设置此cookie时，将在同一请求中使用相同名称（不管路径或域）设置的所有Cookie将从Set-Cookie头部中过滤掉。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    <span class="comment">//设置cookie</span></span><br><span class="line">    ctx.cookies.set(<span class="string">&#x27;userinfo&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,&#123;</span><br><span class="line">        maxAge:<span class="number">60</span>*<span class="number">1000</span>*<span class="number">60</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;).get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="comment">//读取cookie</span></span><br><span class="line">    ctx.cookies.get(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<h2 id="session的使用"><a href="#session的使用" class="headerlink" title="session的使用"></a>session的使用</h2><p>在koa中使用session可以安装<code>koa-session</code></p>
<p><code>koa-session的:</code><a href="https://www.npmjs.com/package/koa-session">npm地址</a></p>
<p>安装:    <code>npm install koa-session -S</code><br>引入:    <code>const session = require(&#39;koa-session&#39;);</code><br>设置中间件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"> </span><br><span class="line">app.keys = [<span class="string">&#x27;some secret hurr&#x27;</span>];  <span class="comment">//cookie的签名</span></span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">  key: <span class="string">&#x27;koa:sess&#x27;</span>, <span class="comment">//默认  </span></span><br><span class="line">  maxAge: <span class="number">86400000</span>, <span class="comment">//cookie的过期时间</span></span><br><span class="line">  autoCommit: <span class="literal">true</span>, </span><br><span class="line">  overwrite: <span class="literal">true</span>, <span class="comment">//没有效果,默认</span></span><br><span class="line">  httpOnly: <span class="literal">true</span>,<span class="comment">//true表示只有服务器端可以获取cookie</span></span><br><span class="line">  signed: <span class="literal">true</span>, <span class="comment">//签名   默认即可</span></span><br><span class="line">  rolling: <span class="literal">false</span>, <span class="comment">//在每次请求时强制设置cookie,这将重置cookie过期时间(默认:false)</span></span><br><span class="line">  renew: <span class="literal">true</span>,  <span class="comment">//当session快过期的时候重新设置</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">app.use(session(CONFIG, app));</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/home&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置session</span></span><br><span class="line">    ctx.session.userinfo = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    ctx.body = <span class="string">&#x27;首页&#x27;</span>;</span><br><span class="line">&#125;).get(<span class="string">&#x27;/news&#x27;</span>,<span class="function"><span class="keyword">function</span>* (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//读取session</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.session.userinfo);</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻页&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods()); </span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>koa2</category>
      </categories>
      <tags>
        <tag>koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 -- 路由模块化</title>
    <url>/%E5%90%8E%E7%AB%AF/koa2/%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97%E5%8C%96.html</url>
    <content><![CDATA[<p>参考koa应用生成器创建的项目，对路由进行模块化。</p>
<a id="more"></a>

<p>目录结构:</p>
<blockquote>
<p>koa_demo<br>—- routes        路由文件<br>      —- news<br>            —- navBar.js<br>      —- users<br>            —- login.js<br>—- views         模板文件<br>—- module       模块<br>—- static           静态资源文件<br>—- app.js</p>
</blockquote>
<p>app.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> login = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users/login.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> news = <span class="built_in">require</span>(<span class="string">&#x27;./routes/news/navBar.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(news.routes(),news.allowedMethods())</span><br><span class="line">app.use(login.routes(),login.allowedMethods())</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">2425</span>);</span><br></pre></td></tr></table></figure>
<p>navBar.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.prefix(<span class="string">&#x27;/new&#x27;</span>);   <span class="comment">//路由前缀</span></span><br><span class="line">router.get(<span class="string">&#x27;/img&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;   </span><br><span class="line">    ctx.body = <span class="string">&#x27;轮播图页面&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">modules.export = router;</span><br></pre></td></tr></table></figure>
<p>login.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.prefix(<span class="string">&#x27;/user&#x27;</span>);   <span class="comment">//路由前缀</span></span><br><span class="line">router.get(<span class="string">&#x27;/loginout&#x27;</span>,<span class="keyword">async</span> (ctx) =&gt;&#123;   </span><br><span class="line">    ctx.body = <span class="string">&#x27;退出登录页面&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>koa2</category>
      </categories>
      <tags>
        <tag>koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware网络配置</title>
    <url>/%E5%90%8E%E7%AB%AF/linux/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E7%BD%91%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>虚拟机为centos7.0<br><br>vmware版本为14.0 pro</p>
</blockquote>
<h2 id="1-nat模式下，centos7的配置静态ip"><a href="#1-nat模式下，centos7的配置静态ip" class="headerlink" title="1.nat模式下，centos7的配置静态ip"></a>1.nat模式下，centos7的配置静态ip</h2><blockquote>
<p>该配置下，不用担心主机网络变化而频繁的修改ip了</p>
</blockquote>
<p><a href="https://www.cnblogs.com/jsonhc/p/7685393.html">参考配置地址</a></p>
<h2 id="2-桥接模式下，centos7的配置"><a href="#2-桥接模式下，centos7的配置" class="headerlink" title="2.桥接模式下，centos7的配置"></a>2.桥接模式下，centos7的配置</h2><h3 id="2-1-VMware中设置虚拟机的网络连接为桥接模式"><a href="#2-1-VMware中设置虚拟机的网络连接为桥接模式" class="headerlink" title="2.1 VMware中设置虚拟机的网络连接为桥接模式"></a>2.1 VMware中设置虚拟机的网络连接为桥接模式</h3><h3 id="2-2-编辑centos7的网卡配置文件"><a href="#2-2-编辑centos7的网卡配置文件" class="headerlink" title="2.2 编辑centos7的网卡配置文件"></a>2.2 编辑centos7的网卡配置文件</h3><p><code>vi /etc/sysconfig/network-scripts/ifcfg-ens*</code> （*根据实际情况不同，本文为ens33）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">#BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=9292e80c-cf5d-4e45-a905-bc07a86bfb3d</span><br><span class="line">DEVICE=ens33</span><br><span class="line"></span><br><span class="line"># 开机激活网卡</span><br><span class="line">ONBOOT=yes</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.3.70</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"># 与主机相同</span><br><span class="line">GATEWAY=192.168.3.1</span><br><span class="line"># 与主机相同</span><br><span class="line">DNS1=192.168.3.1</span><br><span class="line">PREFIX=24</span><br></pre></td></tr></table></figure>
<h3 id="2-3-配置域名服务器（DNS）"><a href="#2-3-配置域名服务器（DNS）" class="headerlink" title="2.3 配置域名服务器（DNS）"></a>2.3 配置域名服务器（DNS）</h3><p><code>vi /etc/resolv.conf</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Generated by NetworkManager</span><br><span class="line"># 与主机相同</span><br><span class="line">nameserver 192.168.3.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端学习</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7环境配置</title>
    <url>/%E5%90%8E%E7%AB%AF/linux/centos7.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="centos7环境配置"><a href="#centos7环境配置" class="headerlink" title="centos7环境配置"></a>centos7环境配置</h1><h2 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h2><ol>
<li>查看javabanben<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
<li>删除openjdk<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 抓取名称中包含“java”的程序，展示列表</span><br><span class="line">rpm -qa|grep java</span><br><span class="line"></span><br><span class="line"># 使用命令依次删除所有名中包含“openjdk”的程序</span><br><span class="line">rpm -e --nodeps xx（xx代表open-jdk完整名字，从列表中复制而来）</span><br></pre></td></tr></table></figure></li>
<li>解压jdk<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 切换到jdk所在目录（soft是自己创建的软件安装目录）</span><br><span class="line">cd &#x2F;usr&#x2F;soft</span><br><span class="line">tar -zxvf jdk （输完jdk后按键盘上的Tab，linux会自动补全完整名称）</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br><span class="line">#java environment</span><br><span class="line"># 注意修改为自己下载的jdk版本</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;soft&#x2F;jdk1.8.0_211</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">export PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin</span><br></pre></td></tr></table></figure></li>
<li>更新源文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后使用<code>java -version</code> 查看是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 出现类似以下信息即为成功</span><br><span class="line">java version &quot;1.8.0_211&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h2 id="yum不能使用的问题"><a href="#yum不能使用的问题" class="headerlink" title="yum不能使用的问题"></a>yum不能使用的问题</h2><p>命令行报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">One of the configured repositories failed (Unknown),</span><br><span class="line"> and yum doesn&#39;t have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="line"> ....</span><br></pre></td></tr></table></figure>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li>设置网卡开机自启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts</span><br><span class="line">2.vi ifcfg-ens33</span><br><span class="line">3.将ONBOOT的值设置为“yes”，保存退出</span><br><span class="line">4.重启网卡：service network restart</span><br></pre></td></tr></table></figure></li>
<li>设置国内dns服务器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.输入命令“vi &#x2F;etc&#x2F;resolv.conf”</span><br><span class="line">2.添加 “nameserver 114.114.114.114”</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="修改yum源地址"><a href="#修改yum源地址" class="headerlink" title="修改yum源地址"></a>修改yum源地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#备份CentOS-Base.repo</span><br><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo_bak</span><br><span class="line"></span><br><span class="line"># 将官方的源换成阿里的源</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line"></span><br><span class="line">#EPEL国内源</span><br><span class="line"># 安装EPEL源</span><br><span class="line">yum install epel-release -y</span><br><span class="line"></span><br><span class="line">#更换阿里的EPEL源</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line"></span><br><span class="line">#生成yum缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"># 更新系统</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="centos7相关命令"><a href="#centos7相关命令" class="headerlink" title="centos7相关命令"></a>centos7相关命令</h1><h2 id="centos后台运行jar包"><a href="#centos后台运行jar包" class="headerlink" title="centos后台运行jar包"></a>centos后台运行jar包</h2><ol>
<li><p>java -jar *.jar</p>
<blockquote>
<p>特点：当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口，程序退出</p>
</blockquote>
</li>
<li><p>java -jar *.jar &amp;</p>
<blockquote>
<p>&amp;代表在后台运行。<br>特定：当前ssh窗口不被锁定，但是当窗口关闭时，程序中止运行。</p>
</blockquote>
</li>
<li><p>nohup java -jar *.jar &amp;</p>
<blockquote>
<p>nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</p>
</blockquote>
</li>
</ol>
<h3 id="结束后台任务"><a href="#结束后台任务" class="headerlink" title="结束后台任务"></a>结束后台任务</h3><blockquote>
<p>通过ps aux命令查看进程号PID，然后执行  kill -9 PID</p>
</blockquote>
<h2 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a>防火墙相关命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看防火墙的状态</span><br><span class="line">firewall-cmd --state；</span><br><span class="line"></span><br><span class="line"># 重启防火墙(修改配置后要重启防火墙)</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"># 查询端口是否开放</span><br><span class="line">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class="line"></span><br><span class="line"># 查询有哪些端口是开启的</span><br><span class="line">firewall-cmd --list-port</span><br><span class="line"></span><br><span class="line"># 添加端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --permanent --add-port&#x3D;8010&#x2F;tcp</span><br><span class="line"># 参数介绍</span><br><span class="line"># 1.firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line"># 2、--permanent：表示设置为持久；</span><br><span class="line"># 3、--add-port：标识添加的端口；</span><br><span class="line"># 4. --zone ： 表示作用域（public和dmz两个值，设置为dmz的话，会在dmz.xml文件中新增一条。）</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"># 开机禁用防火墙自启命令</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line"># 防火墙随系统开启启动</span><br><span class="line">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure>
<h2 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h2><p><a href="https://www.linuxidc.com/Linux/2019-08/160362.htm">参考文章</a></p>
<h3 id="1-查看进程-ps命令"><a href="#1-查看进程-ps命令" class="headerlink" title="1.查看进程, ps命令"></a>1.查看进程, <code>ps</code>命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看所有进程</span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"># 查看指定的进程</span><br><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数：<br><br>a ： 显示当前终端下的所有进程信息，包括其他用户的进程<br><br>u ：以用户为主的进程状态<br><br>x ：通常与 a 这个参数一起使用，显示当前用户在所有终端下的进程信息<br><br>-e：显示系统内所有的进程信息<br><br>-l ：使用长格式显示进程信息<br><br>-f ：使用完整的格式显示进程信息</p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令(持续更新)</title>
    <url>/%E5%90%8E%E7%AB%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i &#x2F;&#x2F;输入root密码进入到root用户</span><br><span class="line"></span><br><span class="line">&#x2F;*通过su切换到root用户*&#x2F;</span><br><span class="line">sudo passwd root   &#x2F;&#x2F;1.设置root密码</span><br><span class="line">su        &#x2F;&#x2F;2.通过su切换,输入root密码后切换</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB入门 -- MongoDB简介</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MangoDB%E5%85%A5%E9%97%A8/1%E3%80%81MongoDB%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<p><code>MongoDB</code>是为快速开发互联网应用而设计的数据库系统，是一种非关系型数据库（<code>NoSQL</code>）<br><code>MongoDB</code>的设计目标是极简、灵活、作为Web应用栈的一部分。<br><code>MongoDB</code>的数据模型是面向文档的，所谓文档是一种类似于<code>JSON</code>的结构，简单理解<code>MongoDB</code>这个数据库中存的是各种各样的<code>JSON</code>（其实是<code>JSON</code>的增强型<code>BSON</code>）</p>
<a id="more"></a>

<h2 id="下载MongoDB"><a href="#下载MongoDB" class="headerlink" title="下载MongoDB"></a>下载MongoDB</h2><p>MongoDB的版本偶数版本为稳定版，奇数版本为开发版。<br>MongoDB对于32位系统支持不佳，所以3.2以后没有再对32位系统的支持。</p>
<h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><p><a href="https://www.mongodb.com/download-center/community">官网地址</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>复制<code>MongoDB</code>安装目录下bin文件的路径<br>然后 <strong>右键我的电脑</strong> —&gt; 属性 —&gt; 高级系统设置 —&gt; 环境变量 —&gt; 选中用户环境变量中的path变量,点击编辑   —&gt; 点击新建  —&gt;将上述路径复制进去确定即可。</p>
<p><strong>检查配置是否成功：</strong><br>打开命令行窗口,输入 <code>mongod</code></p>
<blockquote>
<p>该命令是用来启动MongoDB服务的。</p>
</blockquote>
<h3 id="修改数据库目录"><a href="#修改数据库目录" class="headerlink" title="修改数据库目录"></a>修改数据库目录</h3><p>MongoDB的默认数据库目录为：<code>c:\data\db</code></p>
<p>在使用<code>mongod</code>命令启动服务前需要在创建上述目录。否则会启动失败。</p>
<p>使用<code>mongod -dbpath 盘符:路径\data\db</code> 来启动服务</p>
<h3 id="连接MongoDB服务"><a href="#连接MongoDB服务" class="headerlink" title="连接MongoDB服务"></a>连接MongoDB服务</h3><p>打开命令行窗口,使用 <code>mongo</code>命令连接</p>
<h2 id="设置MongoDB为系统服务"><a href="#设置MongoDB为系统服务" class="headerlink" title="设置MongoDB为系统服务"></a>设置MongoDB为系统服务</h2><p>将MongoDB设置成开机自启动</p>
<h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>在MongoDB安装目录下添加 <code>mongod.cfg</code>配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">	destination:file</span><br><span class="line">	path:E:\MongoDB\log\mongod.log</span><br><span class="line">storage:</span><br><span class="line">	dbpath:E:\MongoDB\data\db</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>systemLog</code>设置日志输出位置, <code>storage</code>设置数据库目录</p>
</blockquote>
<p>以管理员身份运行命令行窗口,输入以下命令:</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">sc.exe create MongoDB binPath= &quot;\&quot;E:\MongoDB\bin\mongod.exe\&quot; --service --config=\&quot;E:\MongoDB\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; <span class="built_in">start</span>= &quot;auto&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要根据自己的实际情况进行修改</p>
</blockquote>
<p>执行成功后会有 “成功” 的提示。但是<code>MongoDB</code>服务的首次启动需要手动进行。</p>
<p>以window10为例：任务栏右键 —&gt;  任务管理器  —&gt; 服务 —&gt; 打开服务 —&gt; 找到<code>MongoDB</code>服务,右键启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">  user: &#39;admin&#39;,</span><br><span class="line">  pwd: &#39;123456&#39;,</span><br><span class="line">  roles:[&#123;</span><br><span class="line">    role: &#39;root&#39;,</span><br><span class="line">    db: &#39;admin&#39;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<h2 id="安装图形化工具"><a href="#安装图形化工具" class="headerlink" title="安装图形化工具"></a>安装图形化工具</h2><p>官方工具:<a href="https://www.mongodb.com/download-center/compass?jmp=docs">MongoDB Compass</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB入门</category>
      </categories>
      <tags>
        <tag>MongoDB入门</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB入门 -- MongoDB基本操作</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MangoDB%E5%85%A5%E9%97%A8/2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<p>三个概念:</p>
<ul>
<li>数据库（database）<br>数据库是一个仓库,在仓库中可以存放集合。</li>
<li>集合（collection）<br>集合类似于数组，在集合中可以存放文档。</li>
<li>文档（document）<br>文档数据库中的最小单位，我们存储和操作的内容都是文档。</li>
</ul>
<blockquote>
<p>数据库和集合都不需要手动创建,当我们创建文档时,如果文档所在的集合或数据库不存在就会自动创建数据库和集合</p>
</blockquote>
<a id="more"></a>

<p><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1577349528970.png" alt="1577349528970"></p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p> <strong>查询所有数据库：</strong><code>show dbs</code>或<code>show database</code></p>
<p><strong>进入数据库：</strong><code>use 数据库名</code><br><em>注意：</em><code>use</code>的数据库可以是不存在的，因为当我们在这个数据库中创建文档时，MongoDB会自动创建它</p>
<p><strong>查看当前所在数据库：</strong>使用 <code>db</code>命令</p>
<p><strong>显示数据库中所有的集合：</strong><code>show collections</code></p>
<p><strong>清空集合：</strong><code>db.&lt;collection&gt;.drop()</code><br><em>注意:</em>如果数据库中的集合都清空了,那么数据库也就不存在了</p>
<h2 id="数据库的CRUD-增删改查-的操作"><a href="#数据库的CRUD-增删改查-的操作" class="headerlink" title="数据库的CRUD(增删改查)的操作"></a>数据库的CRUD(增删改查)的操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>向集合中插入文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.insert(doc)    &#x2F;&#x2F;插入一个或多个文档</span><br><span class="line">db.&lt;collection&gt;.insertOne(doc)    &#x2F;&#x2F;只能插入一个文档</span><br><span class="line">db.&lt;collection&gt;.insertMany(doc)    &#x2F;&#x2F;只能插入多个文档,数组形式</span><br></pre></td></tr></table></figure>
<blockquote>
<p><collection>表示集合名</p>
</blockquote>
<p>例子: 向test数据库中的<code>stus</code>集合中插入一个新的学生对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stus.insert(&#123;name:&#39;孙悟空&#39;,age18,gender:&#39;男&#39;&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的例子会在test数据库中新建一个名为<code>stus</code>的集合,然后在该集合中插入文档(即一个学生对象)</p>
</blockquote>
<p>插入多条数据,直接传入一个数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stus.insert([&#123;name:&#39;孙悟空&#39;,age18,gender:&#39;男&#39;&#125;,&#123;..&#125;)</span><br></pre></td></tr></table></figure>
<p>当我们向集合中插入文档时，如果没有给文档指定<code>_id</code>属性，则数据库会自动给文档添加 <code>_id</code>，该属性用来作为文档的唯一标识。</p>
<p><code>_id</code>属性我们可以自己指定，如果我们指定了数据库就不会再添加了，如果自己指定<code>_id</code>也必须确保它的唯一性。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>查询当前集合中的所有的文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.find()</span><br><span class="line"></span><br><span class="line">db.&lt;collection&gt;.findOne()     </span><br><span class="line">&#x2F;&#x2F;用来查询集合中符合条件的第一个文档</span><br><span class="line">&#x2F;&#x2F;findOne()返回的是一个对象</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>find()</code>可以接收一个对象作为参数<br><code>find(&#123;&#125;)</code>表示查询集合中所有的文档。<br><code>find(&#123;key:value&#125;)</code>表示查询属性是指定值的文档。</p>
</blockquote>
<p><code>find()</code>返回的是一个数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.find(&#123;&#125;)[0]     &#x2F;&#x2F;表示返回第一个文档</span><br><span class="line">db.&lt;collection&gt;.find(&#123;&#125;).count()   &#x2F;&#x2F;表示文档的数量</span><br></pre></td></tr></table></figure>


<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>修改文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.update(查询条件,新对象,&#123;配置选项(可选)&#125;)</span><br><span class="line">&#x2F;&#x2F;默认情况下如果查询到多个文档,只会修改一个文档,但是我们可以修改配置选项:</span><br><span class="line">配置选项:&#123;</span><br><span class="line">	upsert:&lt;boolean&gt;,</span><br><span class="line">	multi:&lt;boolean&gt;,     &#x2F;&#x2F;是否一次修改多个</span><br><span class="line">	writeConcern:&lt;document&gt;,</span><br><span class="line">	collation:&lt;document&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.&lt;collection&gt;.updateMany(查询条件,新对象)</span><br><span class="line">&#x2F;&#x2F;同时修改多个符合条件的文档</span><br><span class="line"></span><br><span class="line">db.&lt;collection&gt;.updateOne(查询条件,新对象)</span><br><span class="line">&#x2F;&#x2F;修改一个符合条件的文档</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>update()</code>默认情况下会使用新对象来替换旧的对象<br>如果需要修改指定的属性，而不是替换需要使用”修改操作符“来完成：<br>    <code>$set</code>    可以用来修改文档中的指定属性<br>    <code>$unset</code>    可以用来删除文档的指定属性</p>
</blockquote>
<p>修改操作符的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stus.update(&#123;_id:12&#125;,&#123;</span><br><span class="line">	$set(&#123;name:&#39;悟净&#39;,age:&#39;?&#39;&#125;),</span><br><span class="line">	$unset(&#123;address:&#39;?&#39;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的例子中: <code>$set</code>指定只修改<code>name</code>和<code>age</code>属性的值<br><code>$unset</code>指定删除<code>address</code>属性(<strong>注意属性值可以随意</strong>)</p>
</blockquote>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.remove(条件,&lt;justOne&gt;)</span><br><span class="line">&#x2F;&#x2F;可以根据条件来删除文档,传递条件的方式和find()一样</span><br><span class="line">&#x2F;&#x2F;删除符合条件的所有的文档,默认情况下会删除多个</span><br><span class="line">&#x2F;&#x2F;如果只想删除一个,第二个参数&lt;justOne&gt;可以传一个true</span><br><span class="line"></span><br><span class="line">db.&lt;collection&gt;.deleteOne(条件)     &#x2F;&#x2F;删除一个文档</span><br><span class="line">db.&lt;collection&gt;.deleteMany(条件)    &#x2F;&#x2F;删除多个文档</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong><code>remove()</code>方法如果传一个空对象会删除所有文档</p>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h3><p> 它表示的是模糊搜索的条件</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB入门</category>
      </categories>
      <tags>
        <tag>MongoDB入门</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB入门 -- sort和投影</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MangoDB%E5%85%A5%E9%97%A8/3%E3%80%81sort%E5%92%8C%E6%8A%95%E5%BD%B1.html</url>
    <content><![CDATA[<p>sort用来指定文档的排序的规则,需要传递一个对象指定排序规则<br>投影可以在查询时设置你想要显示的属性列</p>
<a id="more"></a>



<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>查询文档时，默认情况是按照<code>_id</code>的值进行排列(升序)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.emp.find(&#123;&#125;).sort(&#123;<span class="attr">sal</span>:<span class="number">1</span>,<span class="attr">empno</span>:-<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">//1 表示升序   -1 表示降序</span></span><br><span class="line"><span class="comment">//sal和empno都是文档中的属性</span></span><br><span class="line"><span class="comment">//上面表示先按照sal排序,如果遇到相同的,再按照empno排序</span></span><br></pre></td></tr></table></figure>
<h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><p>在查询时，可以在第二个参数的位置来设置查询结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.emp.find(&#123;&#125;,&#123;ename:1&#125;);        &#x2F;&#x2F;指定了ename属性列显示</span><br><span class="line">&#x2F;&#x2F;1 为显示,  0位不显示(注意_id属性默认是显示的)</span><br><span class="line">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB入门</category>
      </categories>
      <tags>
        <tag>MongoDB入门</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB入门 -- MongoDB基本操作</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MangoDB%E5%85%A5%E9%97%A8/4%E3%80%81Mongoose.html</url>
    <content><![CDATA[<p>Mongoose是一个让我们可以通过Node来操作MongoDB的模块。<br>Mongoose是一个对象文档模型（ODM）库，它对Node原生的MongoDB模块进行了进一步的优化封装，并提供了更多的功能。<br>在大多数情况下，它被用来把结构化的模式应用到一个MongoDB集合，并提供了验证和类型转换等好处。</p>
<a id="more"></a>

<h2 id="安装Mongoose"><a href="#安装Mongoose" class="headerlink" title="安装Mongoose"></a>安装Mongoose</h2><p><a href="http://www.mongoosejs.net/docs/index.html">官方文档</a></p>
<p>Mongoose并非<code>Nodejs</code>自带的模块,需要我们自行下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mongoose -S</span><br></pre></td></tr></table></figure>
<p>Mongoose的好处:</p>
<ul>
<li>可以为文档创建一个模式结构（Schema）</li>
<li>可以对模型中的对象/文档进行验证。</li>
<li>数据可以通过类型转换转换为对象模型</li>
<li>可以使用中间件来应用业务逻辑挂钩</li>
<li>比Node原生的MongoDB驱动更容易</li>
</ul>
<p><code>Mongoose</code>中为我们提供了几个新的对象:</p>
<ul>
<li>Schema(模式对象)<br>该对象定义约束了数据库中的文档结构</li>
<li>Model<br>Model对象作为集合中的所有文档的表示，相当于MongoDB数据库中的集合Collection</li>
<li>Document<br>Document表示集合中的具体文档，相当于集合中的一个具体的文档。</li>
</ul>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>安装完<code>Mongoose</code>后<strong>引入</strong>它:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>连接数据库:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://数据库的IP地址:端口号/数据库名&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>监听MongoDB数据库的链接状态:</strong><br>在mongoose对象中,有一个属性叫做connection,该对象表示的就是数据库连接。通过监视该对象的状态，可以来监听数据库的链接与断开。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.connection.once(<span class="string">&#x27;open&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功~~~&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">mongoose.connection.once(<span class="string">&#x27;close&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据库断开连接~~~&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>断开数据库连接：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.disconnect()</span><br></pre></td></tr></table></figure>


<h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p><code>Mongoose</code> 的一切始于 <code>Schema</code>。每个 <code>schema</code> 都会映射到一个 <code>MongoDB collection</code> ，并定义这个<code>collection</code>里的文档的构成。<br><strong>简单来说就是创建一个约束对象,约束文档中属性的类型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/test&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">let</span> stuSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">	name:<span class="built_in">String</span>,</span><br><span class="line">	age:<span class="built_in">Number</span>,</span><br><span class="line">	gender:&#123;</span><br><span class="line">		type:<span class="built_in">String</span>,</span><br><span class="line">		<span class="keyword">default</span>:<span class="string">&#x27;男&#x27;</span>   <span class="comment">//默认值</span></span><br><span class="line">	&#125;,</span><br><span class="line">	address:<span class="built_in">String</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>name:String</code>表示限定name属性的值只能为文本类型。<br><code>gender:&#123;type:String,default:&#39;男&#39;&#125;</code>表示gender属性的类型为文本类型,默认值为男</p>
</blockquote>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>Models 是从 <code>Schema</code> 编译来的构造函数。 它们的实例就代表着可以从数据库保存和读取的documents。<br><code>Model</code>代表的是数据库中的集合，从数据库创建和读取 document 的所有操作都是通过 model 进行的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/test&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">let</span> stuSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">	name:<span class="built_in">String</span>,</span><br><span class="line">	age:<span class="built_in">Number</span>,</span><br><span class="line">	gender:&#123;</span><br><span class="line">		type:<span class="built_in">String</span>,</span><br><span class="line">		<span class="keyword">default</span>:<span class="string">&#x27;男&#x27;</span>   <span class="comment">//默认值</span></span><br><span class="line">	&#125;,</span><br><span class="line">	address:<span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Model: mongoose.model(modelName,schema);</span></span><br><span class="line"><span class="comment">//modelName就是要映射的集合名,schema就是定义的约束对象</span></span><br><span class="line"><span class="keyword">let</span> StuModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>,stuSchema);</span><br><span class="line"><span class="comment">//注意:mongoose会自动将集合名变为复数,student会变为students</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向数据库中插入一个文档</span></span><br><span class="line">StuModel.create(&#123;</span><br><span class="line">    name:<span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    age:<span class="number">500</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    address:<span class="string">&#x27;花果山&#x27;</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span>(!err)&#123;</span><br><span class="line">     	<span class="built_in">console</span>.log(<span class="string">&#x27;插入成功&#x27;</span>);  </span><br><span class="line">     &#125;   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="Model的方法"><a href="#Model的方法" class="headerlink" title="Model的方法"></a>Model的方法</h3><p>有了Model,我们就可以对数据库进行增删改查的操作了<br><a href="http://www.mongoosejs.net/docs/api.html#Model">Model所有方法</a></p>
<p>常用的几个方法:<br><strong>Model.create(doc(s),function(err,candies){})</strong><br>doc(s): 该参数表示可以传一个或多个文档(多个为数组)<br>返回值: Promise对象<br>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>,schema);</span><br><span class="line">myModel.create([</span><br><span class="line">	&#123;......&#125;,</span><br><span class="line">	&#123;......&#125;</span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>


<p><strong>Model.findById(id,[projection],[options],[callback])</strong><br>根据文档的<code>_id</code>属性查询文档,返回的是一个对象</p>
<p><strong>Model.findOne([conditions],[projection],[options],[callback])</strong><br>查询符合条件的第一个文档,返回的是一个对象</p>
<p><strong>Model.find([conditions],[projection],[options],callback])</strong><br>查询符合条件的所有文档,返回的是一个数组</p>
<p>conditions: 查询的条件<br>projection: 投影,可以是一个字符串或对象。<br>    例如<code>&#123;name:1,_id:0&#125;</code>,意思是只返回name属性的值<br>    ‘name age’,意思是只返回name和age属性的值,但是还会额外返回一个<code>_id</code>属性的值,如不想返回<code>_id</code>属性的值,改为:<code>name age -_id</code></p>
<p>options: 查询选项(skip和limit),例如:<code>&#123;skip:3,limit:4&#125;</code></p>
<ul>
<li>skip:跳过前几个数据</li>
<li>limit:限制返回文档的数量,必须为数字</li>
</ul>
<p>callback: 回调函数,查询结果会通过回调函数返回,回调函数必须传</p>
<ul>
<li>err参数:错误信息</li>
<li>docs参数: 返回的文档对象</li>
</ul>
<p><strong>Model.update(conditions,doc,[options],[callback])</strong>   已经弃用,推荐使用下面两个<br><em>Model.updateMany(conditions,doc,[options],[callback])<br>Model.updateOne(conditions,doc,[options],[callback])*</em><br>用来修改一个或多个文档<br>conditions: 查询条件<br>doc: 修改后的对象<br>options: 配置参数<br>callback:回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>,schema);</span><br><span class="line">StuModel.updateOne(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">550</span>&#125;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span>(!err)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">console</span>.log(<span class="string">&#x27;更新成功&#x27;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">	&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)</span>;</span><br></pre></td></tr></table></figure>


<p><strong>Model.remove(conditions,[callback])</strong><br><strong>Model.deleteOne(conditions,[callback])</strong><br><strong>Model.deleteMany(conditions,[callback])</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>,schema);</span><br><span class="line">StuModel.remove(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!err)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p><code>Document</code>和集合中的文档一一对应,<code>Document</code>是<code>Model</code>的实例,通过<code>Model</code>查询到的结果都是<code>Document</code></p>
<p><a href="http://www.mongoosejs.net/docs/api.html#Document">Document所有方法</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>,schema);</span><br><span class="line">StuModel.findOne(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!err)&#123;</span><br><span class="line">		<span class="comment">// docs.age = 12;</span></span><br><span class="line">		<span class="comment">// console.log(docs.get(&quot;age&quot;));        //获取文档中指定属性的值</span></span><br><span class="line">		docs.set(<span class="string">&quot;age&quot;</span>,<span class="number">133</span>)        </span><br><span class="line">        <span class="comment">//设置文档中指定属性的值,作用同docs.age = 133 一样,</span></span><br><span class="line">        <span class="comment">//如果没有使用save()方法就不会更新到数据库</span></span><br><span class="line">        </span><br><span class="line">		docs.save();       <span class="comment">//保存当前文档(会将修改同步到数据库)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB入门</category>
      </categories>
      <tags>
        <tag>MongoDB入门</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode使用dockers环境开发</title>
    <url>/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/vscode/vscode%E4%BD%BF%E7%94%A8docker%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>前言<br><br>使用docker环境来开发可以在切换工作地点的时候快速构建开发环境,提高工作效率，我们只需专心开发就好。</p>
</blockquote>
<h2 id="1-vscode的准备"><a href="#1-vscode的准备" class="headerlink" title="1.vscode的准备"></a>1.vscode的准备</h2><h2 id="Docker-Toolbox"><a href="#Docker-Toolbox" class="headerlink" title="Docker Toolbox"></a>Docker Toolbox</h2><blockquote>
<p>使用Docker ToolBox安装的docker应该做以下工作</p>
</blockquote>
<h3 id="1-进入VirtualBox设置共享文件夹"><a href="#1-进入VirtualBox设置共享文件夹" class="headerlink" title="1.进入VirtualBox设置共享文件夹"></a>1.进入VirtualBox设置共享文件夹</h3><p><img src="https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121347174-1527894909.png" alt=""></p>
<h3 id="2-配置共享文件夹-共享文件夹的路径-以及在虚拟机上的名称"><a href="#2-配置共享文件夹-共享文件夹的路径-以及在虚拟机上的名称" class="headerlink" title="2.配置共享文件夹,共享文件夹的路径,以及在虚拟机上的名称"></a>2.配置共享文件夹,共享文件夹的路径,以及在虚拟机上的名称</h3><p><img src="https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121425099-1084242187.png" alt=""></p>
<p>连接虚拟机进行挂载(自动挂载貌似不生效)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;dockerShare</span><br><span class="line">sudo chmod 777 &#x2F;dockerShare</span><br><span class="line">sudo mount -t vboxsf sharefolder（VB上设置的共享文件夹名称）  &#x2F;mysharefolder（虚拟机下的挂载目录）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可使用<code>df -h</code>查看是否挂载成功</p>
</blockquote>
<h3 id="拉取centos镜像并创建容器"><a href="#拉取centos镜像并创建容器" class="headerlink" title="拉取centos镜像并创建容器"></a>拉取centos镜像并创建容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br><span class="line">#创建容器</span><br><span class="line"> docker run -tid -p 127.0.0.1:5001:22 --privileged --name&#x3D;&#39;sshCentos&#39; -w &#x2F;workspace -v &#x2F;dockerShare:&#x2F;workspace centos &#x2F;sbin&#x2F;init</span><br><span class="line"></span><br><span class="line">#进入容器</span><br><span class="line">docker exec -ti sshCentos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode常用插件</title>
    <url>/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/vscode/vscode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="vue相关插件"><a href="#vue相关插件" class="headerlink" title="vue相关插件"></a>vue相关插件</h2><ul>
<li><p>语法高亮<code>vetur</code></p>
<blockquote>
<p>设置格式化代码:设置–&gt;扩展–&gt;vetur–&gt;在setting.json编辑:<br></p>
</blockquote>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;explorer.confirmDragAndDrop&quot;: false,</span><br><span class="line">    &quot;explorer.compactFolders&quot;: false,</span><br><span class="line">    &quot;explorer.confirmDelete&quot;: false,</span><br><span class="line">    &quot;vetur.completion.scaffoldSnippetSources&quot;: &#123;</span><br><span class="line">        &quot;vetur.format.defaultFormatter.html&quot;: &quot;prettyhtml&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.css&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.postcss&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.scss&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.less&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.stylus&quot;: &quot;stylus-supremacy&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.js&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.ts&quot;: &quot;prettier&quot;,</span><br><span class="line">        &quot;vetur.format.defaultFormatter.sass&quot;: &quot;sass-formatter&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>语法块:<code>Vue 2 Snippets</code></p>
</li>
</ul>
<hr>
<h2 id="自动化插件"><a href="#自动化插件" class="headerlink" title="自动化插件"></a>自动化插件</h2><ul>
<li>自动更新import的路径:<code>Auto Import</code></li>
<li>自动设置函数的注释:<code>Document This</code><blockquote>
<p>使用:将光标移动到函数名上,然后连续按两次<code>Ctrl+Alt+D</code></p>
</blockquote>
</li>
<li>vscode自带的代码格式化快捷键:<blockquote>
<p>On Windows <code>Shift + Alt + F</code><br></p>
<pre><code>On Mac `Shift + Option + F`&lt;br&gt;
On Ubuntu `Ctrl + Shift + I`</code></pre></blockquote>
</li>
</ul>
<h2 id="代码格式插件"><a href="#代码格式插件" class="headerlink" title="代码格式插件"></a>代码格式插件</h2><p><code>Prettier - Code formatter</code></p>
<p>使用代码格式化快捷键:<code>Shift + Alt + F</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>快速在浏览器打开：<code>open in browser</code></p>
]]></content>
      <categories>
        <category>编程工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode设置@提示路径</title>
    <url>/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/vscode/vscode%E8%AE%BE%E7%BD%AE@%E6%8F%90%E7%A4%BA%E8%B7%AF%E5%BE%84.html</url>
    <content><![CDATA[<a id="more"></a>

<p>1、安装插件：<code>Path Intellisense</code></p>
<p>2、配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;path-intellisense.mappings&quot;: &#123;</span><br><span class="line">        &quot;@&quot;: &quot;$&#123;workspaceRoot&#125;&#x2F;src&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>3、在项目package.json所在同级目录下创建文件jsconfig.json：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;ES6&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">        &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class="line">        &quot;baseUrl&quot;: &quot;.&#x2F;&quot;,</span><br><span class="line">        &quot;paths&quot;: &#123;</span><br><span class="line">          &quot;@&#x2F;*&quot;: [&quot;src&#x2F;*&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;exclude&quot;: [</span><br><span class="line">        &quot;node_modules&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>盒状模型的属性</title>
    <url>/%E5%89%8D%E7%AB%AF/JavaScript/DOM/Element%E5%AF%B9%E8%B1%A1.html</url>
    <content><![CDATA[<h2 id="盒状模型的属性"><a href="#盒状模型的属性" class="headerlink" title="盒状模型的属性"></a>盒状模型的属性</h2><blockquote>
<p>在打印一个事件对象时，以X、Y结尾的都是与事件相关的，以width、height结尾的都是与元素相关的</p>
</blockquote>
<h3 id="Element-offsetHeight，Element-offsetWidth"><a href="#Element-offsetHeight，Element-offsetWidth" class="headerlink" title="Element.offsetHeight，Element.offsetWidth"></a>Element.offsetHeight，Element.offsetWidth</h3><p><code>Element.offsetHeight</code>属性返回元素的垂直高度，<code>Element.offsetWidth</code>属性返回水平宽度。</p>
<p><code>offsetHeight</code>可以理解成元素左下角距离左上角的位移，<code>offsetWidth</code>是元素右上角距离左上角的位移。它们的单位为像素，都是只读。</p>
<blockquote>
<p>这两个属性值包括Padding和Border、以及滚动条。这也意味着，如果不存在内容溢出，Element.offsetHeight只比Element.clientHeight多了边框的高度。</p>
</blockquote>
<hr>
<h3 id="Element-offsetLeft，Element-offsetTop"><a href="#Element-offsetLeft，Element-offsetTop" class="headerlink" title="Element.offsetLeft，Element.offsetTop"></a>Element.offsetLeft，Element.offsetTop</h3><p><code>Element.offsetLeft</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的水平位移，<code>Element.offsetTop</code>返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。</p>
<hr>
<h3 id="Element-clientHeight，Element-clientWidth"><a href="#Element-clientHeight，Element-clientWidth" class="headerlink" title="Element.clientHeight，Element.clientWidth"></a>Element.clientHeight，Element.clientWidth</h3><p><code>Element.clientHeight</code>属性返回元素节点可见部分的高度，<code>Element.clientWidth</code>属性返回元素节点可见部分的宽度。</p>
<p>这两个属性的值包括<code>Padding</code>、但不包括滚动条、边框和<code>Margin</code>，单位为像素。</p>
<blockquote>
<p>所谓“可见部分”，指的是不包括溢出（overflow）的大小，只返回该元素在容器中占据的大小，对于有滚动条的元素来说，它们等于滚动条围起来的区域大小。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rootElement = <span class="built_in">document</span>.documentElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有水平滚动条时</span></span><br><span class="line">rootElement.clientHeight === <span class="built_in">window</span>.innerHeight <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有垂直滚动条时</span></span><br><span class="line">rootElement.clientWidth === <span class="built_in">window</span>.innerWidth <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Element-clientLeft，Element-clientTop"><a href="#Element-clientLeft，Element-clientTop" class="headerlink" title="Element.clientLeft，Element.clientTop"></a>Element.clientLeft，Element.clientTop</h3><p><code>Element.clientLeft</code>属性等于元素节点左边框的宽度，<code>Element.clientTop</code>属性等于网页元素顶部边框的宽度，单位为像素。</p>
<p>这两个属性包括滚动条的宽度，但不包括Margin和Padding。不过，一般来说，除非排版方向是从右到左，且发生元素高度溢出，否则不可能存在左侧滚动条，亦不可能存在顶部的滚动条。</p>
<p>如果元素的显示设为display: inline，它的clientLeft属性一律为0，不管是否存在左边框。</p>
<hr>
<h3 id="Element-scrollHeight，Element-scrollWidth"><a href="#Element-scrollHeight，Element-scrollWidth" class="headerlink" title="Element.scrollHeight，Element.scrollWidth"></a>Element.scrollHeight，Element.scrollWidth</h3><p><code>Element.scrollHeight</code>属性返回某个网页元素的总高度，<code>Element.scrollWidth</code>属性返回总宽度，可以理解成元素在垂直和水平两个方向上可以滚动的距离。它们都包括由于溢出容器而无法显示在网页上的那部分高度或宽度。这两个属性是只读属性。</p>
<p>它们返回的是整个元素的高度或宽度，包括由于存在滚动条而不可见的部分。默认情况下，它们包括<code>Padding</code>，但不包括<code>Border</code>和<code>Margin</code>。</p>
<p>整张网页的总高度可以从<code>document.documentElement</code>或<code>document.body</code>上读取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Element-scrollLeft，Element-scrollTop"><a href="#Element-scrollLeft，Element-scrollTop" class="headerlink" title="Element.scrollLeft，Element.scrollTop"></a>Element.scrollLeft，Element.scrollTop</h3><p><code>Element.scrollLeft</code>属性表示网页元素的水平滚动条向右侧滚动的像素数量，<code>Element.scrollTop</code>属性表示网页元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于0。</p>
<p>如果要查看整张网页的水平的和垂直的滚动距离，要从<code>document.body</code>元素上读取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollLeft</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件的位置相关属性</title>
    <url>/%E5%89%8D%E7%AB%AF/JavaScript/DOM/%E4%BA%8B%E4%BB%B6.html</url>
    <content><![CDATA[<h2 id="事件的位置相关属性"><a href="#事件的位置相关属性" class="headerlink" title="事件的位置相关属性"></a>事件的位置相关属性</h2><h3 id="clientX，clientY"><a href="#clientX，clientY" class="headerlink" title="clientX，clientY"></a>clientX，clientY</h3><p>clientX属性返回鼠标位置相对于浏览器窗口左上角的水平坐标，单位为像素，与页面是否横向滚动无关。</p>
<p>clientY属性返回鼠标位置相对于浏览器窗口左上角的垂直坐标，单位为像素，与页面是否纵向滚动无关。</p>
<h3 id="movementX，movementY"><a href="#movementX，movementY" class="headerlink" title="movementX，movementY"></a>movementX，movementY</h3><p><code>movementX</code>属性返回一个水平位移，单位为像素，表示当前位置与上一个<code>mousemove</code>事件之间的水平距离。在数值上，等于<code>currentEvent.movementX = currentEvent.screenX - previousEvent.screenX</code>。</p>
<p><code>movementY</code>属性返回一个垂直位移，单位为像素，表示当前位置与上一个<code>mousemove</code>事件之间的垂直距离。在数值上，等于<code>currentEvent.movementY = currentEvent.screenY - previousEvent.screenY</code>。</p>
<h3 id="screenX，screenY"><a href="#screenX，screenY" class="headerlink" title="screenX，screenY"></a>screenX，screenY</h3><p><code>screenX</code>属性返回鼠标位置相对于屏幕左上角的水平坐标，单位为像素。</p>
<p><code>screenY</code>属性返回鼠标位置相对于屏幕左上角的垂直坐标，单位为像素。</p>
<h3 id="offsetX-offsetY"><a href="#offsetX-offsetY" class="headerlink" title="offsetX offsetY"></a>offsetX offsetY</h3><p><code>offsetX</code>属性返回鼠标位置相对于父元素左上角的水平坐标，单位为像素。</p>
<p><code>offsetY</code>属性返回鼠标位置相对于父元素左上角的垂直坐标，单位为像素。</p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex学习笔记</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vuex/vuex.html</url>
    <content><![CDATA[<p>通过props属性和自定义事件实现组件间的通信,但是这样的做的后果就是组件间的通信会非常的混乱且不好管理。</p>
<p><code>vuex</code>是实现组件全局状态(数据)管理的一种机制,可以方便的实现组件之间数据的共享</p>
<a id="more"></a>
<p><img src="C:%5CUsers%5C%E5%88%98%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1588215256162.png" alt="1588215256162"></p>
<p>使用<code>vuex</code>的好处:</p>
<ol>
<li>能够在<code>vuex</code>中集中管理共享的数据,易于开发和后期维护</li>
<li>能够高效地实现组件之间的数据共享,提高开发效率</li>
<li>储存在<code>vuex</code>中的数据都是响应式的,能够实时保持数据与页面的同步</li>
</ol>
<h2 id="什么样的数据适合存储到vuex中"><a href="#什么样的数据适合存储到vuex中" class="headerlink" title="什么样的数据适合存储到vuex中"></a>什么样的数据适合存储到<code>vuex</code>中</h2><p>一般情况下,只有组件之间共享的数据,才有必要存储到<code>vuex</code>中;对于组件中的私有数据,依旧存储在组件自身的<code>data</code>中即可.</p>
<hr>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p><code>State</code>提供唯一的公共数据源,所有共享的数据都要统一放到<code>Store</code>的<code>State</code>中进行存储。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.store(&#123;</span><br><span class="line">	state:&#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>组件访问<code>State</code>中数据的方式:</p>
<p>方式一:<code>this.$store.state.全局数据名称</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        count()&#123;</span><br><span class="line">            return this.$store.state.count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二:<code>mapState</code>辅助函数<br>使用<code>mapState</code>辅助函数可以帮助我们快速生成计算属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="line">import &#123; mapState &#125; from &#39;vuex&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    &#x2F;&#x2F; 箭头函数可使代码更简练</span><br><span class="line">    count: state &#x3D;&gt; state.count,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 传字符串参数 &#39;count&#39; 等同于 &#96;state &#x3D;&gt; state.count&#96;</span><br><span class="line">    countAlias: &#39;count&#39;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 为了能够使用 &#96;this&#96; 获取局部状态，必须使用常规函数</span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      return state.count + this.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  &#x2F;&#x2F; 映射 this.count 为 store.state.count</span><br><span class="line">  &#39;count&#39;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>从上面的代码中我们可以看出<code>mapState</code>返回的是一个对象,所以可以使用对象展开符来将其混入到计算属性中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; &#x2F;* ... *&#x2F; &#125;,</span><br><span class="line">  &#x2F;&#x2F; 使用对象展开运算符将此对象混入到外部对象中</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p><code>vuex</code>中的<code>getter</code>就像计算属性一样,<code>getter</code>的返回值会根据它的依赖被缓存起来,且只有当它的依赖值发生了改变才会被重新计算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Getter接收state作为第一个参数,接收其他getter作为第二个参数</span><br><span class="line">getters: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  doneTodosCount: (state, getters) &#x3D;&gt; &#123;</span><br><span class="line">    return getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过属性访问getter"><a href="#通过属性访问getter" class="headerlink" title="通过属性访问getter"></a>通过属性访问getter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.getters.doneTodos</span><br></pre></td></tr></table></figure>
<blockquote>
<p>getter在通过属性访问时是作为Vue的响应式系统的一部分缓存其中的</p>
</blockquote>
<h3 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h3><p>通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  getTodoById: (state) &#x3D;&gt; (id) &#x3D;&gt; &#123;</span><br><span class="line">    return state.todos.find(todo &#x3D;&gt; todo.id &#x3D;&#x3D;&#x3D; id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.getters.getTodoById(2) &#x2F;&#x2F; -&gt; &#123; id: 2, text: &#39;...&#39;, done: false &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex开发日记</title>
    <url>/%E5%89%8D%E7%AB%AF/vue/vuex/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="路由跳转多次的问题"><a href="#路由跳转多次的问题" class="headerlink" title="路由跳转多次的问题"></a>路由跳转多次的问题</h2><p>问题代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link tag=<span class="string">&quot;li&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in tabList&quot;</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive(item.path)&#125;&quot;</span> :to=<span class="string">&quot;&#123;name:item.path&#125;&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;i @click=<span class="string">&quot;deleteItem(item)&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------deleteItem方法----------</span></span><br><span class="line"><span class="function"><span class="title">deleteItem</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;page/delVisitedViews&#x27;</span>,item).then(<span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tab = <span class="built_in">this</span>.tabList;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.isActive(item.path))&#123;<span class="comment">//只有在关闭当前打开的标签页才会有影响</span></span><br><span class="line">            <span class="keyword">if</span>(tab.length ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$router.replace(&#123;<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tab.length == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$router.replace(&#123;<span class="attr">name</span>:tab[<span class="number">0</span>].path&#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tab.length-<span class="number">1</span> &lt; index)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$router.replace(&#123;<span class="attr">name</span>:tab[index-<span class="number">1</span>].path&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tab.length-<span class="number">1</span> &gt;= index)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$router.replace(&#123;<span class="attr">name</span>:tab[index].path&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原因:i标签的点击事件产生了冒泡,触发了router-link的点击事件,所以导致了路由跳转两次的问题</p>
</blockquote>
<h2 id="页面刷新vuex状态丢失"><a href="#页面刷新vuex状态丢失" class="headerlink" title="页面刷新vuex状态丢失"></a>页面刷新vuex状态丢失</h2><p>==问题原因:== 因为store里的数据是保存在运行内存中的,当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>讲state里的数据保存一份到本地存储(localStorage,sessionStorage,cookie)中</p>
<p>==本地存储的选择:==</p>
<ol>
<li><code>localStorage</code>是永久存储在本地(除非手动删除)</li>
<li><code>sessionStorage</code>是存储到当前页面关闭为止</li>
<li><code>cookie</code>则根据你设置的有效时间存储(不能存储大数据且不易读取)</li>
</ol>
<h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><p>由于<code>state</code>里的数据是响应式的,所以<code>sessionStorage</code>存储也要跟随变化。我们可以在<code>mutation</code>修改<code>state</code>的同时修改<code>sessionStorage</code>对应的存储</p>
<blockquote>
<p>该方案存在一定的缺点,我们每次提交<code>mutation</code>的时候都要修改<code>sessionStorage</code>的值,但是我们只想在页面刷新前去存储,这样做会造成性能浪费</p>
</blockquote>
<h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><p>通过<code>beforeupload</code>事件在页面刷新时先触发,存储vuex的状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="comment">//在页面加载时读取sessionStorage里的状态信息</span></span><br><span class="line">    <span class="keyword">if</span> (sessionStorage.getItem(<span class="string">&quot;store&quot;</span>) ) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.replaceState(<span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.$store.state,<span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&quot;store&quot;</span>))))</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//在页面刷新时将vuex里的信息保存到sessionStorage里</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        sessionStorage.setItem(<span class="string">&quot;store&quot;</span>,<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.$store.state))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack4.0学习</title>
    <url>/%E5%89%8D%E7%AB%AF/Webpack4.html</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>Webpack4.0</strong></p>
<p>使用webpack4时,确保使用node.js的版本 &gt;= 8.9.4</p>
<p>webpack4新特性:</p>
<ol>
<li><strong>mode属性</strong></li>
</ol>
<p>webpack需要设置mode属性，可以是development或production。例如：</p>
<p>webpack –mode development</p>
<p>针对开发模式提供的特性:</p>
<ul>
<li>浏览器调试</li>
<li>注释、开发阶段的详细错误日志和提示</li>
<li>快速和优化的增量构建机制、</li>
</ul>
<p>针对生产模式提供的特性：</p>
<ul>
<li>开启所有的优化代码</li>
<li>更小的bundle大小</li>
<li>去掉只在开发阶段运行的代码</li>
<li>Scope hoisting和Tree-shaking</li>
</ul>
<ol>
<li><strong>插件和优化</strong></li>
</ol>
<p><img src="https://qqadapt.qpic.cn/txdocpic/0/374cd483718af6dfdbf5f20e4bb73320/0" alt="img">             </p>
<ol>
<li><strong>开箱即用的WebAssembly</strong></li>
</ol>
<p>WebAssembly（wasm）会带来运行时性能的大幅度提升，由于在社区的热毒，webpack4对它做了开箱即用的支持。你可以直接对本地的wasm模块进行import或者export操作，也可以通过编写loader来直接import C++、C或者Rust</p>
<ol>
<li>支持多种模块类型</li>
</ol>
<p>共5中：</p>
<ul>
<li>JavaScript/auto：在webpack3里，默认开启对所有模块系统的支持，包括CommonJS、AMD、ESM。</li>
<li>JavaScript/esm:只支持ESM这种静态模块</li>
<li>JavaScript/dynamic:只支持CommonJS和AMD这种动态模块</li>
<li>json:只支持JSON数据,可以通过require和import来使用</li>
<li>WebAssembly/experimental:只支持wasm模块,目前处于实验阶段</li>
</ul>
<ol>
<li><strong>0CJS</strong></li>
</ol>
<p>0CJS的含义是0配置,webpack4受到Parcel打包工具启发,尽可能的让开发者运行项目的成本变低。为了做到0配置，webpack4不在强制需要webpack.config.js作为打包的入口配置文件了，他默认的入口‘./src/’和默认出口‘./dist’，对小项目而言是福音（配置文件不推荐舍弃掉）。</p>
<ol>
<li>新的插件系统</li>
</ol>
<p>webpack4对插件系统进行了不少修改，提供了针对插件和钩子的新API。</p>
<p>变化如下：</p>
<ul>
<li>所有的hook有hooks对象统一管理，它将所有的hook作为可扩展的类属性。</li>
<li>当添加插件时，必须提供一个插件名称。</li>
<li>开发插件时，可以选择sync/callback/promise作为插件类型</li>
<li>可以通过this.hooks = { myHooks:new SyncHook(…) }来注册hook了</li>
</ul>
<h1 id="安装与基本命令"><a href="#安装与基本命令" class="headerlink" title="安装与基本命令"></a><strong>安装与基本命令</strong></h1><p>最好是本地(局部)安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--save-dev(简写:-D)    &#x2F;&#x2F;用于开发环境</span><br><span class="line">--save(简写:-S)    &#x2F;&#x2F;安装的包需要发布到生产环境</span><br><span class="line"></span><br><span class="line">webpack3.0</span><br><span class="line">全部安装:npm install webpack -g</span><br><span class="line">局部安装:npm install --save-dev webpack</span><br><span class="line"></span><br><span class="line">安装webpack4.0</span><br><span class="line">局部:</span><br><span class="line">npm install webpack@^4 --save-dev</span><br><span class="line">npm install --save-dev webpack-cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;本地安装前使用 npm init 生成package.json文件</span><br><span class="line">&#x2F;&#x2F;然后再进行webpack的本地安装</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用打包命令</span><br><span class="line">&#x2F;&#x2F;在package.json中添加script属性</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;build&quot;:&quot;webpack --config webpack.config.js&quot;,</span><br><span class="line">    &quot;server&quot;:&quot;webpack-dev-server&quot;          &#x2F;&#x2F;启动开发服务</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用build命令</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>基本命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --mode&#x3D;production | development 输入文件.js -o 输出文件.js </span><br></pre></td></tr></table></figure>
<h1 id="区分不同环境"><a href="#区分不同环境" class="headerlink" title="区分不同环境"></a><strong>区分不同环境</strong></h1><p>使用多个配置文件用于不同的环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;需要使用webpack-merge插件</span><br><span class="line">npm install webpack-merge -D</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">创建三个配置文件:</span><br><span class="line">webpack.base.js   &#x2F;&#x2F;公共的配置</span><br><span class="line">webpack.dev.js    &#x2F;&#x2F;开发环境的配置</span><br><span class="line">webpa.prod.js     &#x2F;&#x2F;生产环境的配置</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack.prod.js</span><br><span class="line">let &#123;smart&#125; &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">let base &#x3D; require(&#39;.&#x2F;webpack.base.js&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; smart(base,&#123;</span><br><span class="line">    mode:&#39;production&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack.dev.js</span><br><span class="line">let &#123;smart&#125; &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">let base &#x3D; require(&#39;.&#x2F;webpack.base.js&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; smart(base,&#123;</span><br><span class="line">    mode:&#39;development&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;运行命令</span><br><span class="line">npm run build -- --config webpack.dev.js    &#x2F;&#x2F;运行开发环境的配置文件</span><br><span class="line">npm run build -- --config webpack.prod.js    &#x2F;&#x2F;运行生产环境的配置文件</span><br></pre></td></tr></table></figure>
<h1 id="配置文件样板"><a href="#配置文件样板" class="headerlink" title="配置文件样板"></a><strong>配置文件样板</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要安装的包</span><br><span class="line">npm install --save-dev html-webpack-plugin</span><br><span class="line">npm install webpack-dev-server -D</span><br><span class="line"></span><br><span class="line">npm install mini-css-extract-plugin -D  &#x2F;&#x2F;抽离css插件</span><br><span class="line">npm install postcss-loader autoprefixer -D  &#x2F;&#x2F;css浏览器后缀自动添加</span><br><span class="line">npm install uglifyjs-webpack-plugin -D   &#x2F;&#x2F;js压缩插件</span><br><span class="line">npm install optimize-css-assets-webpack-plugin -D &#x2F;&#x2F;css压缩插件</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCss &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode:&quot;development&quot;,</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    minimizer:[</span><br><span class="line">      new UglifyJsPlugin(&#123;         &#x2F;&#x2F;js压缩</span><br><span class="line">        cache:true,</span><br><span class="line">        parallel:true,</span><br><span class="line">        sourceMap:true</span><br><span class="line">      &#125;),</span><br><span class="line">      new OptimizeCss(),         &#x2F;&#x2F;css压缩</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;原码映射,会单独生成一个sourcemap文件,可以帮助我们调试,出错了,会标识当前报错的列和行,内容全</span><br><span class="line">  &#x2F;&#x2F; devtool:&#39;source-map&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;不会产生单独的文件,但是可以显示行和列</span><br><span class="line">  &#x2F;&#x2F; devtool:&#39;eval-source-map&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;不会显示列,但是是一个单独的映射文件,产生后可以保留起来</span><br><span class="line">  &#x2F;&#x2F; devtool:&#39;cheap-module-source-map&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;不会产生文件,集成在打包后的文件中,不会产生列</span><br><span class="line">  &#x2F;&#x2F; devtool:&#39;cheap-module-eval-source-map&#39;,</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;, &#x2F;&#x2F;入口文件</span><br><span class="line">  output: &#123;                            &#x2F;&#x2F;出口文件</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;index.js&#39;,</span><br><span class="line">    publicPath:&#39;http:&#x2F;&#x2F;www.baidu.com&#39;         &#x2F;&#x2F;引用资源的时候统一加上该路径</span><br><span class="line">  &#125;, </span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, &quot;dist&quot;), </span><br><span class="line">    compress: true,</span><br><span class="line">    port: 9000,   </span><br><span class="line">  &#125;, </span><br><span class="line">  plugins:[</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title:&quot;hello&quot;,            &#x2F;&#x2F;输出HTML文件的标题</span><br><span class="line">      filename:&#39;index.html&#39;,    &#x2F;&#x2F;输出HTML文件的名字</span><br><span class="line">      template:&#39;.&#x2F;src&#x2F;template.html&#39;,   &#x2F;&#x2F;输出html使用的模板  </span><br><span class="line">    &#125;),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename:&#39;css&#x2F;main.css&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:&#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:&#39;file-loader&#39;,</span><br><span class="line">          options:&#123;</span><br><span class="line">            name:&#39;&#x2F;img&#x2F;[name].[ext]&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:&#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F;做一个限制 当我们的图片 小于limit的时候,用base64来转化</span><br><span class="line">        &#x2F;&#x2F;否则用file-loader产生真实的图片</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:&#39;url-loader&#39;,</span><br><span class="line">          options:&#123;</span><br><span class="line">            limit:10*1024,       </span><br><span class="line">            outputPath:&#39;&#x2F;img&#x2F;&#39;,</span><br><span class="line">            publicPath:&#39;http:&#x2F;&#x2F;www.souhu.com&#39;       &#x2F;&#x2F;引用图片资源的时候加上该路径</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:&#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;(node_modules|bower_components)&#x2F;,</span><br><span class="line">        include:path.resolve(__dirname,&#39;src&#39;),</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:&#39;babel-loader&#39;,</span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[&#39;@babel&#x2F;preset-env&#39;],</span><br><span class="line">            plugins:[</span><br><span class="line">              &quot;@babel&#x2F;plugin-transform-runtime&quot;</span><br><span class="line">            ],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:&#x2F;\.css$&#x2F;,</span><br><span class="line">        exclude: &#x2F;(node_modules|bower_components)&#x2F;,</span><br><span class="line">        use:[</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &#39;css-loader&#39;,</span><br><span class="line">          &#39;postcss-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h1><h2 id="出口入口配置"><a href="#出口入口配置" class="headerlink" title="出口入口配置"></a><strong>出口入口配置</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;path&#x2F;to&#x2F;my&#x2F;entry&#x2F;file.js&#39;, &#x2F;&#x2F;入口文件</span><br><span class="line">  output: &#123;                            &#x2F;&#x2F;出口文件</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;my-first-webpack.bundle.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  mode:&quot;production | development&quot;    &#x2F;&#x2F;生产&#x2F;开发模式</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">入口文件可以配置多个,写成对象形式</span><br><span class="line">entry:&#123;</span><br><span class="line">    home:&quot;.&#x2F;home.js&quot;,</span><br><span class="line">    about:&quot;.&#x2F;about.js&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出文件要对应入口文件的个数</span><br><span class="line">output:&#123;</span><br><span class="line">    filename:&quot;[name]_bundle.js&quot;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>


<h1 id="webpack小插件"><a href="#webpack小插件" class="headerlink" title="webpack小插件"></a><strong>webpack小插件</strong></h1><ul>
<li><p>cleanWebpackPlugin<br>清空文件夹的插件</p>
</li>
<li><p>copyWebpackPlugin<br>拷贝资源插件</p>
</li>
<li><p>bannerPlugin<br>内置版权声明插件</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br><span class="line">npm install copy-webpack-plugin -D</span><br><span class="line"></span><br><span class="line">const &#123;CleanWebpackPlugin&#125; &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line">const copyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;);</span><br><span class="line">const webpack&#x3D; require(&#39;webpack&#39;);</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        new CleanWebpackPlugin(),    &#x2F;&#x2F;要清空的文件夹 </span><br><span class="line">        new copyWebpackPlugin([</span><br><span class="line">            &#123;from:&#39;doc&#39;,to:&#39;.&#x2F;&#39;&#125;&#x2F;&#x2F;doc目录汇中的文件拷贝到输出目录下</span><br><span class="line">        ]),</span><br><span class="line">        &#x2F;&#x2F;被插到打包出来的js问价你的头部</span><br><span class="line">        new webpack.BannerPlugin(&#39;make 2019 by lk&#39;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="watch-实时打包"><a href="#watch-实时打包" class="headerlink" title="watch(实时打包)"></a><strong>watch(实时打包)</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">    watch:true,         &#x2F;&#x2F;启动实时打包</span><br><span class="line">    watchOptions:&#123;      &#x2F;&#x2F;监控的选项</span><br><span class="line">        poll:1000,      &#x2F;&#x2F;每秒</span><br><span class="line">        aggregateTimeout:500,      &#x2F;&#x2F;防抖,监控的时间间隔</span><br><span class="line">        ignored:&#x2F;node_modules&#x2F;,     &#x2F;&#x2F;不需要进行监控的文件夹</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;完成以上配置后,输入打包命令后就会进行监控了</span><br></pre></td></tr></table></figure>
<h1 id="配置sourcemap"><a href="#配置sourcemap" class="headerlink" title="配置sourcemap"></a><strong>配置sourcemap</strong></h1><p>//原码映射,会单独生成一个sourcemap文件,可以帮助我们调试,出错了,会标识当前报错的列和行,内容全<br> // devtool:’source-map’,</p>
<p>  //不会产生单独的文件,但是可以显示行和列<br>  // devtool:’eval-source-map’,</p>
<p>  //不会显示列,但是是一个单独的映射文件,产生后可以保留起来<br>  // devtool:’cheap-module-source-map’,</p>
<p>  //不会产生文件,集成在打包后的文件中,不会产生列<br>  // devtool:’cheap-module-eval-source-map’,</p>
<h1 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a><strong>样式处理</strong></h1><h2 id="css-loader和style-loader"><a href="#css-loader和style-loader" class="headerlink" title="css-loader和style-loader"></a><strong>css-loader和style-loader</strong></h2><p>入口文件index.js中需要引入用到的css文件</p>
<p>css-loader: 解析@import这种语法的</p>
<p>style-loader:把css插入到head的标签中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在index.js中引入css文件require(&#39;....&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#x2F;&#x2F;多个loader需要[],loader的加载顺序默认是从右向左,从下到上执行</span><br><span class="line">        &#x2F;&#x2F;loader还可以写成对象方式(好处是可以传参数)</span><br><span class="line">        &#123;test:&#x2F;\.css$&#x2F;,use:[</span><br><span class="line">            &#123;</span><br><span class="line">                loader:&#39;style-loader&#39;</span><br><span class="line">             &#125;,</span><br><span class="line">            &#39;css-loader&#39;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>抽离css样式到文件</strong></p>
<p>使用 mini-css-extract-plugin 插件,使用这个插件不会压缩css文件,</p>
<p>需要使用 optimize-css-assets-webpack-plugin 插件,注意:</p>
<p>使用了该插件后,js文件就不会压缩了,需另下载 uglifyjs-webpack-plugin 插件</p>
<p>自动给css添加浏览器前缀:</p>
<p>npm install postcss-loader autoprefixer -D</p>
<p>使用autoprefixer需要添加一个postcss.config.js的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    plugins:[require(&#39;autoprefixer&#39;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install mini-css-extract-plugin -D  &#x2F;&#x2F;抽离css插件</span><br><span class="line">npm install uglifyjs-webpack-plugin -D   &#x2F;&#x2F;js压缩插件</span><br><span class="line">npm install optimize-css-assets-webpack-plugin -D &#x2F;&#x2F;css压缩插件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给css样式添加浏览器后缀</span><br><span class="line">npm install postcss-loader autoprefixer -D   </span><br><span class="line"></span><br><span class="line">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class="line">let UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;)</span><br><span class="line">let OptimizeCss &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    </span><br><span class="line">optimization:&#123; &#x2F;&#x2F;优化项,webpack4新增</span><br><span class="line">    minimizer:[</span><br><span class="line">        new UglifyJsPlugin(&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCss()</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename:&#39;main.css&#39;,        &#x2F;&#x2F;抽离出的css文件的名字</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;test:&#x2F;\.css$&#x2F;,use:[</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line">                &#39;css-loader&#39;,</span><br><span class="line">                &#39;postcss-loader&#39;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a><strong>压缩文件</strong></h1><h1 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a><strong>Loaders</strong></h1><p>类型:</p>
<ul>
<li>pre:强制loader,最先执行</li>
<li>post:最后执行</li>
<li>normal:普通loader,在pre之后,post之前</li>
<li>内联loader(expose-loader):pre前面执行的loader</li>
</ul>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.js$&#x2F;,</span><br><span class="line">    use:&#123;&#125;,</span><br><span class="line">    enforce:&#39;pre | post | normal&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a><strong>url-loader</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;用于将一些小的图片转成base64的形式.</span><br><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install --save-dev url-loader    </span><br><span class="line">&#x2F;&#x2F;--save-dev 安装完成后记录到package.json文件中</span><br><span class="line">&#x2F;&#x2F;简写</span><br><span class="line">npm install url-loader -S</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [    &#x2F;&#x2F;规则</span><br><span class="line">      &#123; </span><br><span class="line">      test: &#x2F;\.(png|jpg|gif)$&#x2F;,  &#x2F;&#x2F;匹配  </span><br><span class="line">      use:[          &#x2F;&#x2F;使用的loader</span><br><span class="line">          &#123;</span><br><span class="line">              loader:&quot;url-loader&quot;,</span><br><span class="line">              options:&#123;</span><br><span class="line">                  limit:8192          &#x2F;&#x2F;图片小于8kb使用该loader</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ]&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a><strong>sass-loader</strong></h2><p>sass语法转为css语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;css-loader和style-loader的安装</span><br><span class="line">npm install style-loader css-loader -D</span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.s[ac]ss$&#x2F;i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x2F;&#x2F; Creates &#96;style&#96; nodes from JS strings</span><br><span class="line">          &#39;style-loader&#39;,</span><br><span class="line">          &#x2F;&#x2F; Translates CSS into CommonJS</span><br><span class="line">          &#39;css-loader&#39;,</span><br><span class="line">          &#x2F;&#x2F; Compiles Sass to CSS</span><br><span class="line">          &#39;sass-loader&#39;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ES6转化</strong></p>
<h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a><strong>babel-loader</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line"></span><br><span class="line">npm install babel-loader @babel&#x2F;core @babel&#x2F;preset-env -D</span><br><span class="line"></span><br><span class="line">npm install --save-dev @babel&#x2F;plugin-transform-runtime</span><br><span class="line"></span><br><span class="line">npm install --save @babel&#x2F;runtime</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需要在文件中引入 require(&#39;@babel&#x2F;polyfill&#39;)</span><br><span class="line">npm install @babel&#x2F;polyfill -S</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [    &#x2F;&#x2F;规则</span><br><span class="line">      &#123; </span><br><span class="line">      test: &#x2F;\.m?js$&#x2F;,  &#x2F;&#x2F;匹配</span><br><span class="line">      exclude: &#x2F;(node_modules|bower_components)&#x2F;, &#x2F;&#x2F;排除的文件 </span><br><span class="line">      use:[          &#x2F;&#x2F;使用的loader</span><br><span class="line">          &#123;</span><br><span class="line">              loader:&quot;babel-loader&quot;,</span><br><span class="line">              options:&#123;</span><br><span class="line">                  presets:[&#39;@babel&#x2F;preset-env&#39;],</span><br><span class="line">                  plugins:[</span><br><span class="line">                      &#39;&#39;</span><br><span class="line">                  ]    &#x2F;&#x2F;引入插件</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ]&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a><strong>ESlint</strong></h1><p>代码测试的时候用</p>
<p>官网:<a href="https://eslint.bootcss.com/">https://eslint.bootcss.com/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install eslint eslint-loader -D</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">           test:&#x2F;\.js$&#x2F;,</span><br><span class="line">           enforce:&#39;pre&#39;,   &#x2F;&#x2F;最先执行这个loader</span><br><span class="line">           use:&#123;</span><br><span class="line">               loader:&#39;eslint-loader&#39;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="全局变量引入问题"><a href="#全局变量引入问题" class="headerlink" title="全局变量引入问题"></a><strong>全局变量引入问题</strong></h1><p>以jquery为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;npm install expose-loader -D</span><br><span class="line">&#x2F;&#x2F;index.js文件中 expose-loader暴露全局的loader,把jquery挂载到</span><br><span class="line">&#x2F;&#x2F;window对象上</span><br><span class="line">import $ from &#39;expose-loader?$!jquery&#39;</span><br><span class="line">console.log(window.$);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在配置文件中配置的方法一</span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">        test:require.resolve(&#39;jquery&#39;),</span><br><span class="line">        use:&#39;expose-loader?$&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在配置文件中配置的方法二</span><br><span class="line">&#x2F;&#x2F;webpack的内置插件-- ProvidePlugin(提供插件,在每个模块中都注入$)</span><br><span class="line">&#x2F;&#x2F;index.js中使用 import $ from &#39;jquery&#39;</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">plugins:[</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $:&#39;jquery&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在配置文件中的配置方法三</span><br><span class="line">&#x2F;&#x2F;index.js中使用 import $ from &#39;jquery&#39;</span><br><span class="line">externals:&#123;       &#x2F;&#x2F;打包时忽略的模块</span><br><span class="line">    jquery:&#39;$&#39;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="插件-Plugin"><a href="#插件-Plugin" class="headerlink" title="插件(Plugin)"></a><strong>插件(Plugin)</strong></h1><p>插件都是类</p>
<h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a><strong>DefinePlugin</strong></h2><p>创建一个编译时可以配置的全局常量。编写代码的时候可以使用这个变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const webpack &#x3D; require(&quot;webpack&quot;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    plugins:[ </span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            PRODUCTION: JSON.stringify(true),</span><br><span class="line">            VERSION: JSON.stringify(&quot;5fa3b9&quot;),</span><br><span class="line">            BROWSER_SUPPORTS_HTML5: true,</span><br><span class="line">            TWO: &quot;1+1&quot;,</span><br><span class="line">            &quot;typeof window&quot;: JSON.stringify(&quot;object&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a><strong>HtmlWebpackPlugin</strong></h2><p>简化HTML文件的创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install --save-dev html-webpack-plugin</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">var HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;.&#x2F;dist&#39;),</span><br><span class="line">    filename: &#39;index_bundle.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">          title:&quot;Hello&quot;,            &#x2F;&#x2F;输出HTML文件的标题</span><br><span class="line">          filename:&#39;index.html&#39;,      &#x2F;&#x2F;输出文件名字</span><br><span class="line">          template:&#39;template.html&#39;,   &#x2F;&#x2F;输出html文件的模板</span><br><span class="line">          minify:&#123;         &#x2F;&#x2F;压缩HTML</span><br><span class="line">              removeAttributeQuotes:true,  &#x2F;&#x2F;删除节点属性的双引号</span><br><span class="line">              collapseWhitespace:true,    &#x2F;&#x2F;折叠空行</span><br><span class="line">          &#125;,</span><br><span class="line">          hash:true,     &#x2F;&#x2F;给引入的文件加上hash戳(缓存问题)</span><br><span class="line">      &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;template.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;%&#x3D; htmlWebpackPlugin.options.title %&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#x2F;&#x2F;自定义元素,还可以自己引入一些js文件</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h1 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a><strong>图片处理</strong></h1><p>npm install file-loader -D</p>
<p>npm install url-loader -D</p>
<ol>
<li>在js中创建图片来引入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">&#x2F;&#x2F;file-loader默认会在内部生成一张图片,到build目录下,把生成的图片</span><br><span class="line">&#x2F;&#x2F;的名字返回</span><br><span class="line">&#x2F;&#x2F;把图片引入,返回结果是一个新的图片地址</span><br><span class="line">import logo from &#39;.&#x2F;1.jpg&#39;</span><br><span class="line">let image &#x3D; new Image();</span><br><span class="line">&#x2F;&#x2F;image.src &#x3D; &#39;.&#x2F;logo.png&#39;   &#x2F;&#x2F;这样写就是一个普通字符串</span><br><span class="line">image.src &#x3D; logo;</span><br><span class="line">document.body.appendChild(image);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">        test:&#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:&#39;file-loader&#39;,</span><br><span class="line">          options:&#123;</span><br><span class="line">            name:&#39;.&#x2F;[name].[ext]&#39;       &#x2F;&#x2F;将图片拷到dist目录下</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在css中引入background:url()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;注意:入口文件中要引入该样式</span><br><span class="line">&#x2F;&#x2F;配置了file-loader后自动处理图片</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    background: url(&quot;.&#x2F;1.jpg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><img src=''>标签中使用图片</li>
</ol>
<p><img>标签中的图片不会被webpack打包</p>
<h1 id="热替换-DevServer"><a href="#热替换-DevServer" class="headerlink" title="热替换(DevServer)"></a><strong>热替换(DevServer)</strong></h1><p>webpack4中不需要配置hot:true  (默认支持热替换,如果配置了会报错)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install webpack-dev-server -D</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本配置</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase: path.join(__dirname, &quot;dist&quot;), </span><br><span class="line">      &#x2F;&#x2F;&quot;dist&quot;为output输出路径 </span><br><span class="line">      compress: true,</span><br><span class="line">      port: 9000,</span><br><span class="line">      open:true,      &#x2F;&#x2F;是否自动打开浏览器</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动webpack-dev-server</span><br><span class="line">&#x2F;&#x2F;配置package.json的scripts属性</span><br><span class="line">scripts:&#123;</span><br><span class="line">    &quot;start&quot;:&quot;webpack-dev-server&quot;   </span><br><span class="line">    &#x2F;&#x2F;命令行窗口输入npm run start会启动webpack-dev-server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a><strong>打包多页应用</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode:&quot;development&quot;,</span><br><span class="line">  &#x2F;&#x2F;多入口</span><br><span class="line">  entry:&#123;</span><br><span class="line">    home:&#39;.&#x2F;src&#x2F;home.js&#39;,</span><br><span class="line">    other:&#39;.&#x2F;src&#x2F;other.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;                            &#x2F;&#x2F;出口文件</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;[name].js&#39;,</span><br><span class="line">  &#125;, </span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, &quot;dist&quot;), </span><br><span class="line">    compress: true,</span><br><span class="line">    port: 9000,   </span><br><span class="line">  &#125;, </span><br><span class="line">  plugins:[</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename:&#39;home.html&#39;,   </span><br><span class="line">      template:&#39;.&#x2F;src&#x2F;home.html&#39;, </span><br><span class="line">      chunks:[&#39;home&#39;]  &#x2F;&#x2F;只引入自己的js文件,不写就会全部引入</span><br><span class="line"></span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename:&#39;other.html&#39;,   </span><br><span class="line">      template:&#39;.&#x2F;src&#x2F;other.html&#39;, </span><br><span class="line">      chunks:[&#39;other&#39;]  </span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>Webpack4.0</category>
      </categories>
      <tags>
        <tag>Webpack4.0</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--Generator函数</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/16%E3%80%81Generator.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。<br>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>Generator函数的特征：</p>
<ol>
<li><code>function</code>关键字后面紧跟一个星号</li>
<li>函数体内部使用<code>yield</code>表达式</li>
</ol>
<p>例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Generator函数内有三个状态</span></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>调用Generator函数后会返回一个遍历器对象，然后调用next方法将指针移向下一个状态。<br>Generator函数是分段执行的，<code>yield</code>表达式是暂停执行的标记,而<code>next</code>方法可以恢复执行</p>
</blockquote>
<h1 id="yield表达式"><a href="#yield表达式" class="headerlink" title="yield表达式"></a>yield表达式</h1><p>由于 Generator 函数返回的遍历器对象，只有调用<code>next</code>方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。<code>yield</code>表达式就是暂停标志。</p>
<p>遍历器对象的<code>next</code>方法运行逻辑如下:</p>
<p>（1）遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</p>
<p>（2）下一次调用<code>next</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。</p>
<p>（3）如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</p>
<p>（4）如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</p>
<p><code>yield</code>表达式与<code>return</code>语句的区别:</p>
<ul>
<li>每次遇到<code>yield</code>，函数暂停执行，下一次再从该位置继续向后执行，而<code>return</code>语句不具备位置记忆的功能。</li>
<li>一个函数里面，只能执行一次（或者说一个）<code>return</code>语句，但是可以执行多次（或者说多个）<code>yield</code>表达式。</li>
<li>正常函数只能返回一个值，因为只能执行一次<code>return</code>；</li>
</ul>
<p><code>yield</code>用法:</p>
<ul>
<li><p><code>yield</code>表达式如果用在另一个表达式之中，必须放在圆括号里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + <span class="keyword">yield</span>); <span class="comment">// SyntaxError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + <span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + (<span class="keyword">yield</span>)); <span class="comment">// OK</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + (<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>yield</code>后面可以调用普通函数(Generator函数需要使用<code>yield</code>)</p>
</li>
<li><p><code>yield</code>表达式用作函数参数或放在赋值表达式的右边，可以不加括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo(<span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>, <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line">  <span class="keyword">let</span> input = <span class="keyword">yield</span>; <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h1><p><strong><code>yield</code>表达式本身没有返回值，或者说总是返回<code>undefined</code></strong>。<br><code>next</code>方法可以带一个参数，该参数就会被当作上一个<code>yield</code>表达式的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gentrator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">    <span class="keyword">let</span> first = (<span class="keyword">yield</span> (<span class="number">1</span>+<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(first);</span><br><span class="line">    <span class="keyword">let</span> two = (<span class="keyword">yield</span> + first);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen = gentrator();</span><br><span class="line">gen.next(<span class="number">1</span>); <span class="comment">//Object &#123; value: undefined, done: false &#125;</span></span><br><span class="line">gen.next(<span class="number">1</span>); <span class="comment">//Object &#123; value: 3, done: false &#125;,first值为1</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">    <span class="keyword">if</span>(reset) &#123; i = -<span class="number">1</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(<span class="literal">true</span>) <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果<code>next</code>方法没有参数，每次运行到<code>yield</code>表达式，变量<code>reset</code>的值总是<code>undefined</code>。当<code>next</code>方法带一个参数<code>true</code>时，变量<code>reset</code>就被重置为这个参数（即<code>true</code>），因此<code>i</code>会等于<code>-1</code>，下一轮循环就会从<code>-1</code>开始递增。</p>
</blockquote>
<p>注意，由于<code>next</code>方法的参数表示上一个<code>yield</code>表达式的返回值，所以在第一次使用<code>next</code>方法时，传递参数是无效的。V8 引擎直接忽略第一次使用<code>next</code>方法时的参数，只有从第二次使用<code>next</code>方法开始，参数才是有效的。从语义上讲，第一个<code>next</code>方法用来启动遍历器对象，所以不用带有参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">dataConsumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Started&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`1.<span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> genObj = dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line"><span class="comment">// Started</span></span><br><span class="line">genObj.next(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">// 1. a</span></span><br><span class="line">genObj.next(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. b</span></span><br></pre></td></tr></table></figure>
<h1 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h1><p><code>for...of</code>循环可以自动遍历 Generator 函数运行时生成的<code>Iterator</code>对象，且此时不再需要调用<code>next</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，一旦<code>next</code>方法的返回对象的<code>done</code>属性为<code>true</code>，<code>for...of</code>循环就会中止，且不包含该返回对象，所以上面代码的<code>return</code>语句返回的<code>6</code>，不包括在<code>for...of</code>循环之中。</p>
</blockquote>
<h1 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h1><p>Generator 函数返回的遍历器对象，都有一个<code>throw</code>方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。</p>
<blockquote>
<p><code>throw</code>方法抛出的错误要被内部捕获，前提是必须至少执行过一次<code>next</code>方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;内部捕获&#x27;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">  i.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;外部捕获&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>遍历器对象<code>i</code>连续抛出两个错误。第一个错误被 Generator 函数体内的<code>catch</code>语句捕获。<code>i</code>第二次抛出错误，由于 Generator 函数内部的<code>catch</code>语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的<code>catch</code>语句捕获。<strong>之所以不会被Generator函数体内的catch语句捕获是因为yield表达式已经全部执行完了,即不可能再有错误发生了</strong></p>
</blockquote>
<p>如果Generator函数内部没有部署<code>try...catch</code>代码块，那么<code>throw</code>方法抛出的错误，将被外部<code>try...catch</code>代码块捕获。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;内部捕获&#x27;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  i.throw(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;外部捕获&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部捕获 a</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果Generator函数内部和外部都没有部署<code>try...catch</code>代码块，那么程序将报错，直接中断执行。</p>
</blockquote>
<p><code>throw</code>方法被捕获以后，会附带执行下一条<code>yield</code>表达式。也就是说，会附带执行一次<code>next</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line">g.next() <span class="comment">// a</span></span><br><span class="line">g.throw() <span class="comment">// b</span></span><br><span class="line">g.next() <span class="comment">// c</span></span><br></pre></td></tr></table></figure>
<p>Generator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的<code>catch</code>捕获。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> y = x.toUpperCase();</span><br><span class="line">  <span class="keyword">yield</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = foo();</span><br><span class="line"></span><br><span class="line">it.next(); <span class="comment">// &#123; value:3, done:false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  it.next(<span class="number">42</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h1><p>Generator 函数返回的遍历器对象，还有一个<code>return</code>方法，可以返回给定的值，并且终结遍历 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return(<span class="string">&#x27;foo&#x27;</span>) <span class="comment">// &#123; value: &quot;foo&quot;, done: true &#125;</span></span><br><span class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<p>如果<code>return</code>方法调用时，不提供参数，则返回值的<code>value</code>属性为<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>


<p>如果 Generator 函数内部有<code>try...finally</code>代码块，且正在执行<code>try</code>代码块，那么<code>return</code>方法会导致立刻进入<code>finally</code>代码块，执行完以后，整个函数才会结束。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = numbers();</span><br><span class="line">g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.return(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="next-、throw-、return-的共同点"><a href="#next-、throw-、return-的共同点" class="headerlink" title="next()、throw()、return() 的共同点"></a>next()、throw()、return() 的共同点</h1><p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p>
<p><code>next()</code>是将<code>yield</code>表达式替换成一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> add = <span class="keyword">yield</span> x+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> add + y;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = g(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">gen.next(); <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line"></span><br><span class="line">gen.next(<span class="number">4</span>); <span class="comment">// Object &#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="comment">// 相当于将 let add = yield x + 1</span></span><br><span class="line"><span class="comment">// 替换成 let add = 4;</span></span><br><span class="line">gen.next(<span class="number">5</span>);   <span class="comment">//Object &#123; value: 5, done: true &#125;</span></span><br><span class="line"><span class="comment">// 相当于将 let result = yield add + y</span></span><br><span class="line"><span class="comment">// 替换成 let result = 5;</span></span><br></pre></td></tr></table></figure>
<p><code>throw()</code>是将<code>yield</code>表达式替换成一个<code>throw</code>语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gen.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>)); <span class="comment">// Uncaught Error: 出错了</span></span><br><span class="line"><span class="comment">// 相当于将 let result = yield add + y</span></span><br><span class="line"><span class="comment">// 替换成 let result = throw(new Error(&#x27;出错了&#x27;));</span></span><br></pre></td></tr></table></figure>
<p><code>return()</code>是将<code>yield</code>表达式替换成一个<code>return</code>语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gen.return(<span class="number">2</span>); <span class="comment">// Object &#123;value: 2, done: true&#125;</span></span><br><span class="line"><span class="comment">// 相当于将 let result = yield add + y</span></span><br><span class="line"><span class="comment">// 替换成 let result = return 2;</span></span><br></pre></td></tr></table></figure>
<h1 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h1><p>如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;open&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;close&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = outer1()</span><br><span class="line">gen.next().value <span class="comment">// &quot;open&quot;</span></span><br><span class="line">gen.next().value <span class="comment">// 返回一个遍历器对象</span></span><br><span class="line">gen.next().value <span class="comment">// &quot;close&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;open&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span>* inner()</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;close&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = outer2()</span><br><span class="line">gen.next().value <span class="comment">// &quot;open&quot;</span></span><br><span class="line">gen.next().value <span class="comment">// &quot;hello!&quot;</span></span><br><span class="line">gen.next().value <span class="comment">// &quot;close&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面例子中，<code>outer2</code>使用了<code>yield*</code>，<code>outer1</code>没使用。结果就是，<code>outer1</code>返回一个遍历器对象，<code>outer2</code>返回该遍历器对象的内部值。</p>
</blockquote>
<p><code>yield*</code>后面的 Generator 函数（没有<code>return</code>语句时），等同于在 Generator 函数内部，部署一个<code>for...of</code>循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* iter1;</span><br><span class="line">  <span class="keyword">yield</span>* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">concat</span>(<span class="params">iter1, iter2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter2) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>yield*</code>后面的 Generator 函数（没有<code>return</code>语句时），不过是<code>for...of</code>的一种简写形式，完全可以用后者替代前者。反之，在有<code>return</code>语句时，则需要用<code>var value = yield* iterator</code>的形式获取<code>return</code>语句的值。</p>
</blockquote>
<p>如果<code>yield*</code>后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen().next() <span class="comment">// &#123; value:&quot;a&quot;, done:false &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>实际上，任何数据结构只要有 Iterator 接口，就可以被<code>yield*</code>遍历。</p>
</blockquote>
<h1 id="作为对象属性的Generator函数"><a href="#作为对象属性的Generator函数" class="headerlink" title="作为对象属性的Generator函数"></a>作为对象属性的Generator函数</h1><p>如果一个对象的属性是 Generator 函数，可以简写成下面的形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  * <span class="function"><span class="title">myGeneratorMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>myGeneratorMethod</code>属性前面有一个星号，表示这个属性是一个 Generator 函数。</p>
<p>它的完整形式如下，与上面的写法是等价的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  myGeneratorMethod: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ···</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Generator函数的this"><a href="#Generator函数的this" class="headerlink" title="Generator函数的this"></a>Generator函数的this</h1><p>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的<code>prototype</code>对象上的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hi!&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = g();</span><br><span class="line"></span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">// true</span></span><br><span class="line">obj.hello() <span class="comment">// &#x27;hi!&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码表明，Generator 函数<code>g</code>返回的遍历器<code>obj</code>，是<code>g</code>的实例，而且继承了<code>g.prototype</code>。但是，如果把<code>g</code>当作普通的构造函数，并不会生效，因为<code>g</code>返回的总是遍历器对象，而不是<code>this</code>对象。</p>
</blockquote>
<p>Generator 函数也不能跟<code>new</code>命令一起用，会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">this</span>.x = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">this</span>.y = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> F()</span><br><span class="line"><span class="comment">// TypeError: F is not a constructor</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>new</code>命令跟构造函数<code>F</code>一起使用，结果报错，因为<code>F</code>不是构造函数。</p>
</blockquote>
<p>让 Generator 函数返回一个正常的对象实例，既可以用<code>next</code>方法，又可以获得正常的<code>this</code>的变通方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">this</span>.b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">this</span>.c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gen.call(gen.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 3, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">f.a <span class="comment">// 1</span></span><br><span class="line">f.b <span class="comment">// 2</span></span><br><span class="line">f.c <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="控制流程管理"><a href="#控制流程管理" class="headerlink" title="控制流程管理"></a>控制流程管理</h2><p>如果有一个多步操作非常耗时，采用回调函数，可能会写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do something with value4</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Generator 函数可以进一步改善代码运行流程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">longRunningTask</span>(<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value2 = <span class="keyword">yield</span> step1(value1);</span><br><span class="line">    <span class="keyword">var</span> value3 = <span class="keyword">yield</span> step2(value2);</span><br><span class="line">    <span class="keyword">var</span> value4 = <span class="keyword">yield</span> step3(value3);</span><br><span class="line">    <span class="keyword">var</span> value5 = <span class="keyword">yield</span> step4(value4);</span><br><span class="line">    <span class="comment">// Do something with value4</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// Handle any error from step1 through step4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，使用一个函数，按次序自动执行所有步骤。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scheduler(longRunningTask(initialValue));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduler</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> taskObj = task.next(task.value);</span><br><span class="line">  <span class="comment">// 如果Generator函数未结束，就继续调用</span></span><br><span class="line">  <span class="keyword">if</span> (!taskObj.done) &#123;</span><br><span class="line">    task.value = taskObj.value</span><br><span class="line">    scheduler(task);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，上面这种做法，只适合同步操作，即所有的<code>task</code>都必须是同步的，不能有异步操作。因为这里的代码一得到返回值，就继续往下执行，没有判断异步操作何时完成。</p>
</blockquote>
<p>下面，利用<code>for...of</code>循环会自动依次执行<code>yield</code>命令的特性，提供一种更一般的控制流管理的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> steps = [step1Func, step2Func, step3Func];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterateSteps</span>(<span class="params">steps</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; steps.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> step = steps[i];</span><br><span class="line">    <span class="keyword">yield</span> step();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，数组<code>steps</code>封装了一个任务的多个步骤，Generator 函数<code>iterateSteps</code>则是依次为这些步骤加上<code>yield</code>命令。</p>
</blockquote>
<p>将任务分解成步骤之后，还可以将项目分解成多个依次执行的任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jobs = [job1, job2, job3];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterateJobs</span>(<span class="params">jobs</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; jobs.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> job = jobs[i];</span><br><span class="line">    <span class="keyword">yield</span>* iterateSteps(job.steps);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码中，数组<code>jobs</code>封装了一个项目的多个任务，Generator 函数<code>iterateJobs</code>则是依次为这些任务加上<code>yield*</code>命令。</p>
</blockquote>
<p>最后，就可以用<code>for...of</code>循环一次性依次执行所有任务的所有步骤。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> step <span class="keyword">of</span> iterateJobs(jobs))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(step.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再次提醒，上面的做法只能用于所有步骤都是同步操作的情况，不能有异步操作的步骤。如果想要依次执行异步的步骤，必须使用后面的《异步操作》一章介绍的方法。</p>
</blockquote>
<p><code>for...of</code>的本质是一个<code>while</code>循环，所以上面的代码实质上执行的是下面的逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = iterateJobs(jobs);</span><br><span class="line"><span class="keyword">var</span> res = it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!res.done)&#123;</span><br><span class="line">  <span class="keyword">var</span> result = res.value;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  res = it.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="部署Iterator接口"><a href="#部署Iterator接口" class="headerlink" title="部署Iterator接口"></a>部署Iterator接口</h2><p>利用 Generator 函数，可以在任意对象上部署 Iterator 接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterEntries(myObj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 3</span></span><br><span class="line"><span class="comment">// bar 7</span></span><br></pre></td></tr></table></figure>


<h2 id="作为数据结构"><a href="#作为数据结构" class="headerlink" title="作为数据结构"></a>作为数据结构</h2><p>Generator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> fs.readFile.bind(<span class="literal">null</span>, <span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> fs.readFile.bind(<span class="literal">null</span>, <span class="string">&#x27;world.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> fs.readFile.bind(<span class="literal">null</span>, <span class="string">&#x27;and-such.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码就是依次返回三个函数，但是由于使用了 Generator 函数，导致可以像处理数组那样，处理这三个返回的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (task <span class="keyword">of</span> doStuff()) &#123;</span><br><span class="line">  <span class="comment">// task是一个函数，可以像回调函数那样使用它</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--对象的扩展</title>
    <url>/%E5%89%8D%E7%AB%AF/Ecmascript6/9%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h1><p>ES6允许直接写入变量和函数,作为对象的属性和方法.(这在之前是不允许的)<br>直接写入变量:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;</span><br><span class="line">baz <span class="comment">// &#123;foo: &quot;bar&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当属性名与变量名相等时可以只写一个属性名</span></span><br></pre></td></tr></table></figure>


<p>方法的简写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果某个方法的值是一个Generator函数,前面需要加上星号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  * <span class="function"><span class="title">m</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h1><p>JavaScript定义对象的属性:</p>
<ul>
<li>方法一: <code>obj.foo = true</code>;</li>
<li>方法二(属性名表达式): <code>obj[&#39;a&#39; + &#39;bc&#39;] = 123</code>;</li>
</ul>
<p>中括号中还可以放入变量名<br>ES6之前,使用字面量方式定义对象(使用大括号),只能使用方法一的形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="literal">true</span>,</span><br><span class="line">  abc: <span class="number">123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ES6允许字面量定义对象时,用方法二作为对象的属性名,即把表达式放在方括号内:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用方法二定义方法名:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hello() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:</p>
<ul>
<li>属性名表达式不能与简洁表达式同时使用</li>
<li>属性名表达式如果是一个对象,默认情况下会自动转为字符串[object,object],(会覆盖掉别的属性名表达式为对象的值)</li>
</ul>
</blockquote>
<h1 id="方法的name属性"><a href="#方法的name属性" class="headerlink" title="方法的name属性"></a>方法的name属性</h1><p>函数的name属性,返回函数名. 对象方法也是函数,因此也有name属性</p>
<p>如果对象的方法使用了取值函数(getter)和存值函数(setter),则name属性不是在该方法上面,而是该方法的属性的描述对象get和set属性上面,返回值是方法名前加上get和set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">foo</span>() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">foo</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo.name</span><br><span class="line"><span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// &quot;get foo&quot;</span></span><br><span class="line">descriptor.set.name <span class="comment">// &quot;set foo&quot;</span></span><br></pre></td></tr></table></figure>
<p>特殊情况:</p>
<ul>
<li>bind方法创造的函数,name属性返回bound加上原函数的名字</li>
<li>Function构造函数创造的函数,name属性返回anonymous</li>
<li>如果对象的方法是一个Symbol,那么name属性返回的是这个Symbol值的描述</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name <span class="comment">// &quot;[description]&quot;</span></span><br><span class="line">obj[key2].name <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="属性的可枚举性和遍历"><a href="#属性的可枚举性和遍历" class="headerlink" title="属性的可枚举性和遍历"></a>属性的可枚举性和遍历</h1><h2 id="可枚举性"><a href="#可枚举性" class="headerlink" title="可枚举性"></a>可枚举性</h2><p>对象的每个属性都有一个描述对象(Descriptor),用来控制该属性的行为.</p>
<p>ES5的<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象.</p>
<p>描述对象的enumerable属性,称为”可枚举性”,如果该属性为false,就表示某些操作会忽略当前属性</p>
<p>目前,有四个操作会忽略enumerable为false的属性:</p>
<ul>
<li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li>
<li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li>
<li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li>
<li><code>Object.assign()</code>： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li>
</ul>
<p>上面四个方法中,只有for…in会返回继承的属性,其他三个方法都会忽略继承的属性,只处理对象自身的属性<br><strong>注意:</strong><br>所有 Class 的原型的方法都是不可枚举的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="class"><span class="keyword">class</span></span>&#123;<span class="function"><span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;&#125;.prototype, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">.enumerable</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><p>ES6一共有5中方法可以遍历对象的属性</p>
<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）</p>
<h3 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h3><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p>
<h3 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h3><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p>
<h3 id="Object-getOwnPropertySymbols-obj"><a href="#Object-getOwnPropertySymbols-obj" class="headerlink" title="Object.getOwnPropertySymbols(obj)"></a>Object.getOwnPropertySymbols(obj)</h3><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p>
<h3 id="Reflect-ownKeys-obj"><a href="#Reflect-ownKeys-obj" class="headerlink" title="Reflect.ownKeys(obj)"></a>Reflect.ownKeys(obj)</h3><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。<br>以上的5种方法遍历对象的键名,都遵守同样的属性遍历的次序规则:</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列。</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// [&#x27;2&#x27;, &#x27;10&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, Symbol()]</span></span><br></pre></td></tr></table></figure>
<h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><p>super关键字指向当前对象的原型对象</p>
<p><strong>注意:</strong><br>该关键字只有用在对象方法的简写法里面才有效,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法简写法</span></span><br><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h1><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>扩展运算符用于解构赋值,必须位于最后一个参数,会将所有为被读取的属性和值一起拷贝到新对象上面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null,就会报错,因为它们无法转为对象</li>
<li>扩展运算符的解构赋值不能复制继承自原型的属性</li>
<li>解构赋值的拷贝是浅拷贝</li>
</ul>
<p>解构赋值还可以用于扩展某个函数的参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFunction</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapperFunction</span>(<span class="params">&#123; x, y, ...restConfig &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 x 和 y 参数进行操作</span></span><br><span class="line">  <span class="comment">// 其余参数传给原始函数</span></span><br><span class="line">  <span class="keyword">return</span> baseFunction(restConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>对象的扩展运算符 ( … ) 用于取出参数对象的所有可遍历属性,拷贝到当前对象之中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span><br><span class="line">n <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>
<p>由于数组是特殊的对象,所以对象的扩展运算符也可以用于数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; ...[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] &#125;;</span><br><span class="line">foo</span><br><span class="line"><span class="comment">// &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>规则:</strong></p>
<ul>
<li>如果扩展运算符后面是一个空对象,则没有任何效果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;...&#123;&#125;, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果扩展运算符后面不是对象,则会自动将其转为对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于 &#123;...Object(1)&#125;</span></span><br><span class="line">&#123;..<span class="number">.1</span>&#125; <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果扩展运算符后面是字符串,它会自动转成一个类似数组的对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;...<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// &#123;0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用写法一和写法二</span></span><br></pre></td></tr></table></figure>
<p>扩展运算符等同于使用<code>Object.assign()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aClone = &#123; ...a &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aClone = <span class="built_in">Object</span>.assign(&#123;&#125;, a);</span><br></pre></td></tr></table></figure>
<p>扩展运算符可以用于合并两个对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>如果用户自定义的属性,放在扩展运算符后面,则扩展运算符内部的同名属性会被覆盖掉</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line">x    <span class="comment">//1</span></span><br><span class="line">y    <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。</li>
<li>与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  ...(x &gt; <span class="number">1</span> ? &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; : &#123;&#125;),</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/dc0f131b73a08bbf08b5e96faaf768e6/0" alt="img">             </p>
<h1 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h1><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p>ES5 比较两个值是否相等，只有两个运算符：相等运算符 ( == ) 和严格相等运算符 ( === ) ,它们都有缺点，前者会自动转换数据类型,后者的<code>NaN</code>不等于自身,以及+0 等于 -0</p>
<p>JavaScript缺乏一种算法在所有环境中，只要两个值是一样的，它们就应该相等。<br>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<br><code>Object.is()</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>该方法中 +0不等于-0</li>
<li><code>NaN</code>等于自身</li>
</ul>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h3><p><code>Object.assign</code>方法用于对象的合并,将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br><code>Object.assign</code>方法的第一个参数是目标对象,后面的所有参数都是源对象</p>
<ul>
<li>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>如果只有一个参数,Object.assign方法会直接返回该参数</li>
<li>如果该参数不是对象，则会先转成对象，然后返回。</li>
<li>由于undefined和null无法转为对象,所以如果他们作为参数(首参数)会报错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首参数</span></span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">undefined</span>) <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">null</span>) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非首参数</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">undefined</span>) === obj <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">null</span>) === obj <span class="comment">// true</span></span><br><span class="line"><span class="comment">//非对象作为非首参数传入时,这些参数都会转为对象,如果无法转为对象,就会跳过</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错,除了字符串会以数组的形式拷贝入对象,其他值都不会产生效果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> v3 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span></span><br><span class="line"><span class="comment">//Object(true) // &#123;[[PrimitiveValue]]: true&#125;</span></span><br><span class="line"><span class="comment">//Object(10)  //  &#123;[[PrimitiveValue]]: 10&#125;</span></span><br><span class="line"><span class="comment">//Object(&#x27;abc&#x27;)//&#123;0:&quot;a&quot;,1:&quot;b&quot;,2:&quot;c&quot;,length:3,[[PrimitiveValue]]:&quot;abc&quot;&#125;</span></span><br><span class="line"><span class="comment">//PrimitiveValue不可以被枚举</span></span><br><span class="line"><span class="comment">//上面三种类型的值转换为包装对象后,只有字符串有可枚举的实义属性</span></span><br></pre></td></tr></table></figure>


<p><strong>注意:</strong></p>
<ul>
<li>浅拷贝: 如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = <span class="number">2</span>;</span><br><span class="line">obj2.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>同名属性的替换: 目标对象与一个或多个源对象有同名属性时,后面的属性会覆盖前面的</li>
<li>数组的处理: <code>Object.assign</code>方法会把数组当作对象处理(数组的索引即为对象的属性名)</li>
<li>取值函数的处理:<code>Object.assign</code>方法只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">foo</span>() &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; foo: 1 &#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>Object.assign</code>方法拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性(<code>enumerable:false</code>)</li>
<li>属性名为 Symbol 值的属性，也会被<code>Object.assign()</code>拷贝</li>
</ul>
<h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><p>1.为对象添加属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="built_in">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.为对象添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  <span class="function"><span class="title">someMethod</span>(<span class="params">arg1, arg2</span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">anotherMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3.克隆对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.合并多个对象</p>
<p>将多个对象合并到某个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>
<p>5.为属性指定默认值</p>
<p>利用同名属性替换的特点,可以将默认值对象写在前面,后面跟源对象</p>
<h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h2><p>ES5的<code>Object.getOwnPropertyDescriptor()</code>方法会返回某个对象属性的描述对象(descriptor)<br>ES2017引入了<code>Object.getOwnPropertyDescriptors()</code>方法,返回指定对象所有自身属性(非继承属性)的描述对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">bar</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>用处一:</strong></p>
<p>该方法的引入目的,主要是为了解决<code>Object.assign()</code>无法正确拷贝get属性和set属性的问题</p>
<p>使用<code>Object.getOwnPropertyDescriptor()</code>方法配合<code>Object.defineProperties()</code>方法,就可以实现正确拷贝:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const source &#x3D; &#123;</span><br><span class="line">  set foo(value) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const target2 &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));</span><br><span class="line">Object.getOwnPropertyDescriptor(target2, &#39;foo&#39;)</span><br><span class="line">&#x2F;&#x2F; &#123; get: undefined,</span><br><span class="line">&#x2F;&#x2F;   set: [Function: set foo],</span><br><span class="line">&#x2F;&#x2F;   enumerable: true,</span><br><span class="line">&#x2F;&#x2F;   configurable: true &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中,两个对象合并的逻辑可以写成一个函数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowMerge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> <span class="built_in">Object</span>.defineProperties(</span><br><span class="line">  target,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>用处二:</strong></p>
<p>配合<code>Object.create()</code>方法,将对象属性克隆到一个新对象(这属于浅拷贝).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clone = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>用处三:</strong></p>
<p>实现一个对象继承另一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(</span><br><span class="line">  prot,</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>用处四:</strong></p>
<p><code>Object.getOwnPropertyDescriptors()</code>可以实现<code>Mixin</code>(混入)模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mix = <span class="function">(<span class="params">object</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">with</span>: <span class="function">(<span class="params">...mixins</span>) =&gt;</span> mixins.reduce(</span><br><span class="line">    (c, mixin) =&gt; <span class="built_in">Object</span>.create(</span><br><span class="line">      c, <span class="built_in">Object</span>.getOwnPropertyDescriptors(mixin)</span><br><span class="line">    ), object)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiple mixins example</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">c</span>: <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = mix(c).with(a, b);</span><br><span class="line"></span><br><span class="line">d.c <span class="comment">// &quot;c&quot;</span></span><br><span class="line">d.b <span class="comment">// &quot;b&quot;</span></span><br><span class="line">d.a <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="proto-属性-Object-setPrototypeOf-Object-getPrototypeOf"><a href="#proto-属性-Object-setPrototypeOf-Object-getPrototypeOf" class="headerlink" title="_proto_属性,Object.setPrototypeOf(),Object.getPrototypeOf()"></a>_proto_属性,Object.setPrototypeOf(),Object.getPrototypeOf()</h2><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><em>proto</em></h3><p>_proto_属性(前后各两个下划线),用来读取或设置当前对象的prototype对象,所有浏览器都部署了这个属性<br>ES6规定,只有浏览器必须部署这个属性,其他运行环境不一定需要部署,而且新的代码最好认为这个属性是不存在的.   因此最好不要使用这个属性.</p>
<p>用下面的方法代替:</p>
<ul>
<li><code>Object.setPrototypeOf()</code>   (写操作)</li>
<li><code>Object.getPrototypeOf()</code>   (读操作)</li>
<li><code>Object.create()</code>     (生成操作)</li>
</ul>
<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf</code>方法的作用于_proto_相同,用来设置一个对象的prototype对象,返回参数对象本身.   它是ES6正式推荐的设置原型对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(object, prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"><span class="comment">//将proto对象设为obj对象的原型</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>如果第一个参数不是对象,会自动转为对象.  但是由于返回的还是第一个参数,所以这个操作不会产生任何效果:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="number">1</span>, &#123;&#125;) === <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="string">&#x27;foo&#x27;</span>, &#123;&#125;) === <span class="string">&#x27;foo&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(<span class="literal">true</span>, &#123;&#125;) === <span class="literal">true</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由于undefined和null无法转为对象,所以如果第一个参数是undefined或null,就会报错</li>
</ul>
<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>该方法与<code>Object.setPrototypeOf()</code>方法配套,用于读取一个对象的原型对象</p>
<p>用法: <code>Object.getPrototypeOf(obj)</code></p>
<p><strong>注意:</strong></p>
<ul>
<li>如果参数不是对象,会自动转为对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(Number(1))</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// Number &#123;[[PrimitiveValue]]: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(String(&#x27;foo&#x27;))</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// String &#123;length: 0, [[PrimitiveValue]]: &quot;&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 Object.getPrototypeOf(Boolean(true))</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// Boolean &#123;[[PrimitiveValue]]: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">1</span>) === <span class="built_in">Number</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">&#x27;foo&#x27;</span>) === <span class="built_in">String</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="literal">true</span>) === <span class="built_in">Boolean</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果参数是undefined或null,他们无法转为对象,所以报错.</li>
</ul>
<h2 id="Object-keys-Object-values-Object-entries"><a href="#Object-keys-Object-values-Object-entries" class="headerlink" title="Object.keys() , Object.values() , Object.entries()"></a>Object.keys() , Object.values() , Object.entries()</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>该方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// [&quot;foo&quot;, &quot;baz&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>该方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, 42]</span></span><br></pre></td></tr></table></figure>
<p>返回数组的成员顺序为:</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列。</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li><code>Object.values</code>只返回对象自身的可遍历属性[不是显示声明的属性默认是不可遍历的]</li>
<li><code>Object.values</code>会过滤属性名为Symbol值的属性</li>
<li>如果<code>Object.values</code>方法的参数是一个字符串,会返回各个字符组成的一个数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果参数不是对象,<code>Object.values</code>会先将其转为对象,由于数值和布尔值的包装对象,都不会为实例添加非继承的属性,所以会返回空数组</li>
</ul>
<h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>该方法返回一个数组,成员是参数对象自身(不含继承的)所有可遍历属性的键值对数组<br>除了返回值不一样,该方法的行为与<code>Object.values</code>基本一致.</p>
<p><strong>用处一:</strong></p>
<p>将对象转为真正的Map结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line">map <span class="comment">// Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h2><p>该方法是<code>Object.entries()</code>的逆操作.用于将一个键值对数组转为对象.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>
<p>该方法的目的是将键值对的数据结构还原为对象,因此特别适合将Map结构转为对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.fromEntries(entries)</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>).set(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Object</span>.fromEntries(map)</span><br><span class="line"><span class="comment">// &#123; foo: true, bar: false &#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>用处二:</strong></p>
<p>配合<code>URLSearchParams</code>对象,将查询字符串转为对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries(<span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;foo=bar&amp;baz=qux&#x27;</span>))</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: &quot;qux&quot; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
