<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue2.0学习(二)---计算属性和监听属性</title>
    <url>/2019/12/03/vue2.0/Vue-Study2/</url>
    <content><![CDATA[<blockquote>
<p>两者都用来相应数据变化</p>
<p>计算属性适合于一些简单的运算</p>
<p>监听属性适用于异步加载数据或开销较大的操作</p>
</blockquote>
<a id="more"></a>

<h1 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性(computed)"></a>计算属性(computed)</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Orginal message:"&#123;&#123;message&#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message:"&#123;&#123;reversedMessage&#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	el:&quot;#example&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	data:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		message:&quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	computed:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		reversedMessage:function()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F;&#39;this&#39;指向vm实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">			return this.message.split(&#39;&#39;),reverse().join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F;该方法的执行依赖于this.message的值是否发生改版,这里不能设置message的值,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F;例如:this.message&#x3D;&quot;改变了&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F;但是获得message的值并进行一些操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;data中的message的值一旦发生改变,计算属性(computed)中的reversedMessage方法就会执行</span></pre></td></tr></table></figure>



<h2 id="计算属性与方法"><a href="#计算属性与方法" class="headerlink" title="计算属性与方法"></a>计算属性与方法</h2><ol>
<li><p>计算属性是基于他们的依赖关系进行缓存的,只有在依赖关系发生改变时他们才能更新变化。这意味着只要message没有发生变化,多次访问reverseMessage计算属性会立即返回之前的缓存结果，而不必再次执行函数,但是计算属性在页面渲染后就会执行一次</p>
</li>
<li><p>方法总会在每次触发重新渲染时调用函数</p>
</li>
</ol>
<h2 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h2><p>computed 属性默认只有get,不过在需要是也可以提供一个set<br>博主个人理解:计算属性可以有多个依赖属性</p>
<ul>
<li>get: 获取依赖的属性值</li>
<li>set:设置依赖的属性值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;部分代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">computed:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	num2:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		get:function()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			return this.num-1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		set:function(val)&#123;		&#x2F;&#x2F;接收设置的值,这里的val是一个形参,可以自己设置成别的</span></pre></td></tr><tr><td class="code"><pre><span class="line">			this.num &#x3D; val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">vm.num &#x3D; 111;          &#x2F;&#x2F;这里会先执行set函数进行赋值,然后再执行get函数,结果为110</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意:set函数肯定是给其依赖的属性赋值</span></pre></td></tr></table></figure>


<h1 id="侦听属性-watch"><a href="#侦听属性-watch" class="headerlink" title="侦听属性(watch)"></a>侦听属性(watch)</h1><p>通过watch来响应数据的变化,适用于异步加载数据或开销较大的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  el:&quot;#test&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name:&quot;lk&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   user:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      id:1001,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      name:&quot;刘凯&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      age:23,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  watch:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     name:function(newValue,oldValue)&#123;              &#x2F;&#x2F;监视name属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">        console.log(&quot;修改之前的值:&quot; + newValue,&quot;修改之后的值:&quot; + oldValue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     user:&#123;                     &#x2F;&#x2F;监视user对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">      handler:function(newValue,oldValue)&#123;     &#x2F;&#x2F;注意这里的两个参数是对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F;由于user是一个对象,是按引用访问的,所以这里的newValue和oldValue是两个对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">        console.log(&quot;修改之前的值:&quot; + newValue.name,&quot;修改之后的值:&quot; + oldValue.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      deep:true        &#x2F;&#x2F;用来检测对象内部的属性变化,如果不加就是监测对象引用地址的改变</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;注意:此用法不能监视对象里具体的一个属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F;如果监视的是一个对象的话,那么回调函数里的参数就是监视的对象了</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js2.0学习(一)——基础</title>
    <url>/2019/12/02/vue2.0/Vue-Study1/</url>
    <content><![CDATA[<p>vue.js是一套构建用户界面的渐进式框架。<br><code>Vue</code>只关注视图层，采用自底向上增量开发的设计。<br><code>Vue</code> 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<a id="more"></a>

<h1 id="Vue语法格式"><a href="#Vue语法格式" class="headerlink" title="Vue语法格式"></a><code>Vue</code>语法格式</h1><h2 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;选项</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>实例:</p>
<pre><code>&lt;div id=&quot;vue_det&quot;&gt;
       &lt;h1&gt;site : {{site}}&lt;/h1&gt;
       &lt;h1&gt;url : {{url}}&lt;/h1&gt;
       &lt;h1&gt;{{details()}}&lt;/h1&gt;
   &lt;/div&gt;
   &lt;script type=&quot;text/javascript&quot;&gt;
       var vm = new Vue({
           el: &apos;#vue_det&apos;,
           data: {
               site: &quot;菜鸟教程&quot;,
               url: &quot;www.runoob.com&quot;,
               alexa: &quot;10000&quot;,
           },
           methods: {
               details: function() {
                   return  this.site + &quot; - 学的不仅是技术，更是梦想！&quot;;
               }
           }
       })
   &lt;/script&gt;</code></pre><ol>
<li><code>el(element)</code>参数是<code>DOM</code>元素中的<code>id</code>。</li>
<li><code>data</code>用于定义属性(也可以是实例外部方法(函数)的返回值),<code>v-model</code>双向绑定时,<code>data</code>中的属性若为空的话可以用双引号[“”],会根据绑定的数据类型自动转换类型。</li>
<li><code>methods</code>用于定义函数,通过<code>return</code>来返回函数值。</li>
</ol>
<h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><pre><code>var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000}
var vm = new Vue({
    el: &apos;#vue_det&apos;,
    data: data
})</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它们引用相同的对象！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(vm.site === data.site) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">vm.site = <span class="string">"Runoob"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(data.site + <span class="string">"&lt;br&gt;"</span>) <span class="comment">// Runoob</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ……反之亦然</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">data.alexa = <span class="number">1234</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(vm.alexa) <span class="comment">// 1234</span></span></pre></td></tr></table></figure>



<p><code>vue</code>实例还提供了一些有用的实例属性与方法.它们都有前缀$.以便与用户定义的属性区分开来</p>
<p>例如:</p>
<pre><code>//我们的数据对象
var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000}
var vm = new Vue({
    el: &apos;#vue_det&apos;,
    data: data
})

document.write(vm.$data === data) // true
document.write(&quot;&lt;br&gt;&quot;) // true
document.write(vm.$el === document.getElementById(&apos;vue_det&apos;)) // true</code></pre><h1 id="Vue-js模板语法"><a href="#Vue-js模板语法" class="headerlink" title="Vue.js模板语法"></a>Vue.js模板语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><ul>
<li>文本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	el:#app,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	data:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		message:&quot;hello world!&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>






<pre><code>     使用这种方法可能会出现闪烁问题,即页面中的DOM和数据还没有加载完成,页面上会显示出大括号
解决:</code></pre><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">display</span>:none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在使用了双大括号语法的标签里使用v-cloak</p>
<p>扩展: v-text<br>文本插值,其等同于Mustache语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!--和下面的一样--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;&#123;&#123;msg&#125;&#125;&#x2F;p&gt;</span></pre></td></tr></table></figure>


<p>​<br> 2.  使用<code>v-once</code>指令,可以一次性的插值,当数据改变时,插值处的内容不会更新</p>
<ul>
<li>Html</li>
</ul>
<p>使用v-html指令用于输出html代码</p>
<pre><code> &lt;div id=&quot;app&quot;&gt;
    &lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    new Vue({
        el: &apos;#app&apos;,
        data: {
            message: &apos;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&apos;
        }
    })
&lt;/script&gt;</code></pre><ul>
<li><p>属性</p>
<p>HTML属性中的值应使用v-bind指令(双大括号不能作用在HTML特性上)</p>
<p><code>&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</code>    </p>
<p>在布尔特性的情况下,它们的存在即暗示为true,  如果 <code>isButtonDisabled</code> 的值为 null ,<br><code>underfined</code>或 false,则disable的特性不会被包含在渲染出来的<code>&lt;button&gt;</code>元素中<br>(即不加载这个特性)</p>
</li>
<li><p>使用JavaScript表达式</p>
<p>vue.js支持JavaScript表达式(每个绑定都只能包含单个表达式)</p>
<p>JS表达式: 是由运算元和运算符(可选)构成，并产生运算结果的语法结构。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数学运算:&#123;&#123;x+y&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>三目运算符:&#123;&#123;ok?"yes":"no"&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>方法的调用&#123;&#123;msg.split(""),reverse().join()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>指令</li>
</ul>
<p>指令是带有 v-前缀的特殊属性<br>    指令用于在表达式的值改变时,将某些行为应用到DOM上</p>
<p>例如 v-if v-bind  v-text……</p>
<ul>
<li>参数</li>
</ul>
<p>参数在指令后以冒号指明.<br>    例如 <code>v-bind:href = &quot;url&quot;</code></p>
<p>这里的<code>href</code>是参数,告知 <code>v-bind</code>指令该元素的<code>href</code>属性与表达式url的值绑定</p>
<p>参数除了是HTML元素的属性,也可以是监听的事件名,如<code>:click</code>事件</p>
<ul>
<li><p>修饰符</p>
<p>修饰符是以半角句号 <code>.</code> 指明的特殊后缀,用于指出一个指令应该以特殊方式绑定</p>
<p>例如: <code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></p>
<pre><code>`.prevent` 修饰符告诉 v-on 指令对于触发的事件调用`event.preventDefault()`</code></pre></li>
<li><p>用户输入</p>
<pre><code>使用 v-model 指令来实现双向数据绑定</code></pre></li>
</ul>
<p>实例:      </p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
       &lt;p&gt;{{ message }}&lt;/p&gt;
       &lt;input v-model=&quot;message&quot;&gt;
   &lt;/div&gt;
   &lt;script&gt;
    new Vue({
        el: &apos;#app&apos;,
       data: {
         message: &apos;Runoob!&apos;
       }
     })
   &lt;/script&gt;</code></pre><p>按钮的事件可以使用 <code>v-on</code> 监听事件     例如:<code>v-on:click = &quot;click&quot;</code></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--数值的扩展</title>
    <url>/2019/10/17/ECMAScript6/5%E3%80%81%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h1><p>ES6提供了新的写法<br>二进制:  前缀使用0b(或0B)表示<br>八进制: 前缀使用0o(或0O)表示</p>
<a id="more"></a>

<h1 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite() , Number.isNaN()"></a>Number.isFinite() , Number.isNaN()</h1><h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h2><p>检查一个数值是否有限的(即不是Infinity),如果参数类型不是数值,返回false</p>
<h2 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h2><p>检查一个值是否为<code>NaN</code>,如果参数类型不是<code>NaN</code>,<code>Number.isNaN</code>返回<code>false</code><br>与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别:<br>传统方法先调用Number()将非数值的值转为数值,再进行判断<br><em>而这两个新方法只对数值有效</em></p>
<h1 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt() , Number.parseFloat()"></a>Number.parseInt() , Number.parseFloat()</h1><p>ES6将全局方法<code>parseInt()</code>和<code>parseFloat()</code>,移植到Number对象上,行为完全保持不变</p>
<h1 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h1><p>判断一个数值是否为整数,如果参数不是数值,该方法返回false</p>
<p>注意:<br>由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃,这种情况下,<code>Number.isInteger</code>可能会误判</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">3.0000000000000002</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//导致最后的那个2被丢弃了。所以误判为整数</span></span></pre></td></tr></table></figure>

<blockquote>
<p>如果对数据精度的要求比较高,不建议使用该方法判断一个数值是否为整数</p>
</blockquote>
<h1 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h1><p>ES6新增的一个极小的常量,实际上是JavaScript能够表示的最小精度<br>根据规格,它表示1 与大于 1 的最小浮点数之间的差。<br>对于64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001,小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 2.220446049250313e-16</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "0.00000000000000022204"</span></span></pre></td></tr></table></figure>

<blockquote>
<p> 能够用来设置”能够接受的误差范围”(暂时还没有搞懂)</p>
</blockquote>
<h1 id="安全整数和Number-isSafeInteger"><a href="#安全整数和Number-isSafeInteger" class="headerlink" title="安全整数和Number.isSafeInteger()"></a>安全整数和Number.isSafeInteger()</h1><p>JavaScript能够准确表示的整数范围在-2^53到2^53之间(不含两个端点),超过这个范围,无法精确表示这个值<br>ES6引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量,用来表示这个范围的上下限.<br><code>Number.isSafeInteger()</code>用来判断一个整数是否在这个范围内</p>
<h1 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h1><p>ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。</p>
<h2 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h2><p>该方法用于去除一个数的小数部分,返回整数部分.<br>规则:<br>对于非数值,<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值<br>对于空值和无法截取整数的值,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-4.1</span>) <span class="comment">// -4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-0.1234</span>) <span class="comment">// -0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'123.456'</span>) <span class="comment">// 123</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">true</span>) <span class="comment">//1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">false</span>) <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">null</span>) <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">NaN</span>);      <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'foo'</span>);    <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc();         <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc = <span class="built_in">Math</span>.trunc  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(x) : <span class="built_in">Math</span>.floor(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h2 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h2><p>该方法用来判断一个数到底是正数,负数,还是零.  对于非数值,会先将其转换为数值<br>返回值:</p>
<ul>
<li>参数为正数,返回+1</li>
<li>参数为负数,返回-1</li>
<li>参数为0,返回0</li>
<li>参数为-0,返回-0</li>
<li>其他值,返回<code>NaN</code></li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign = <span class="built_in">Math</span>.sign  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  x = +x; <span class="comment">// convert to a number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (x === <span class="number">0</span>  <span class="built_in">isNaN</span>(x)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h2 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h2><p>该方法用于计算一个数的立方根,  对于非数值,会先使用Number方法将其转换为数值<br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.cbrt = <span class="built_in">Math</span>.cbrt  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> y = <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.abs(x), <span class="number">1</span>/<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -y : y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h2 id="Math-clz32"><a href="#Math-clz32" class="headerlink" title="Math.clz32()"></a>Math.clz32()</h2><p>该方法将参数转为32位无符号整数的形式,然后返回这个32位值里面有多少个前导0</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0</span>) <span class="comment">// 32</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1</span>) <span class="comment">// 31</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">1000</span>) <span class="comment">// 22</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b01000000000000000000000000000000</span>) <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.clz32(<span class="number">0b00100000000000000000000000000000</span>) <span class="comment">// 2</span></span></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>对于小数,Math.clz32方法只考虑整数部分</li>
<li>对于空值或其他类型的值,<code>Math.clz32</code>方法会将它们先转为数值,然后再计算</li>
</ul>
<h2 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a>Math.imul()</h2><p>该方法返回两个数以32位带符号整数形式相乘的结果,返回的也是一个32位的带符号整数</p>
<h2 id="Math-fround"><a href="#Math-fround" class="headerlink" title="Math.fround()"></a>Math.fround()</h2><p>该方法返回一个数的32位单精度浮点数形式<br>对于32位单精度格式来说,数值精度是24个二进制位(1 位隐藏位与 23 位有效位),所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。超出这个范围的结果便开始丢失精度</p>
<p>注意:</p>
<ul>
<li>对于<code>NaN</code>和<code>Infinity</code>,该方法返回原值</li>
<li>对于其它类型的非数值,该方法会先将其转为数值,再返回单精度浮点数</li>
</ul>
<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.fround = <span class="built_in">Math</span>.fround  <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([x])[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h2 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a>Math.hypot()</h2><p>该方法返回所有参数的平方和的平方根</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>);        <span class="comment">// 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);     <span class="comment">// 7.0710678118654755</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot();            <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="literal">NaN</span>);         <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">'foo'</span>); <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">'5'</span>);   <span class="comment">// 7.0710678118654755</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">-3</span>);          <span class="comment">// 3</span></span></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>如果参数不是数值,<code>Math.hypot</code>方法会将其转为数值</li>
<li>只要有一个参数无法转为数值,就会返回<code>NaN</code></li>
</ul>
<h2 id="对数的方法"><a href="#对数的方法" class="headerlink" title="对数的方法"></a><strong>对数的方法</strong></h2><h3 id="Math-expm1"><a href="#Math-expm1" class="headerlink" title="Math.expm1()"></a>Math.expm1()</h3><p>该方法返回 ex - 1,即<code>Math.exp(x) - 1</code><br>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.expm1 = <span class="built_in">Math</span>.expm1  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x) - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h3 id="Math-log1p"><a href="#Math-log1p" class="headerlink" title="Math.log1p()"></a>Math.log1p()</h3><p>该方法返回 1 + x 的自然对数,即Math.log(1+x).  如果x小于 -1 ,返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">1</span>)  <span class="comment">// 0.6931471805599453</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">0</span>)  <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">-1</span>) <span class="comment">// -Infinity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p(<span class="number">-2</span>) <span class="comment">// NaN</span></span></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log1p = <span class="built_in">Math</span>.log1p  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(<span class="number">1</span> + x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h3 id="Math-log10"><a href="#Math-log10" class="headerlink" title="Math.log10()"></a>Math.log10()</h3><p>该方法返回10为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">2</span>)      <span class="comment">// 0.3010299956639812</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">1</span>)      <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">0</span>)      <span class="comment">// -Infinity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">-2</span>)     <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10(<span class="number">100000</span>) <span class="comment">// 5</span></span></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log10 = <span class="built_in">Math</span>.log10  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h3 id="Math-log2"><a href="#Math-log2" class="headerlink" title="Math.log2()"></a>Math.log2()</h3><p>该方法返回以2为底的x的对数,   如果x小于0,则返回<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">3</span>)       <span class="comment">// 1.584962500721156</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">2</span>)       <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span>)       <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">0</span>)       <span class="comment">// -Infinity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">-2</span>)      <span class="comment">// NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1024</span>)    <span class="comment">// 10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2(<span class="number">1</span> &lt;&lt; <span class="number">29</span>) <span class="comment">// 29</span></span></pre></td></tr></table></figure>

<p>对于没有部署这个方法的环境:可以使用下面的代码模拟:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.log2 = <span class="built_in">Math</span>.log2  <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.LN2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h2 id="双曲函数方法"><a href="#双曲函数方法" class="headerlink" title="双曲函数方法"></a>双曲函数方法</h2><ul>
<li><code>Math.sinh(x)</code> 返回x的双曲正弦（hyperbolic sine）</li>
<li><code>Math.cosh(x)</code> 返回x的双曲余弦（hyperbolic cosine）</li>
<li><code>Math.tanh(x)</code> 返回x的双曲正切（hyperbolic tangent）</li>
<li><code>Math.asinh(x)</code> 返回x的反双曲正弦（inverse hyperbolic sine）</li>
<li><code>Math.acosh(x)</code> 返回x的反双曲余弦（inverse hyperbolic cosine）</li>
<li><code>Math.atanh(x)</code> 返回x的反双曲正切（inverse hyperbolic tangent）</li>
</ul>
<h1 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h1><p>指数运算符( ** )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span></pre></td></tr></table></figure>

<p>该运算符的特点是左结合,即多个指数运算符连用是,是从最左边开始计算的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于 2 ** (3 ** 2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 512</span></span></pre></td></tr></table></figure>

<p>与等号连用( **= )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a **= <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于 a = a * a;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">b **= <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于 b = b * b * b;</span></span></pre></td></tr></table></figure>

<p>注意:</p>
<p>V8 引擎的指数运算符与<code>Math.pow</code>的实现不相同,对于特别大的运算结果,两者会有细微的差异</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">99</span>, <span class="number">99</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3.697296376497263e+197</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">99</span> ** <span class="number">99</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3.697296376497268e+197</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--正则的扩展</title>
    <url>/2019/10/16/ECMAScript6/4%E3%80%81%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="RegExp构造函数"><a href="#RegExp构造函数" class="headerlink" title="RegExp构造函数"></a>RegExp构造函数</h1><p>在ES5中,RegExp构造函数的参数有两种情况</p>
<p>第一种: 参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span></pre></td></tr></table></figure>

<p>第二种: 参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>
<a id="more"></a>

<p>但是不允许使用第二个参数添加修饰符,否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span></pre></td></tr></table></figure>

<p>ES6中改变了这种行为,如果RegExp构造函数第一个参数是一个正则对象,那么可以使用第二个参数指定修饰符,而且返回的正则表达式会忽略原有的正则表达式的修饰符,只使用新指定的修饰符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "i"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//String.prototype.match 调用 RegExp.prototype[Symbol.match]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">///String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//String.prototype.search 调用 RegExp.prototype[Symbol.search]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//String.prototype.split 调用 RegExp.prototype[Symbol.split]</span></span></pre></td></tr></table></figure>

<h1 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h1><p>字符串对象共有4个方法,可以使用正则表达式:</p>
<ul>
<li>match()</li>
<li>replace()</li>
<li>search()</li>
<li>split()</li>
</ul>
<p>ES6将这4个方法,在语言内部全部调用RegExp的实例方法,从而做到所有与正则相关的方法,全都定义在RegExp对象上.</p>
<ul>
<li>String.prototype.match 调用 RegExp.prototype[Symbol.match]</li>
<li>String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</li>
<li>String.prototype.search 调用 RegExp.prototype[Symbol.search]</li>
<li>String.prototype.split 调用 RegExp.prototype[Symbol.split]</li>
</ul>
<h1 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h1><p>ES6对正则表达式添加了u修饰符,含义为”Unicode 模式”,用来正确处理大于\uFFFF的Unicode 字符(即会正确处理四个字节的 UTF-16 编码)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>加了u修饰符后,ES6会将 \uD83D\uDC2A 识别为一个字符,所以第一行代码为false</p>
<blockquote>
<p>总结:要想识别码点大于oxFFFF的Unicode字符,就需要加上u修饰符</p>
</blockquote>
<p><strong>一旦加上u修饰符号,就会修改下面这些正则表达式的行为:</strong></p>
<ol>
<li>点字符</li>
</ol>
<p>点( . )字符在正则表达式中,含义是除了换行符以外的任意单个字符,对于码点大于oxFFFF的Unicode字符,点字符不能识别,必须加上u修饰符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'𠮷'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">/^.$/.test(s) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/^.$/u.test(s) <span class="comment">// true</span></span></pre></td></tr></table></figure>



<p>2.Unicode字符表示法</p>
<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 u 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不加u修饰符,正则表达式会认为匹配61个连续的u</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/\u&#123;<span class="number">61</span>&#125;/.test(<span class="string">'a'</span>) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">/\u&#123;<span class="number">61</span>&#125;/u.test(<span class="string">'a'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/\u&#123;<span class="number">20</span>BB7&#125;/u.test(<span class="string">'𠮷'</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>3.量词</p>
<p>使用u修饰符后,所有量词都会正确识别码点大于0xFFFF的Unicode字符.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">2</span>&#125;/.test(<span class="string">'aa'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">2</span>&#125;/u.test(<span class="string">'aa'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/.test(<span class="string">'𠮷𠮷'</span>) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/u.test(<span class="string">'𠮷𠮷'</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>4.预定义模式</p>
<p>u修饰符也影响到预定义模式(空白字符类), 加了u修饰符,才能正确识别码点大于oxFFFF的Unicode字符</p>
<p>5.i修饰符</p>
<p>​             <img src="https://qqadapt.qpic.cn/txdocpic/0/704242ba738622b265a23b39a6724a07/0" alt="img">             </p>
<h1 id="RegExp-prototype-unicode-属性"><a href="#RegExp-prototype-unicode-属性" class="headerlink" title="RegExp.prototype.unicode 属性"></a>RegExp.prototype.unicode 属性</h1><p>检查一个正则表达式是否设置了u修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h1><p>ES6添加了y修饰符,叫做”粘连(sticky)”修饰符</p>
<p>y修饰符的作用与g修饰符类似,也是全局匹配,后一次匹配都从上一次匹配成功的下一个位置开始。但是y修饰符确保匹配必须从剩余的第一个位置开始(这也就是”粘连”的涵义)</p>
<h1 id="RegExp-prototype-sticky属性"><a href="#RegExp-prototype-sticky属性" class="headerlink" title="RegExp.prototype.sticky属性"></a>RegExp.prototype.sticky属性</h1><p>检测正则表达式是否设置了y修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="RegExp-prototype-flags属性"><a href="#RegExp-prototype-flags属性" class="headerlink" title="RegExp.prototype.flags属性"></a>RegExp.prototype.flags属性</h1><p>返回正则表达式的修饰符</p>
<h1 id="s修饰符-dotAll模式"><a href="#s修饰符-dotAll模式" class="headerlink" title="s修饰符:dotAll模式"></a>s修饰符:dotAll模式</h1><p>点<code>( . )</code>字符不能匹配的两种情况:</p>
<ol>
<li>四个字节的UTF-16字符</li>
<li>行终止符(表示一行的终结)</li>
</ol>
<ul>
<li><p>U+000A 换行符(\n)</p>
</li>
<li><p>U+000D 回车符(\r)</p>
</li>
<li><p>U+2028 行分隔符（line separator）</p>
</li>
<li><p>U+2029 段分隔符（paragraph separator）</p>
</li>
</ul>
<p>加了s修饰符后,点( . )可以代表任意单个字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/foo.bar/s.test(<span class="string">'foo\nbar'</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>使用<code>dotAll</code>属性检查一个正则表达式是否设置了s修饰符</p>
<p>设置了返回true,否则返回false</p>
<h1 id="Unicode属性类"><a href="#Unicode属性类" class="headerlink" title="Unicode属性类"></a>Unicode属性类</h1><p>新的类的写法:</p>
<ul>
<li>大写的P : <code>\P{...}</code></li>
<li>小写的p : <code>\p{...}</code></li>
</ul>
<p>以上两种写法允许正则表达式匹配符合<code>Unicode</code>某种属性的所有字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Unicode 属性类要指定属性名和属性值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">\p&#123;UnicodePropertyName=UnicodePropertyValue&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//对于某些属性，可以只写属性名，或者只写属性值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">\p&#123;UnicodePropertyName&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">\p&#123;UnicodePropertyValue&#125;</span></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>大写P的写法是小写p的反向匹配,即匹配不满足条件的字符</li>
<li>这两种类(写法)只对Unicode有效,所以使用的时候一定要加上u修饰符,不然会报错</li>
</ul>
</blockquote>
<h1 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h1><p>原先获取分组内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">'1999-12-31'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> year = matchObj[<span class="number">1</span>]; <span class="comment">// 1999</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> month = matchObj[<span class="number">2</span>]; <span class="comment">// 12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> day = matchObj[<span class="number">3</span>]; <span class="comment">// 31</span></span></pre></td></tr></table></figure>

<p>分组只能通过数字序号引用来获取,一旦组的顺序变了,引用的时候就必须修改序号<br>具名组匹配: 为每个分组指定一个名字<br>用法: 模式的头部添加<code>“问号 + 尖括号 + 组名” (?&lt;year&gt;)</code>;<br>获取: 匹配结果的groups属性上引用组名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">'1999-12-31'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> year = matchObj.groups.year; <span class="comment">// 1999</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> month = matchObj.groups.month; <span class="comment">// 12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> day = matchObj.groups.day; <span class="comment">// 31</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//以前的写法在这里也依然有效</span></span></pre></td></tr></table></figure>

<p>如果具名组没有匹配,那么对应的groups对象的属性会是<code>undefined</code></p>
<h2 id="使用解构赋值和替换"><a href="#使用解构赋值和替换" class="headerlink" title="使用解构赋值和替换"></a>使用解构赋值和替换</h2><p>使用解构赋值直接从匹配结果上为变量赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">groups</span>: &#123;one, two&#125;&#125; = <span class="regexp">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class="string">'foo:bar'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">one  <span class="comment">// foo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">two  <span class="comment">// bar</span></span></pre></td></tr></table></figure>

<p>字符串替换时，使用%&lt;组名&gt;引用具名组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'2015-01-02'</span>.replace(re, <span class="string">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '02/01/2015'</span></span></pre></td></tr></table></figure>

<p>replace的第二个参数也可以是个函数,该函数的参数序列如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'2015-01-02'</span>.replace(re, (</span></pre></td></tr><tr><td class="code"><pre><span class="line">   matched, <span class="comment">// 整个匹配结果 2015-01-02</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   capture1, <span class="comment">// 第一个组匹配 2015</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   capture2, <span class="comment">// 第二个组匹配 01</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   capture3, <span class="comment">// 第三个组匹配 02</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   position, <span class="comment">// 匹配开始的位置 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   S, <span class="comment">// 原字符串 2015-01-02</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   groups <span class="comment">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> &#123;day, month, year&#125; = groups;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>/<span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;year&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\k&lt;组名&gt;的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span></pre></td></tr></table></figure>

<p>数字引用依然有效(可以同时使用)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数字引用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//混合使用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!abc!abc'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">RE_TWICE.test(<span class="string">'abc!abc!ab'</span>) <span class="comment">// false</span></span></pre></td></tr></table></figure>

<h1 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h1><p>用法: 字符串.matchAll(正则表达式)<br>用于一次性取出所有匹配,返回一个遍历器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">'test1test2test3'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// g 修饰符加不加都可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/t(e)(st(\d?))/g</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> string.matchAll(regex)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]</span></span></pre></td></tr></table></figure>

<p>遍历器转换为数组:<br>使用…运算符和Array.from()</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--字符串的扩展</title>
    <url>/2019/10/15/ECMAScript6/3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="字符的Unicode表示法"><a href="#字符的Unicode表示法" class="headerlink" title="字符的Unicode表示法"></a>字符的Unicode表示法</h1><p>ES6 加强了对 Unicode 的支持，允许采用\uxxxx形式表示一个字符,其中xxxx表示字符的Unicode码点<br>表示范围:   \u0000 ~ \uFFFF<br>超出范围的字符,必须用两个双字节的形式表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"\uD842\uDFB7"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "𠮷"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"\u20BB7"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// " 7"</span></span></pre></td></tr></table></figure>

<p>上面代码中,如果直接在\u后面跟上超过0xFFFF的数值,JavaScript会理解成 \u20BB+7. 由于\u20BB是一个不可打印字符,所以只会显示一个空格,后面跟着一个7</p>
<a id="more"></a>

<p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"\u&#123;20BB7&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "𠮷"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "ABC"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="number">123</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">hell\u&#123;<span class="number">6</span>F&#125; <span class="comment">// 123</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\u&#123;1F680&#125;'</span> === <span class="string">'\uD83D\uDE80'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p>
<p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'\z'</span> === <span class="string">'z'</span>  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\172'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\x7A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\u007A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\u&#123;7A&#125;'</span> === <span class="string">'z'</span> <span class="comment">// true</span></span></pre></td></tr></table></figure>

<h1 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h1><p>ES6位字符串添加了遍历器接口,使得字符串可以被for…of循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(codePoint)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "f"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "o"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "o"</span></span></pre></td></tr></table></figure>

<p>除了遍历字符串,这个遍历器最大的有点是可以识别大于0xFFFF的码点.传统的for循环无法识别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(text[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// " "</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// " "</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> text) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "𠮷"</span></span></pre></td></tr></table></figure>

<h1 id="直接输入U-2028-和-U-2029"><a href="#直接输入U-2028-和-U-2029" class="headerlink" title="直接输入U+2028 和 U+2029"></a>直接输入U+2028 和 U+2029</h1><p>JavaScript字符串允许直接输入字符,以及输入字符的转义形式<br>例如: <code>&#39;中&#39; === &#39;\u4e2d&#39;         //true</code><br>但是,JavaScript规定有五个字符,不能直接在字符串里面直接使用,只能使用转义形式.</p>
<ul>
<li>U+005C：反斜杠（reverse solidus)</li>
<li>U+000D：回车（carriage return）</li>
<li>U+2028：行分隔符（line separator）</li>
<li>U+2029：段分隔符（paragraph separator）</li>
<li>U+000A：换行符（line feed）</li>
</ul>
<p>对于json格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）</p>
<h1 id="JSON-stringify-的改造"><a href="#JSON-stringify-的改造" class="headerlink" title="JSON.stringify()的改造"></a>JSON.stringify()的改造</h1><p>UTF-8标准规定,0xD800到0xDFFF之间的码点,不能单独使用,必须配对使用<br>现在JSON.stringify方法可能返回不符合UTF-8标准的字符串(可能返回0xD800到0xDFFF之间的单个码点)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\u&#123;D834&#125;'</span>) <span class="comment">// ""\\uD834""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uDF06\uD834'</span>) <span class="comment">// ""\\udf06\\ud834""</span></span></pre></td></tr></table></figure>

<p>如果遇到0xD800到0xDFFF之间的单个码点,或者不存在的匹配形式,它会返回转义字符串,留给应用自己决定下一步的处</p>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>ES6中使用反引号(`)标识模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 多行字符串(所有的空格和缩进都会被保留在输出之中)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用trim方法消除行首行尾的缩进....</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`In JavaScript this is</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     not legal.`</span></span></pre></td></tr></table></figure>

<p>如果在模板中需要使用反引号表示,则需要使用反斜杠进行转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting = <span class="string">`\`Yo\` World!`</span>;</span></pre></td></tr></table></figure>

<p>模板字符串中嵌入<code>变量(js表达式)</code>,需要将<code>变量名(js表达式)</code>写在<code>${}</code>之中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//嵌入变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;name&#125;</span>,年龄:<span class="subst">$&#123;age&#125;</span>`</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//js表达式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "1 + 4 = 5"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "3"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//调用函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span>    <span class="comment">// foo Hello World bar</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意:<br>如果大括号中的值不是字符串,将按照一般的规则转为字符串<br>如果字符串中的变量没有声明,将报错<br>大括号内部是一个字符串,将会原样输出</p>
</blockquote>
<p>模板字符串可以嵌套:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  &lt;table&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">''</span>)&#125;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  &lt;/table&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">`</span>;</span></pre></td></tr></table></figure>

<h1 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h1><p>模板字符串跟在一个函数名后面,该函数将被调用来处理这个模板字符串,这些被称为”标签模板”功能<br>标签: 指的就是函数<br>模板字符串:函数的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert<span class="string">`123`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//等同于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">alert(<span class="number">123</span>);</span></pre></td></tr></table></figure>

<p> 如果标签模板里面有变量,就不是简单的调用了,而是将模板字符串先处理成多个参数,再调用函数,</p>
<p> 函数会接受一个数组和模板里面的变量值 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b &#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tag([<span class="string">'Hello '</span>, <span class="string">' world '</span>, <span class="string">''</span>], <span class="number">15</span>, <span class="number">50</span>);</span></pre></td></tr></table></figure>

<p>第一个参数为数组(该数组有一个raw属性,保存的是转义后的原字符串),该数组的成员是模板字符串中那些没有变量替换的部分, 也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推.</p>
<p>其他参数为模板字符串中各个变量被替换后的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用函数的rest参数(形式为...变量名)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">strArray,...values</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	......</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="模板字符串的限制"><a href="#模板字符串的限制" class="headerlink" title="模板字符串的限制"></a>模板字符串的限制</h2><p>模板字符串默认会将字符串转义,导致无法嵌入其他语言</p>
<h1 id="字符串新增的方法"><a href="#字符串新增的方法" class="headerlink" title="字符串新增的方法"></a>字符串新增的方法</h1><h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String,fromCodePoint()"></a>String,fromCodePoint()</h2><p>用于从Unicode码点返回对应字符,可以识别码点大于0xFFFF的字符(弥补了ES5中该方法的不足)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">0x20BB7</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "𠮷"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">'x\uD83D\uDE80y'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>如果String.fromCodePoint方法有多个参数,则他们会被合并成一个字符串返回</p>
<h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h2><p>该方法返回一个斜杠都被转义(即斜杠前面再加一个斜杠)的字符串,往往用于模板字符串的处理方法<br>如果原字符串的斜杠已经被转义,那么该方法会进行再次转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 "Hi\\\\n"</span></span></pre></td></tr></table></figure>

<p>该方法也可以作为正常的函数使用,这时,他的第一个参数应该是一个具有raw属性的对象,且raw属性的值应该是一个数组.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: <span class="string">'test'</span> &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 't0e1s2t'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: [<span class="string">'t'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>] &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span></pre></td></tr></table></figure>

<h2 id="实例方法-codePointAt"><a href="#实例方法-codePointAt" class="headerlink" title="实例方法: codePointAt()"></a>实例方法: codePointAt()</h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节.对于那些需要4个字节储存的字符(Unicode码点大于0xFFFF的字符),JavaScript 会认为它们是两个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"𠮷"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.length <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.charAt(<span class="number">0</span>) <span class="comment">// ''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.charAt(<span class="number">1</span>) <span class="comment">// ''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.charCodeAt(<span class="number">0</span>) <span class="comment">// 55362</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.charCodeAt(<span class="number">1</span>) <span class="comment">// 57271</span></span></pre></td></tr></table></figure>

<p>对于这种4个字节的字符,JavaScript不能正确处理,字符串长度会误判为2,而且charAt()方法无法读取整个字符,charCodeAt()方法只能分别返回前两个字节和后两个字节的值.<br>ES6提供的codePointAt()方法,能够正确的处理4个字节储存的字符,返回个一个字符的码点.</p>
<p>参数:字符在字符串中的位置(从0开始,整个字符码点的位置)</p>
<p>返回值: 码点的十进制值(可以通过toString方法进行进制的转换)</p>
<p>codePointAt()方法的参数,仍然是不正确的,比如，上面代码中，字符a在字符串的正确位置序号应该是 1，但是必须向codePointAt()方法传入 2.</p>
<p>解决办法:</p>
<p>1).使用for…of循环(它会正确识别 32 位的 UTF-16 字符。)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 20bb7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 61</span></span></pre></td></tr></table></figure>

<p>2).使用扩展运算符(…)进行展开运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...<span class="string">'𠮷a'</span>]; <span class="comment">// arr.length === 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">arr.forEach(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ch =&gt; <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 20bb7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 61</span></span></pre></td></tr></table></figure>

<h2 id="实例方法-normalize"><a href="#实例方法-normalize" class="headerlink" title="实例方法:normalize()"></a>实例方法:normalize()</h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。</p>
<p>一:直接提供带重音符号的字符，比如Ǒ（\u01D1）</p>
<p>二:提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如o（\u004F）和ˇ \u030C）合成Ǒ（\u004F\u030C）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'\u01D1'</span>===<span class="string">'\u004F\u030C'</span> <span class="comment">//false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\u01D1'</span>.length <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'\u004F\u030C'</span>.length <span class="comment">// 2</span></span></pre></td></tr></table></figure>

<p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>
<p>normalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。</p>
<ul>
<li>NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li>
<li>NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>
<li>NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）</li>
<li>NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>
</ul>
<blockquote>
<p>注意: normalize方法目前不能识别三个或三个以上字符的合成.  这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>
</blockquote>
<h2 id="实例方法-includes-startsWith-endsWith"><a href="#实例方法-includes-startsWith-endsWith" class="headerlink" title="实例方法:includes() , startsWith() , endsWith()"></a>实例方法:includes() , startsWith() , endsWith()</h2><ul>
<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>
<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//第二个参数表示从第n个位置知道字符串结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//第二个参数表示针对前n个字符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span></pre></td></tr></table></figure>

<h2 id="实例方法-repeat"><a href="#实例方法-repeat" class="headerlink" title="实例方法: repeat()"></a>实例方法: repeat()</h2><p>repeat()方法返回一个新字符串,表示将原字符串重复n次.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>参数如果是小数,会被取整(小数的整数部分)</li>
<li>参数如果是负数或infinity,会报错</li>
<li>参数是0到-1之间的小数,则等同于0(这是因为会先进行取整运算)</li>
<li>参数NaN等同于0</li>
<li>参数是字符串,则会先转换成数字</li>
</ul>
</blockquote>
<h2 id="实例方法-padStart-padEnd"><a href="#实例方法-padStart-padEnd" class="headerlink" title="实例方法: padStart() , padEnd()"></a>实例方法: padStart() , padEnd()</h2><p>用途:字符串长度补全, padStart()用于头部补全, padEnd()用于尾部补全</p>
<p>参数:</p>
<p>第一个参数:字符串补全生效的最大长度</p>
<p>第二个参数:用来补全的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<ul>
<li>如果原字符串的长度等于或大于最大长度,则字符串补全不生效,返回原字符串</li>
</ul>
<ul>
<li><p>如果用来补全的字符串与原字符串两者的长度之和超过了最大长度,则会截去超出位数的补全字符串 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">'0123456789'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '0123456abc'</span></span></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>如果省略第二个参数,默认使用空格补全长度</li>
</ul>
</blockquote>
<h2 id="实例方法-trimStart-trimEnd"><a href="#实例方法-trimStart-trimEnd" class="headerlink" title="实例方法: trimStart() , trimEnd()"></a>实例方法: trimStart() , trimEnd()</h2><p>这两个方法的行为与trim一致,trimStart()消除字符串头部的空格,trimEnd()消除尾部的空格,并返回新字符串,不会修改原始字符串.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">'  abc  '</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.trim() <span class="comment">// "abc"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.trimStart() <span class="comment">// "abc  "</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s.trimEnd() <span class="comment">// "  abc"</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意:除了空格键,这两个方法对字符串头部(或尾部)的tab键 , 换行等不可见的空白符号也有效</p>
</blockquote>
<h2 id="实例方法-matchAll"><a href="#实例方法-matchAll" class="headerlink" title="实例方法: matchAll()"></a>实例方法: matchAll()</h2><p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6--变量的解构和赋值</title>
    <url>/2019/10/14/ECMAScript6/2%E3%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E5%92%8C%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<p>ES6允许按照一定模式,从数组和对象中提取值,对变量进行赋值 ,着称为结构赋值</p>
<h1 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的结构赋值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//上面的写法等同于</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span></pre></td></tr></table></figure>

<p>本质上,这种写法属于”模式匹配”,只要等号两边的模式相同,左边的变量就会被赋予对应的值<br>如果结构不成功变量的值等于undefined.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span></pre></td></tr><tr><td class="code"><pre><span class="line">foo <span class="comment">// 1      </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">bar <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">baz <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">third <span class="comment">// "baz"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">x <span class="comment">// 1      </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">y <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">head <span class="comment">// 1     </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tail <span class="comment">// [2, 3, 4]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">x <span class="comment">// "a"      </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">y <span class="comment">// undefined     </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">z <span class="comment">// []</span></span></pre></td></tr></table></figure>

<blockquote>
<p>…运算符为Iterator 提供的</p>
</blockquote>
<p>结构不完全,即等号左边的模式,只匹配一部分的等号右边的数组,这种情况下,结构依然可以成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">x <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">y <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">a <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d <span class="comment">// 4</span></span></pre></td></tr></table></figure>

<p>如果等号的右边不是数组(严格的来说,不是可遍历的结构),将会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span></pre></td></tr></table></figure>

<p>上面前五个表达式的值转为对象以后不具备Iterator接口,最后一个本身就不具备Iterator接口<br>对于set结构,也可以使用数组的结构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">x <span class="comment">// "a"</span></span></pre></td></tr></table></figure>

<p>事实上,只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>结构赋值允许指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">foo <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span></pre></td></tr></table></figure>

<p>ES6内部使用严格相等运算符(===)判断一个位置是否有值,所以,只有当一个数组成员严格等于undefined,默认值才会生效如果默认值是一个表达式,那么这个表达式是惰性求值的,即只有在用到的时候,才会求值(例如函数表达式)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x=f()] = [<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//由于数组成员不为undefined,所以函数f不会执行</span></span></pre></td></tr></table></figure>

<blockquote>
<p>注意:默认值可以引用结构赋值的其他变量,但该变量必须已经声明</p>
</blockquote>
<h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>结构不仅可以用于数组,还可以用于对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:foo,<span class="attr">bar</span>:bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'aaa'</span>,<span class="attr">bar</span>:<span class="string">'bbb'</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//简写:let &#123;foo,bar&#125; = &#123;foo:'aaa',bar:'bbb'&#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo     <span class="comment">//'aaa'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">bar     <span class="comment">//'bbb'</span></span></pre></td></tr></table></figure>

<p>上面代码中,键值对的意思是    <strong>属性名: 变量名</strong><br>对象的解构赋值的内部机制,是先找到同名属性,然后再赋值给对应的变量.真正的被赋值的是后者,而不是前者</p>
<p><strong>与数组解构的不同之处:</strong></p>
<ol>
<li>数组解构中数组的元素必须按次序排列,变量的取值由它的位置决定;</li>
<li>但是对象解构赋值没有次序要求,只要变量与属性同名,才能取到正确的值</li>
<li>同数组解构一样,如果解构失败,变量的值等于undefined</li>
</ol>
<blockquote>
<p>注意:  对象的解构赋值可以取到继承的属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1, obj2);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; foo &#125; = obj1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">foo <span class="comment">// "bar"</span></span></pre></td></tr></table></figure>



<h2 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a><strong>默认值</strong></h2><p>对象的解构也可以指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x=<span class="number">3</span>&#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">x   <span class="comment">//3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>:y=<span class="number">3</span>&#125; = &#123;<span class="attr">x</span>:<span class="number">5</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">y  <span class="comment">//5</span></span></pre></td></tr></table></figure>

<p>默认值生效的条件是,对象的属性值严格等于undefined</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h2><p>(1)如果要讲一个已经声明的变量用于解构赋值,必须非常小心</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误的写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//上面代码的写法会报错，因为 JavaScript 引擎会将&#123;x&#125;理解成一个代码块，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//从而发生语法错误。只有不将大括号写在行首，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//避免 JavaScript 将其解释为代码块，才能解决这个问题。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//正确的写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;);</span></pre></td></tr></table></figure>

<p>(2)由于数组本质上是特殊的对象,因此可以对数组进行对象属性的解构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>:first,[arr.length <span class="number">-1</span>]:last&#125; = arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">first    <span class="comment">//1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">last     <span class="comment">//3</span></span></pre></td></tr></table></figure>

<h1 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h1><p>字符串在解构赋值时会被转成一个类似数组的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,d,e] = <span class="string">'hello'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="comment">//"h"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b   <span class="comment">//"e"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="comment">//"l"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d   <span class="comment">//"l"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e   <span class="comment">//"o"</span></span></pre></td></tr></table></figure>

<h1 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h1><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>:s&#125; = <span class="number">123</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span></pre></td></tr></table></figure>

<p>解构赋值的规则: 只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<h1 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h1><p>函数的参数也可以使用解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> x + y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span></pre></td></tr></table></figure>

<p>函数参数的解构使用默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> [x, y];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">move(); <span class="comment">// [0, 0]</span></span></pre></td></tr></table></figure>

<h1 id="圆括号的问题"><a href="#圆括号的问题" class="headerlink" title="圆括号的问题"></a>圆括号的问题</h1><p>建议只要有可能，就不要在模式中放置圆括号。</p>
<h2 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h2><ol>
<li>变量声明语句</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全部报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;(x): c&#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</span></pre></td></tr></table></figure>

<p>2.函数参数</p>
<p>函数参数也属于变量声明,因此不能带有圆括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[z,(x</span>)]) </span>&#123; <span class="keyword">return</span> x; &#125;</span></pre></td></tr></table></figure>

<p>3.赋值语句的模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">([a]) = [<span class="number">5</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//将整个模式放在圆括号之中，导致报错。</span></span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[(&#123; <span class="attr">p</span>: a &#125;), &#123; <span class="attr">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//将一部分模式放在圆括号之中，导致报错。</span></span></pre></td></tr></table></figure>

<h2 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h2><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span></pre></td></tr></table></figure>

<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>1.交换变量的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[x, y] = [y, x];</span></pre></td></tr></table></figure>

<p>2.从函数返回多个值<br>将函数返回值放在一个数组或对象里返回,用解构赋值进行取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    foo: <span class="number">1</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bar: <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span></pre></td></tr></table></figure>

<p>3.函数参数的定义<br>解构赋值可以方便地将一组参数与变量名对应起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组无次序的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span></pre></td></tr></table></figure>

<p>4.提取JSON数据<br>解构赋值对提取 JSON 对象中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  id: <span class="number">42</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  status: <span class="string">"OK"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(id, status, number);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span></pre></td></tr></table></figure>

<p>5.函数参数的默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组无次序的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x:x=<span class="number">1</span>, y:y=<span class="number">2</span>, z:z=<span class="number">3</span>&#125;</span>) </span>&#123; ... &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;);    <span class="comment">//x=1 y=2 z=3</span></span></pre></td></tr></table></figure>

<p>6.遍历Map结构</p>
<p>任何部署了 Iterator 接口的对象，都可以用for…of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// first is hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// second is world</span></span></pre></td></tr></table></figure>

<p>只想获取键名,或者获取键值,可以写成下面的形式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 获取键值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>7.输入模块的指定方法</p>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>ES6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>let和const命令</title>
    <url>/2019/10/12/ECMAScript6/1%E3%80%81let&amp;&amp;const/</url>
    <content><![CDATA[<h1 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h1><ul>
<li>let命令只在所在的代码块内有效</li>
<li>let命令很适合for循环的计数器</li>
<li>let命令不存在变量提升,在变量声明前使用会报ReferenceError错误</li>
<li>let不允许在相同的作用域内,重复声明同一个变量</li>
</ul>
<a id="more"></a>

<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES5只有全局作用域和函数作用域,没有块级作用域,这带来很多不合理场景。<br>第一种场景:内层变量可能会覆盖外层变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">f(); <span class="comment">// undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//解释</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*函数内部if代码块外部使用外层的tmp变量,内部使用内层的tmp变量,但是由于存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*变量提升,内层的tmp覆盖了外层的tmp变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr></table></figure>



<p>第二种场景:用来计数的循环变量泄露为全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(s[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*循环变量i只用来控制循环,但是循环结束后,他并没有小时,泄露成了全局变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr></table></figure>



<h2 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h2><p>let和const为JavaScript提供了块级作用域<br>ES6允许块级作用域的多级嵌套</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">let</span> test = <span class="number">12</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;<span class="keyword">let</span> text = <span class="number">12</span>;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;&#125;&#125;</span></pre></td></tr></table></figure>

<p>块级作用域的出现,使用立即执行函数来防止污染全局变量已经不再必要了</p>
<h2 id="块级作用域域函数声明"><a href="#块级作用域域函数声明" class="headerlink" title="块级作用域域函数声明"></a>块级作用域域函数声明</h2><p>ES5规定,函数只能在顶层作用域和函数作用域之中声明,不能在块级作用中声明函数,但是浏览器没有遵守这个规定,为了兼容以前的旧代码,还是支持在块级作用域之中声明函数</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 重复声明一次函数f</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  f();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;());</span></pre></td></tr></table></figure>

<p>在ES5环境中运行,if内声明的函数会被提升到函数头部:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  f();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;());</span></pre></td></tr></table></figure>

<p>ES6引入块级作用域后,明确允许在块级作用域之中声明函数.函树声明语句的行为类似于let,在块级作用域之外不可引用.<br>但是ES6规定,浏览器的实现可以不遵守上面的规定,有自己的行为方式(为了兼容以前的老代码).</p>
<ul>
<li>允许在块级作用域内声明函数</li>
<li>函数声明类似于var,即会提升到全局作用域或函数作用域的头部。</li>
<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>
</ul>
<blockquote>
<p>注意:上面的三条规则只对ES6的浏览器实现有效,其他浏览器环境的实现不用遵守</p>
</blockquote>
<p>上面的例子在ES6环境中运行如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器的 ES6 环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  f();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;());</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Uncaught TypeError: f is not a function</span></span></pre></td></tr></table></figure>

<blockquote>
<p>综上所述,应该避免在块级作用域内声明函数,如果确实需要,也应该写成函数表达式,而不是函数声明语句。<br>注意:ES6块级作用域必须有大括号,如果没有大括号,JavaScript引擎就认为不存在块级作用域</p>
</blockquote>
<h1 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h1><p>const声明一个只读的常量,一旦声明,常量的值就不能改变。<br>const一旦声明了变量,就必须立即初始化,不能留到以后赋值,不然会报错。<br>const声明的变量也是不存在变量提升的,不能重复声明。</p>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>const定义的常量不是变量的值不得改动,而是变量指向的的那个内存地址保存的数据不得改动</p>
<ul>
<li>对于简单类型的数据(数值,字符串,布尔值),值就保存在变量指向的那个内存地址,因此等同于常量</li>
<li>对于复合类型的数据(主要是对象和数组),变量指向的内存地址,保存的只是一个指向实际数据的指针,const只能保证这个指针是固定的,但是它指向的数据结构是不是可变的就不能控制了</li>
</ul>
<h1 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h1><p>在ES5中,全局变量就等同于顶层对象(window)的属性,这非常不利于模块化编程,因为顶层对象的属性到处都可以修改。<br>ES6中的let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p>
<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><ol>
<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块</li>
<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象，否则会指向当前对象（运行环境）</li>
</ol>
<h1 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h1><p>概念:使用let或const命令声明变量之前,该变量都是不可用的,这在语法上,称为”暂时性死区”.<br>暂时性死区意味着typeof不再是一个百分之百安全的操作.</p>
<p>例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x;       <span class="comment">//ReferenceError</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端开发</category>
        <category>ECMAScript6学习</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
